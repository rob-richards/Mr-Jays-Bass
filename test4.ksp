{***********************************************
Retro Machines - Main Page
Author: Native Instruments
Written by: Nicki Marinic, Adam Hanley
Modified: August 28, 2014
*************************************************}


on init

{ function info }

	{
	
	to do:
	
	- pitchbend recall
	
	- settings page and snapshots
	
	- isolate controls
	
	- in persistence callback, what on init and what on snapshot
	
	
	}


{function } {}
	
{ function global }
	
	message("")
	declare $latest_callback_id
	declare $init_flag := 1
	
	{snapshot}
	declare $instr_loaded := 1 {1 if init callback has been loaded, 0 otherwise}
	set_snapshot_type(1)
	
	set_script_title("Retro Machines")
	make_perfview
	set_ui_height_px(400)
	set_control_par_str($INST_ICON_ID, $CONTROL_PAR_PICTURE, "instr_icon")
	declare $count
	
	declare const $CREATE_AUTOMATION_ID := 0
	declare const $LOOP_WAIT := 75
	declare const $FONT_ID1 := 2
	declare const $FONT_ID2 := 3
	
	declare const $NUM_PRESET_SETTINGS := 5
	
{function } {}
	
{ function synth_constants }
	
	{GUI}
	
	declare const $MOUSE_BEHAVIOUR_KNOB := -350
	
	{Slots}
	
	declare const $EQ_SLOT_IDX := 0
	declare const $FLT_SLOT_IDX := 2
	
	{Midi CC}
	
	declare const $CUTOFF_CC := 110
	declare const $RESO_CC := 111
	declare const $LFO_RATE_CC := 112
	declare const $FLT_ENV_DECAY_CC := 113
	declare const $FX_1_CC := 114
	declare const $FX_2_CC := 115
	declare const $GAIN_CC := 116
	declare const $FAT_CC := 117
	
	declare const $MIDI_CC_MIN := 110 {used for ignoring cc messages}
	declare const $MIDI_CC_MAX := 117
	
	{Preset Handling}
	
	declare const $NUM_VARIATIONS := 8
	
	declare const $NUM_PARAMETER := 27
	
	declare const $TABLE_IDX_CUTOFF := 0
	declare const $TABLE_IDX_RESO := 1
	declare const $TABLE_IDX_FLT_TYPE := 2
	declare const $TABLE_IDX_FLT_ONOFF := 3
	declare const $TABLE_IDX_SOUND := 4
	declare const $TABLE_IDX_FAT := 5
	declare const $TABLE_IDX_LFO_CUTOFF := 6
	declare const $TABLE_IDX_VELO_CUTOFF := 7
	declare const $TABLE_IDX_ENV_CUTOFF := 8
	declare const $TABLE_IDX_FLT_ENV_DECAY := 9
	declare const $TABLE_IDX_LFO_TYPE := 10
	declare const $TABLE_IDX_LFO_RATE := 11
	declare const $TABLE_IDX_LFO_PITCH := 12
	declare const $TABLE_IDX_SAMPLE_START := 13
	declare const $TABLE_IDX_ATTACK := 14
	declare const $TABLE_IDX_RELEASE := 15
	declare const $TABLE_IDX_VEL_VOL := 16
	declare const $TABLE_IDX_GAIN := 17
	declare const $TABLE_IDX_ENV := 18
	declare const $TABLE_IDX_FX_1 := 19
	declare const $TABLE_IDX_FX_2 := 20
	declare const $TABLE_IDX_GLIDE := 21
	declare const $TABLE_IDX_SOLO := 22
	declare const $TABLE_IDX_LEGATO := 23
	declare const $TABLE_IDX_GLIDE_ONOFF := 24
	declare const $TABLE_IDX_ARP_ONOFF := 25
	declare const $TABLE_IDX_CHORD_ONOFF := 26
	
{function } {}
	
{ function arp_constants }
	
	declare const $REC_TIME_TRANSPORT_RUNNING := 10
	declare const $REC_TIME_TRANSPORT_STOPPED := 30
	declare const $LATCH_TIME := 300
	
	declare const $NUM_OF_BEATS := 4 {i.e. 4 = 4/4 bar}
	declare const $TICKS_PER_BEAT := 24
	declare const $MAX_NUM_OF_STEPS := 16 {don't change, must be 16}
	
	declare $beat_grid
	$beat_grid := 4
	make_persistent($beat_grid)
	
	declare $ticks_per_step
	$ticks_per_step := $TICKS_PER_BEAT/$beat_grid
	make_persistent($ticks_per_step)
	
	declare $num_of_steps
	$num_of_steps := $beat_grid * $NUM_OF_BEATS
	make_persistent($num_of_steps)
	
	declare const $DEFAULT_WIDTH := 20
	declare const $DEFAULT_HEIGHT := 20
	
	declare const $SEQ_WIDTH := 300
	
	declare const $DEFAULT_POS_X := 114
	
	declare %DEFAULT_DIST_X[2] := (34,26)
	
	declare %DEFAULT_X_OFFSET[28] := (...
	{12}	8,8,8,	8,8,8,	8,8,8,	8,8,8,	...
	{16}	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0)
	
	declare const $DEFAULT_POS_Y_LAUFLICHT := 157
	declare const $DEFAULT_POS_Y_ARP_RHYTHM := 173
	declare const $DEFAULT_POS_Y_ARP_VARIATION := 232
	
	declare !beat_grid_names[2]
	!beat_grid_names[0] := "1/8 T"
	!beat_grid_names[1] := "1/16"

{function } {}
	
{ function chord_constants }
	
	declare const $CHORD_POS_Y := 250
	declare const $CHORD_POS_X := 0
	
	declare const $MAX_NUM_OF_NOTES := 4
	
	declare !note_class[12]
	!note_class[0] := "C"
	!note_class[1] := "Db"
	!note_class[2] := "D"
	!note_class[3] := "Eb"
	!note_class[4] := "E"
	!note_class[5] := "F"
	!note_class[6] := "Gb"
	!note_class[7] := "G"
	!note_class[8] := "Ab"
	!note_class[9] := "A"
	!note_class[10] := "Bb"
	!note_class[11] := "B"

{function } {}

{ function gui_global }
	
	set_control_par_str($INST_WALLPAPER_ID,$CONTROL_PAR_PICTURE,"bg_animation")
	
	declare ui_button $page_1_btn
	declare ui_button $page_2_btn
	declare ui_button $page_3_btn
	
	set_text($page_1_btn,"")
	set_text($page_2_btn,"")
	set_text($page_3_btn,"")
	
	$page_1_btn := 1
	
	declare %page_btn_ids[3]
	%page_btn_ids[0] := get_ui_id($page_1_btn)
	%page_btn_ids[1] := get_ui_id($page_2_btn)
	%page_btn_ids[2] := get_ui_id($page_3_btn)
	
	set_control_par_str(%page_btn_ids[0],$CONTROL_PAR_PICTURE,"btn-synth")
	set_control_par_str(%page_btn_ids[1],$CONTROL_PAR_PICTURE,"btn-arp")
	set_control_par_str(%page_btn_ids[2],$CONTROL_PAR_PICTURE,"btn-settings")
	
	
	$count := 0
	while ($count < num_elements(%page_btn_ids))
		
		set_control_par(%page_btn_ids[$count],$CONTROL_PAR_POS_X,321+$count*93)
		set_control_par(%page_btn_ids[$count],$CONTROL_PAR_POS_Y,22)
		
		set_control_par(%page_btn_ids[$count],$CONTROL_PAR_WIDTH,90)
		set_control_par(%page_btn_ids[$count],$CONTROL_PAR_HEIGHT,21)
		
		inc($count)
	end while
	
{function } {}
	
{ function gui_synth_osc }
	
	declare ui_slider $sound_sld (0,100)
	make_persistent($sound_sld)
	
	declare ui_slider $fat_sld (0,127)
	make_persistent($fat_sld)
	
	declare ui_slider $lfo_pitch_sld (0,1000000)
	make_persistent ($lfo_pitch_sld)
	
	declare ui_slider $sample_start_sld (0,1000000)
	make_persistent ($sample_start_sld)
	
	move_control_px($sound_sld,60,81)
	move_control_px($fat_sld,116,81)
	move_control_px($lfo_pitch_sld,66,148)
	move_control_px($sample_start_sld,122,148)
	
	{eq related data and variables}
	
	declare %savearr[9*11] := (...
	365234,62500,500000,620117,62500,500000,858398,62500,500000,...
	365234,62500,500000,620117,62500,255859,858398,62500,633789,...
	365234,62500,500000,620117,58594,11719,858398,203125,803711,...
	365234,62500,500000,367188,191406,496094,858398,460938,637695,...
	361328,62500,491211,188477,574219,0,696289,340820,710938,...
	100586,114258,80078,349609,617188,500000,704102,332031,500000,...
	385449,180274,404297,361133,126953,416992,665039,355000,328125,...
	365234,62500,596680,291992,285254,285352,941406,156250,658203,...
	806641,0,0,327148,425781,191485,618555,709961,645313,...
	365234,62500,500000,530273,265625,638889,858398,62500,500000,...
	484375,816406,638889,345703,6836,0,1000000,139648,33203)
	
	
	declare %engine_par[9] := (...
	$ENGINE_PAR_FREQ1,$ENGINE_PAR_BW1,$ENGINE_PAR_GAIN1,...
	$ENGINE_PAR_FREQ2,$ENGINE_PAR_BW2,$ENGINE_PAR_GAIN2,...
	$ENGINE_PAR_FREQ3,$ENGINE_PAR_BW3,$ENGINE_PAR_GAIN3)
	declare $helper_eq
	declare $a_eq
	declare $knob_eq
	
	
	declare $index_1
	declare $index_2
	
{function } {}	
	
{ function gui_synth_filter }
	
	declare ui_slider $cutoff_sld (0,127)
	set_control_par(get_ui_id($cutoff_sld),$CONTROL_PAR_DEFAULT_VALUE,64)
	make_persistent ($cutoff_sld)
	
	declare ui_slider $reso_sld (0,127)
	make_persistent ($reso_sld)
	
	declare ui_slider $lfo_cutoff_sld (0,1000000)
	make_persistent ($lfo_cutoff_sld)
	
	declare ui_slider $velo_cutoff_sld (0,1000000)
	make_persistent ($velo_cutoff_sld)
	
	declare ui_slider $env_cutoff_sld (-100,100)
	set_control_par(get_ui_id($env_cutoff_sld),$CONTROL_PAR_DEFAULT_VALUE,0)
	make_persistent ($env_cutoff_sld)
	
	declare ui_slider $flt_env_decay_sld (0,127)
	set_control_par(get_ui_id($flt_env_decay_sld),$CONTROL_PAR_DEFAULT_VALUE,64)
	make_persistent ($flt_env_decay_sld)
	
	declare ui_button $flt_1_btn
	declare ui_button $flt_2_btn
	declare ui_button $flt_3_btn
	declare ui_button $flt_4_btn
	make_persistent($flt_1_btn)
	make_persistent($flt_2_btn)
	make_persistent($flt_3_btn)
	make_persistent($flt_4_btn)
	
	declare %flt_type_btn_ids[4]
	%flt_type_btn_ids[0] := get_ui_id($flt_1_btn)
	%flt_type_btn_ids[1] := get_ui_id($flt_2_btn)
	%flt_type_btn_ids[2] := get_ui_id($flt_3_btn)
	%flt_type_btn_ids[3] := get_ui_id($flt_4_btn)
	
	$count := 0
	while ($count < num_elements(%flt_type_btn_ids))
		
		set_control_par(%flt_type_btn_ids[$count],$CONTROL_PAR_POS_X,368)
		set_control_par(%flt_type_btn_ids[$count],$CONTROL_PAR_POS_Y,70+$count*16)
		
		set_control_par(%flt_type_btn_ids[$count],$CONTROL_PAR_WIDTH,28)
		set_control_par(%flt_type_btn_ids[$count],$CONTROL_PAR_HEIGHT,23)
		
		set_control_par_str(%flt_type_btn_ids[$count],$CONTROL_PAR_PICTURE,"btn-small")
		set_control_par_str(%flt_type_btn_ids[$count],$CONTROL_PAR_TEXT,"")
		
		inc($count)
	end while
	
	declare ui_switch $flt_onoff_btn
	set_text ($flt_onoff_btn,"")
	set_control_par(get_ui_id($flt_onoff_btn),$CONTROL_PAR_WIDTH,33)
	set_control_par(get_ui_id($flt_onoff_btn),$CONTROL_PAR_HEIGHT,20)
	set_control_par_str(get_ui_id($flt_onoff_btn),$CONTROL_PAR_PICTURE,"btn-switch-red")
	make_persistent($flt_onoff_btn)
	
	move_control_px($flt_onoff_btn,321,54)
	
	move_control_px($cutoff_sld,205,81)
	move_control_px($reso_sld,268,81)
	move_control_px($lfo_cutoff_sld,212,148)
	move_control_px($velo_cutoff_sld,274,148)
	move_control_px($env_cutoff_sld,336,148)
	move_control_px($flt_env_decay_sld,398,148)
	
	
{function } {}

{ function gui_synth_amp }
	
	declare ui_slider $attack_sld (0,876400)
	make_persistent($attack_sld)
	
	declare ui_slider $release_sld (98140,775700)
	set_control_par(get_ui_id($release_sld),$CONTROL_PAR_DEFAULT_VALUE,436920)
	make_persistent($release_sld)
	
	declare ui_slider $vel_vol_sld (0,1000000)
	set_control_par(get_ui_id($vel_vol_sld),$CONTROL_PAR_DEFAULT_VALUE,500000)
	make_persistent ($vel_vol_sld)
	
	declare ui_slider $gain_sld (0,127)
	set_control_par(get_ui_id($gain_sld),$CONTROL_PAR_DEFAULT_VALUE,64)
	make_persistent ($gain_sld)
	
	declare ui_switch $env_btn
	set_text ($env_btn,"")
	set_control_par(get_ui_id($env_btn),$CONTROL_PAR_WIDTH,28)
	set_control_par(get_ui_id($env_btn),$CONTROL_PAR_HEIGHT,23)
	make_persistent ($env_btn)
	
	move_control_px($attack_sld,480,81)
	move_control_px($release_sld,537,81)
	move_control_px($vel_vol_sld,487,148)
	move_control_px($gain_sld,543,148)
	move_control_px($env_btn,543,190)
	
	set_control_par_str(get_ui_id($env_btn),$CONTROL_PAR_PICTURE,"btn-small")
	
	
{function } {}	

{ function gui_synth_perform }
	
	declare ui_slider $glide_sld (0,127)
	make_persistent($glide_sld)
	
	declare ui_switch $solo_btn
	set_text ($solo_btn,"")
	set_control_par(get_ui_id($solo_btn),$CONTROL_PAR_WIDTH,28)
	set_control_par(get_ui_id($solo_btn),$CONTROL_PAR_HEIGHT,23)
	make_persistent ($solo_btn)
	
	declare ui_switch $legato_btn
	set_text ($legato_btn,"")
	set_control_par(get_ui_id($legato_btn),$CONTROL_PAR_WIDTH,28)
	set_control_par(get_ui_id($legato_btn),$CONTROL_PAR_HEIGHT,23)
	make_persistent ($legato_btn)
	
	declare ui_switch $glide_btn
	set_text ($glide_btn,"")
	set_control_par(get_ui_id($glide_btn),$CONTROL_PAR_WIDTH,28)
	set_control_par(get_ui_id($glide_btn),$CONTROL_PAR_HEIGHT,23)
	make_persistent ($glide_btn)
	
	move_control_px($glide_sld,66,247)
	move_control_px($solo_btn,101,236)
	move_control_px($legato_btn,101,254)
	move_control_px($glide_btn,101,272)
	
	set_control_par_str(get_ui_id($solo_btn),$CONTROL_PAR_PICTURE,"btn-small")
	set_control_par_str(get_ui_id($legato_btn),$CONTROL_PAR_PICTURE,"btn-small")
	set_control_par_str(get_ui_id($glide_btn),$CONTROL_PAR_PICTURE,"btn-small")
	
	{arp and chord}
	
	declare ui_switch $arp_onoff_btn
	set_text ($arp_onoff_btn,"")
	set_control_par(get_ui_id($arp_onoff_btn),$CONTROL_PAR_WIDTH,52)
	set_control_par(get_ui_id($arp_onoff_btn),$CONTROL_PAR_HEIGHT,23)
	make_persistent ($arp_onoff_btn)
	
	declare ui_switch $chord_onoff_btn
	set_text ($chord_onoff_btn,"")
	set_control_par(get_ui_id($chord_onoff_btn),$CONTROL_PAR_WIDTH,52)
	set_control_par(get_ui_id($chord_onoff_btn),$CONTROL_PAR_HEIGHT,23)
	make_persistent ($chord_onoff_btn)
	
	move_control_px($arp_onoff_btn,484,341)
	move_control_px($chord_onoff_btn,540,341)
	
	set_control_par_str(get_ui_id($arp_onoff_btn),$CONTROL_PAR_PICTURE,"btn-switch-blue")
	set_control_par_str(get_ui_id($chord_onoff_btn),$CONTROL_PAR_PICTURE,"btn-switch-blue")
	
{function } {}	

{ function gui_synth_fx }
	
	declare ui_slider $fx_1_sld (0,127)
	make_persistent($fx_1_sld)
	
	declare ui_slider $fx_2_sld (0,127)
	make_persistent($fx_2_sld)
	
	declare ui_label $fx_2_lbl (1,1)
	
	set_control_par_str(get_ui_id($fx_2_lbl),$CONTROL_PAR_PICTURE,"label-echo-phaser")
	set_control_par_str(get_ui_id($fx_2_lbl),$CONTROL_PAR_TEXT,"")
	
	if (get_engine_par($ENGINE_PAR_SEND_EFFECT_TYPE,-1,1,0) = $EFFECT_TYPE_DELAY)
		set_control_par(get_ui_id($fx_2_lbl),$CONTROL_PAR_PICTURE_STATE,0)
	else
		set_control_par(get_ui_id($fx_2_lbl),$CONTROL_PAR_PICTURE_STATE,1)
	end if
	
	move_control_px($fx_1_sld,66,328)
	move_control_px($fx_2_sld,122,328)
	move_control_px($fx_2_lbl,117,359)
	
	
{function } {}	

{ function gui_synth_lfo }
	
	declare ui_slider $lfo_rate_sld (0,127)
	set_control_par(get_ui_id($lfo_rate_sld),$CONTROL_PAR_DEFAULT_VALUE,64)
	make_persistent ($lfo_rate_sld)
	
	declare ui_button $lfo_1_btn
	declare ui_button $lfo_2_btn
	declare ui_button $lfo_3_btn
	declare ui_button $lfo_4_btn
	make_persistent($lfo_1_btn)
	make_persistent($lfo_2_btn)
	make_persistent($lfo_3_btn)
	make_persistent($lfo_4_btn)
	
	declare %lfo_type_btn_ids[4]
	%lfo_type_btn_ids[0] := get_ui_id($lfo_1_btn)
	%lfo_type_btn_ids[1] := get_ui_id($lfo_2_btn)
	%lfo_type_btn_ids[2] := get_ui_id($lfo_3_btn)
	%lfo_type_btn_ids[3] := get_ui_id($lfo_4_btn)
	
	$count := 0
	while ($count < num_elements(%lfo_type_btn_ids))
		
		set_control_par(%lfo_type_btn_ids[$count],$CONTROL_PAR_POS_X,540)
		set_control_par(%lfo_type_btn_ids[$count],$CONTROL_PAR_POS_Y,237+$count*17)
		
		set_control_par(%lfo_type_btn_ids[$count],$CONTROL_PAR_WIDTH,28)
		set_control_par(%lfo_type_btn_ids[$count],$CONTROL_PAR_HEIGHT,23)
		
		set_control_par_str(%lfo_type_btn_ids[$count],$CONTROL_PAR_TEXT,"")
		set_control_par_str(%lfo_type_btn_ids[$count],$CONTROL_PAR_PICTURE,"btn-small")
		
		inc($count)
	end while
	
	
	move_control_px($lfo_rate_sld,480,250)
	
	
{function } {}

{ function gui_synth_variations }
	
	declare ui_button $var_1_btn
	declare ui_button $var_2_btn
	declare ui_button $var_3_btn
	declare ui_button $var_4_btn
	declare ui_button $var_5_btn
	declare ui_button $var_6_btn
	declare ui_button $var_7_btn
	declare ui_button $var_8_btn
	
	make_persistent($var_1_btn)
	make_persistent($var_2_btn)
	make_persistent($var_3_btn)
	make_persistent($var_4_btn)
	make_persistent($var_5_btn)
	make_persistent($var_6_btn)
	make_persistent($var_7_btn)
	make_persistent($var_8_btn)
	
	declare %variation_btn_ids[$NUM_VARIATIONS]
	%variation_btn_ids[0] := get_ui_id($var_1_btn)
	%variation_btn_ids[1] := get_ui_id($var_2_btn)
	%variation_btn_ids[2] := get_ui_id($var_3_btn)
	%variation_btn_ids[3] := get_ui_id($var_4_btn)
	%variation_btn_ids[4] := get_ui_id($var_5_btn)
	%variation_btn_ids[5] := get_ui_id($var_6_btn)
	%variation_btn_ids[6] := get_ui_id($var_7_btn)
	%variation_btn_ids[7] := get_ui_id($var_8_btn)
	
	$count := 0
	while ($count < $NUM_VARIATIONS)
		
		set_control_par(%variation_btn_ids[$count],$CONTROL_PAR_WIDTH,34)
		set_control_par(%variation_btn_ids[$count],$CONTROL_PAR_HEIGHT,47)
		
		set_control_par(%variation_btn_ids[$count],$CONTROL_PAR_POS_X,198 + ($count*30))
		set_control_par(%variation_btn_ids[$count],$CONTROL_PAR_POS_Y,256)
		
		set_control_par_str(%variation_btn_ids[$count],$CONTROL_PAR_TEXT,"")
		set_control_par_str(%variation_btn_ids[$count],$CONTROL_PAR_PICTURE,"btn-soundvar-" & ($count + 1))
		
		inc($count)
	end while
	
	declare ui_slider $morph_sld (0,($NUM_VARIATIONS-1) * 100)
	make_persistent($morph_sld)
	set_control_par_str(get_ui_id($morph_sld),$CONTROL_PAR_PICTURE,"slider-morph")
	
	move_control_px($morph_sld,201,314)
	
{function } {}
	
{ function gui_synth_all }
	
	declare %synth_big_knob_ids[7]
	%synth_big_knob_ids[0] := get_ui_id($sound_sld)
	%synth_big_knob_ids[1] := get_ui_id($fat_sld)
	%synth_big_knob_ids[2] := get_ui_id($cutoff_sld)
	%synth_big_knob_ids[3] := get_ui_id($reso_sld)
	%synth_big_knob_ids[4] := get_ui_id($attack_sld)
	%synth_big_knob_ids[5] := get_ui_id($release_sld)
	%synth_big_knob_ids[6] := get_ui_id($lfo_rate_sld)
	
	$count := 0
	while ($count < num_elements(%synth_big_knob_ids))
		set_control_par_str(%synth_big_knob_ids[$count],$CONTROL_PAR_PICTURE,"knob-big")
		set_control_par(%synth_big_knob_ids[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,$MOUSE_BEHAVIOUR_KNOB)
		inc($count)
	end while
	
	
	declare %synth_red_knob_ids[8]
	%synth_red_knob_ids[0] := get_ui_id($lfo_pitch_sld)
	%synth_red_knob_ids[1] := get_ui_id($sample_start_sld)
	%synth_red_knob_ids[2] := get_ui_id($lfo_cutoff_sld)
	%synth_red_knob_ids[3] := get_ui_id($velo_cutoff_sld)
	%synth_red_knob_ids[4] := get_ui_id($env_cutoff_sld)
	%synth_red_knob_ids[5] := get_ui_id($flt_env_decay_sld)
	%synth_red_knob_ids[6] := get_ui_id($vel_vol_sld)
	%synth_red_knob_ids[7] := get_ui_id($gain_sld)
	
	$count := 0
	while ($count < num_elements(%synth_red_knob_ids))
		set_control_par_str(%synth_red_knob_ids[$count],$CONTROL_PAR_PICTURE,"knob-small-red")
		set_control_par(%synth_red_knob_ids[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,$MOUSE_BEHAVIOUR_KNOB)
		inc($count)
	end while
	
	declare %synth_grey_knob_ids[3]
	%synth_grey_knob_ids[0] := get_ui_id($glide_sld)
	%synth_grey_knob_ids[1] := get_ui_id($fx_1_sld)
	%synth_grey_knob_ids[2] := get_ui_id($fx_2_sld)
	
	$count := 0
	while ($count < num_elements(%synth_grey_knob_ids))
		set_control_par_str(%synth_grey_knob_ids[$count],$CONTROL_PAR_PICTURE,"knob-small-grey")
		set_control_par(%synth_grey_knob_ids[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,$MOUSE_BEHAVIOUR_KNOB)
		inc($count)
	end while
	
{function } {}

{****************** ARP GUI ******************}

{ function gui_arp_controls }
	
	
	declare ui_button $arp_onoff_btn2
	set_text ($arp_onoff_btn2,"")
	set_control_par(get_ui_id($arp_onoff_btn2),$CONTROL_PAR_WIDTH,52)
	set_control_par(get_ui_id($arp_onoff_btn2),$CONTROL_PAR_HEIGHT,23)
	
	declare ui_button $chord_onoff_btn2
	set_text ($chord_onoff_btn2,"")
	set_control_par(get_ui_id($chord_onoff_btn2),$CONTROL_PAR_WIDTH,52)
	set_control_par(get_ui_id($chord_onoff_btn2),$CONTROL_PAR_HEIGHT,23)
	
	move_control_px($arp_onoff_btn2,341,54)
	move_control_px($chord_onoff_btn2,323,269)
	
	set_control_par_str(get_ui_id($arp_onoff_btn2),$CONTROL_PAR_PICTURE,"btn-switch-blue")
	set_control_par_str(get_ui_id($chord_onoff_btn2),$CONTROL_PAR_PICTURE,"btn-switch-blue")
	
	declare ui_menu $note_order_menu
	add_menu_item($note_order_menu,"PLAYED",0)
	add_menu_item($note_order_menu,"UP",1)
	add_menu_item($note_order_menu,"DOWN",2)
	add_menu_item($note_order_menu,"UP/DOWN",3)
	add_menu_item($note_order_menu,"RANDOM",4)
	add_menu_item($note_order_menu,"CHORD",5)
	make_persistent($note_order_menu)
	set_control_par(get_ui_id($note_order_menu),$CONTROL_PAR_WIDTH,55)
	set_control_par(get_ui_id($note_order_menu),$CONTROL_PAR_HEIGHT,18)
	set_control_par(get_ui_id($note_order_menu),$CONTROL_PAR_FONT_TYPE,$FONT_ID1)
	set_control_par_str(get_ui_id($note_order_menu),$CONTROL_PAR_PICTURE,"menu-transparent")
	
	declare ui_switch $prev_note_order_menu_btn
	set_text ($prev_note_order_menu_btn,"")
	set_control_par(get_ui_id($prev_note_order_menu_btn),$CONTROL_PAR_WIDTH,20)
	set_control_par(get_ui_id($prev_note_order_menu_btn),$CONTROL_PAR_HEIGHT,24)
	set_control_par_str(get_ui_id($prev_note_order_menu_btn),$CONTROL_PAR_PICTURE,"btn-minus")
	
	declare ui_switch $next_note_order_menu_btn
	set_text ($next_note_order_menu_btn,"")
	set_control_par(get_ui_id($next_note_order_menu_btn),$CONTROL_PAR_WIDTH,20)
	set_control_par(get_ui_id($next_note_order_menu_btn),$CONTROL_PAR_HEIGHT,24)
	set_control_par_str(get_ui_id($next_note_order_menu_btn),$CONTROL_PAR_PICTURE,"btn-plus")
	
	declare ui_switch $tempo_double_btn
	set_text ($tempo_double_btn,"")
	set_control_par(get_ui_id($tempo_double_btn),$CONTROL_PAR_WIDTH,28)
	set_control_par(get_ui_id($tempo_double_btn),$CONTROL_PAR_HEIGHT,23)
	set_control_par_str(get_ui_id($tempo_double_btn),$CONTROL_PAR_PICTURE,"btn-small")
	make_persistent($tempo_double_btn)
	
	declare ui_switch $beat_grid_btn
	set_text($beat_grid_btn,"")
	$beat_grid_btn := 1
	make_persistent($beat_grid_btn)
	set_control_par_str(get_ui_id($beat_grid_btn),$CONTROL_PAR_PICTURE,"btn-12-16-2")
	set_control_par(get_ui_id($beat_grid_btn),$CONTROL_PAR_WIDTH,43)
	set_control_par(get_ui_id($beat_grid_btn),$CONTROL_PAR_HEIGHT,30)
	
	declare ui_button $clear_rhythm_btn
	set_text ($clear_rhythm_btn,"")
	set_control_par(get_ui_id($clear_rhythm_btn),$CONTROL_PAR_WIDTH,50)
	set_control_par(get_ui_id($clear_rhythm_btn),$CONTROL_PAR_HEIGHT,25)
	set_control_par_str(get_ui_id($clear_rhythm_btn),$CONTROL_PAR_PICTURE,"btn-clear")
	
	declare ui_button $init_rhythm_btn
	set_text ($init_rhythm_btn,"")
	set_control_par(get_ui_id($init_rhythm_btn),$CONTROL_PAR_WIDTH,50)
	set_control_par(get_ui_id($init_rhythm_btn),$CONTROL_PAR_HEIGHT,25)
	set_control_par_str(get_ui_id($init_rhythm_btn),$CONTROL_PAR_PICTURE,"btn-init")
	
	declare ui_button $clear_variation_btn
	set_text ($clear_variation_btn,"")
	set_control_par(get_ui_id($clear_variation_btn),$CONTROL_PAR_WIDTH,50)
	set_control_par(get_ui_id($clear_variation_btn),$CONTROL_PAR_HEIGHT,25)
	set_control_par_str(get_ui_id($clear_variation_btn),$CONTROL_PAR_PICTURE,"btn-clear")
	
	declare ui_menu $octave_menu
	add_menu_item($octave_menu,"   1",0)
	add_menu_item($octave_menu,"   2",1)
	add_menu_item($octave_menu,"   3",2)
	add_menu_item($octave_menu,"   4",3)
	make_persistent($octave_menu)
	set_control_par(get_ui_id($octave_menu),$CONTROL_PAR_WIDTH,36)
	set_control_par(get_ui_id($octave_menu),$CONTROL_PAR_HEIGHT,18)
	set_control_par(get_ui_id($octave_menu),$CONTROL_PAR_FONT_TYPE,$FONT_ID1)
	set_control_par_str(get_ui_id($octave_menu),$CONTROL_PAR_PICTURE,"menu-transparent")
	
	declare ui_switch $prev_octave_menu_btn
	set_text ($prev_octave_menu_btn,"")
	set_control_par(get_ui_id($prev_octave_menu_btn),$CONTROL_PAR_WIDTH,20)
	set_control_par(get_ui_id($prev_octave_menu_btn),$CONTROL_PAR_HEIGHT,24)
	set_control_par_str(get_ui_id($prev_octave_menu_btn),$CONTROL_PAR_PICTURE,"btn-minus")
	
	declare ui_switch $next_octave_menu_btn
	set_text ($next_octave_menu_btn,"")
	set_control_par(get_ui_id($next_octave_menu_btn),$CONTROL_PAR_WIDTH,20)
	set_control_par(get_ui_id($next_octave_menu_btn),$CONTROL_PAR_HEIGHT,24)
	set_control_par_str(get_ui_id($next_octave_menu_btn),$CONTROL_PAR_PICTURE,"btn-plus")
	
	declare ui_slider $duration_sld (5,105)
	set_control_par(get_ui_id($duration_sld),$CONTROL_PAR_MOUSE_BEHAVIOUR,$MOUSE_BEHAVIOUR_KNOB)
	set_control_par(get_ui_id($duration_sld),$CONTROL_PAR_DEFAULT_VALUE,55)
	set_control_par_str(get_ui_id($duration_sld),$CONTROL_PAR_PICTURE,"knob-small-blue")
	make_persistent ($duration_sld)
	
	declare ui_slider $swing_sld (0,50)
	set_control_par(get_ui_id($swing_sld),$CONTROL_PAR_MOUSE_BEHAVIOUR,$MOUSE_BEHAVIOUR_KNOB)
	set_control_par_str(get_ui_id($swing_sld),$CONTROL_PAR_PICTURE,"knob-small-blue")
	make_persistent ($swing_sld)
	
	move_control_px ($tempo_double_btn,173,112)
	
	move_control_px ($swing_sld,227,109)
	move_control_px ($duration_sld,293,109)
	
	move_control_px ($note_order_menu,357,113)
	move_control_px ($prev_note_order_menu_btn,408,112)
	move_control_px ($next_note_order_menu_btn,420,112)
	
	move_control_px ($octave_menu,464,113)
	move_control_px ($prev_octave_menu_btn,496,112)
	move_control_px ($next_octave_menu_btn,508,112)
	
	move_control_px ($init_rhythm_btn,536,$DEFAULT_POS_Y_ARP_RHYTHM + 5)
	move_control_px ($clear_rhythm_btn,536,$DEFAULT_POS_Y_ARP_RHYTHM + 30)
	move_control_px ($clear_variation_btn,536,$DEFAULT_POS_Y_ARP_VARIATION-1)
	move_control_px ($beat_grid_btn,107,109)
	
	
	
{function } {}

{ function gui_arp_lauflicht }
	
	declare ui_label $note_bg (1,1)
	
	set_control_par_str(get_ui_id($note_bg),$CONTROL_PAR_PICTURE,"arp-bg-12-16")
	set_control_par_str(get_ui_id($note_bg),$CONTROL_PAR_TEXT,"")
	move_control_px($note_bg,41,171)
	
	declare ui_label $lauflicht_0_lbl (1,1)
	declare ui_label $lauflicht_1_lbl (1,1)
	declare ui_label $lauflicht_2_lbl (1,1)
	declare ui_label $lauflicht_3_lbl (1,1)
	declare ui_label $lauflicht_4_lbl (1,1)
	declare ui_label $lauflicht_5_lbl (1,1)
	declare ui_label $lauflicht_6_lbl (1,1)
	declare ui_label $lauflicht_7_lbl (1,1)
	declare ui_label $lauflicht_8_lbl (1,1)
	declare ui_label $lauflicht_9_lbl (1,1)
	declare ui_label $lauflicht_10_lbl (1,1)
	declare ui_label $lauflicht_11_lbl (1,1)
	declare ui_label $lauflicht_12_lbl (1,1)
	declare ui_label $lauflicht_13_lbl (1,1)
	declare ui_label $lauflicht_14_lbl (1,1)
	declare ui_label $lauflicht_15_lbl (1,1)
	
	declare %lauflicht_lbl_ids[$MAX_NUM_OF_STEPS]
	%lauflicht_lbl_ids[0] :=  get_ui_id($lauflicht_0_lbl)
	%lauflicht_lbl_ids[1] :=  get_ui_id($lauflicht_1_lbl)
	%lauflicht_lbl_ids[2] :=  get_ui_id($lauflicht_2_lbl)
	%lauflicht_lbl_ids[3] :=  get_ui_id($lauflicht_3_lbl)
	%lauflicht_lbl_ids[4] :=  get_ui_id($lauflicht_4_lbl)
	%lauflicht_lbl_ids[5] :=  get_ui_id($lauflicht_5_lbl)
	%lauflicht_lbl_ids[6] :=  get_ui_id($lauflicht_6_lbl)
	%lauflicht_lbl_ids[7] :=  get_ui_id($lauflicht_7_lbl)
	%lauflicht_lbl_ids[8] :=  get_ui_id($lauflicht_8_lbl)
	%lauflicht_lbl_ids[9] :=  get_ui_id($lauflicht_9_lbl)
	%lauflicht_lbl_ids[10] := get_ui_id($lauflicht_10_lbl)
	%lauflicht_lbl_ids[11] := get_ui_id($lauflicht_11_lbl)
	%lauflicht_lbl_ids[12] := get_ui_id($lauflicht_12_lbl)
	%lauflicht_lbl_ids[13] := get_ui_id($lauflicht_13_lbl)
	%lauflicht_lbl_ids[14] := get_ui_id($lauflicht_14_lbl)
	%lauflicht_lbl_ids[15] := get_ui_id($lauflicht_15_lbl)
	
	declare %light_offset[28] := (...
	{12}	-2,-2,-2,	-2,-2,-2,	-2,-2,-2,	-2,-2,-2,	...
	{16}	-2,-2,-2,-2,	-2,-2,-2,-2,	-2,-2,-2,-2,	-2,-2,-2,-2)
	
	$count := 0
	while ($count < $MAX_NUM_OF_STEPS)
		
			set_control_par_str(%lauflicht_lbl_ids[$count],$CONTROL_PAR_PICTURE,"lamp-arpstep")
			{Width and Height}
			set_control_par_str(%lauflicht_lbl_ids[$count],$CONTROL_PAR_TEXT,"")
			{Position}
			set_control_par(%lauflicht_lbl_ids[$count],$CONTROL_PAR_POS_X,$DEFAULT_POS_X+(%DEFAULT_DIST_X[$beat_grid_btn]*$count)+%DEFAULT_X_OFFSET[$count + ($beat_grid_btn*12)] + %light_offset[$count + ($beat_grid_btn*12)])
			set_control_par(%lauflicht_lbl_ids[$count],$CONTROL_PAR_POS_Y,$DEFAULT_POS_Y_LAUFLICHT)
			
		
		inc($count)
	end while
	
	declare %lauflicht[$MAX_NUM_OF_STEPS]
	
{function } {}

{ function gui_arp_rhythm }
	
	declare ui_slider $arp_rhythm_0_sld (0,127)
	declare ui_slider $arp_rhythm_1_sld (0,127)
	declare ui_slider $arp_rhythm_2_sld (0,127)
	declare ui_slider $arp_rhythm_3_sld (0,127)
	declare ui_slider $arp_rhythm_4_sld (0,127)
	declare ui_slider $arp_rhythm_5_sld (0,127)
	declare ui_slider $arp_rhythm_6_sld (0,127)
	declare ui_slider $arp_rhythm_7_sld (0,127)
	declare ui_slider $arp_rhythm_8_sld (0,127)
	declare ui_slider $arp_rhythm_9_sld (0,127)
	declare ui_slider $arp_rhythm_10_sld (0,127)
	declare ui_slider $arp_rhythm_11_sld (0,127)
	declare ui_slider $arp_rhythm_12_sld (0,127)
	declare ui_slider $arp_rhythm_13_sld (0,127)
	declare ui_slider $arp_rhythm_14_sld (0,127)
	declare ui_slider $arp_rhythm_15_sld (0,127)

	declare %arp_rhythm_sld_ids[$MAX_NUM_OF_STEPS]
	%arp_rhythm_sld_ids[0] :=  get_ui_id($arp_rhythm_0_sld)
	%arp_rhythm_sld_ids[1] :=  get_ui_id($arp_rhythm_1_sld)
	%arp_rhythm_sld_ids[2] :=  get_ui_id($arp_rhythm_2_sld)
	%arp_rhythm_sld_ids[3] :=  get_ui_id($arp_rhythm_3_sld)
	%arp_rhythm_sld_ids[4] :=  get_ui_id($arp_rhythm_4_sld)
	%arp_rhythm_sld_ids[5] :=  get_ui_id($arp_rhythm_5_sld)
	%arp_rhythm_sld_ids[6] :=  get_ui_id($arp_rhythm_6_sld)
	%arp_rhythm_sld_ids[7] :=  get_ui_id($arp_rhythm_7_sld)
	%arp_rhythm_sld_ids[8] :=  get_ui_id($arp_rhythm_8_sld)
	%arp_rhythm_sld_ids[9] :=  get_ui_id($arp_rhythm_9_sld)
	%arp_rhythm_sld_ids[10] := get_ui_id($arp_rhythm_10_sld)
	%arp_rhythm_sld_ids[11] := get_ui_id($arp_rhythm_11_sld)
	%arp_rhythm_sld_ids[12] := get_ui_id($arp_rhythm_12_sld)
	%arp_rhythm_sld_ids[13] := get_ui_id($arp_rhythm_13_sld)
	%arp_rhythm_sld_ids[14] := get_ui_id($arp_rhythm_14_sld)
	%arp_rhythm_sld_ids[15] := get_ui_id($arp_rhythm_15_sld)
	
	
	$count := 0
	while ($count < $MAX_NUM_OF_STEPS)
			
			set_control_par_str(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_PICTURE,"slider-arp")
			
			set_control_par_str(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_HELP,"Rhythm Grid")
			
			set_control_par_str(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_AUTOMATION_NAME,"Vel Step " & $count+1)
			
			set_control_par(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-1000)
			
			if ($CREATE_AUTOMATION_ID = 1)
				set_control_par(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_AUTOMATION_ID,24+$count)
			end if
			
			{Width and Height}
			set_control_par_str(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_TEXT,"")
			{Position}
			set_control_par(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_POS_X,2 + $DEFAULT_POS_X+(%DEFAULT_DIST_X[$beat_grid_btn]*$count)+%DEFAULT_X_OFFSET[$count + ($beat_grid_btn*12)])
			set_control_par(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_POS_Y,$DEFAULT_POS_Y_ARP_RHYTHM)
		
		inc($count)
	end while
	
{function } {}
	
{ function gui_arp_variation }
	
	declare ui_slider $arp_variation_0_sld (0,8)
	declare ui_slider $arp_variation_1_sld (0,8)
	declare ui_slider $arp_variation_2_sld (0,8)
	declare ui_slider $arp_variation_3_sld (0,8)
	declare ui_slider $arp_variation_4_sld (0,8)
	declare ui_slider $arp_variation_5_sld (0,8)
	declare ui_slider $arp_variation_6_sld (0,8)
	declare ui_slider $arp_variation_7_sld (0,8)
	declare ui_slider $arp_variation_8_sld (0,8)
	declare ui_slider $arp_variation_9_sld (0,8)
	declare ui_slider $arp_variation_10_sld (0,8)
	declare ui_slider $arp_variation_11_sld (0,8)
	declare ui_slider $arp_variation_12_sld (0,8)
	declare ui_slider $arp_variation_13_sld (0,8)
	declare ui_slider $arp_variation_14_sld (0,8)
	declare ui_slider $arp_variation_15_sld (0,8)
	
	declare %arp_variation_sld_ids[$MAX_NUM_OF_STEPS]
	%arp_variation_sld_ids[0] :=  get_ui_id($arp_variation_0_sld)
	%arp_variation_sld_ids[1] :=  get_ui_id($arp_variation_1_sld)
	%arp_variation_sld_ids[2] :=  get_ui_id($arp_variation_2_sld)
	%arp_variation_sld_ids[3] :=  get_ui_id($arp_variation_3_sld)
	%arp_variation_sld_ids[4] :=  get_ui_id($arp_variation_4_sld)
	%arp_variation_sld_ids[5] :=  get_ui_id($arp_variation_5_sld)
	%arp_variation_sld_ids[6] :=  get_ui_id($arp_variation_6_sld)
	%arp_variation_sld_ids[7] :=  get_ui_id($arp_variation_7_sld)
	%arp_variation_sld_ids[8] :=  get_ui_id($arp_variation_8_sld)
	%arp_variation_sld_ids[9] :=  get_ui_id($arp_variation_9_sld)
	%arp_variation_sld_ids[10] := get_ui_id($arp_variation_10_sld)
	%arp_variation_sld_ids[11] := get_ui_id($arp_variation_11_sld)
	%arp_variation_sld_ids[12] := get_ui_id($arp_variation_12_sld)
	%arp_variation_sld_ids[13] := get_ui_id($arp_variation_13_sld)
	%arp_variation_sld_ids[14] := get_ui_id($arp_variation_14_sld)
	%arp_variation_sld_ids[15] := get_ui_id($arp_variation_15_sld)
	
	
	$count := 0
	while ($count < $MAX_NUM_OF_STEPS)
		
			set_control_par_str(%arp_variation_sld_ids[$count],$CONTROL_PAR_PICTURE,"slider-trans-sound")
			
			set_control_par_str(%arp_variation_sld_ids[$count],$CONTROL_PAR_HELP,"Variation Grid")
			
			set_control_par_str(%arp_variation_sld_ids[$count],$CONTROL_PAR_AUTOMATION_NAME,"Var Step " & $count+1)
			
			set_control_par(%arp_variation_sld_ids[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-200)
			
			
			if ($CREATE_AUTOMATION_ID = 1)
				set_control_par(%arp_variation_sld_ids[$count],$CONTROL_PAR_AUTOMATION_ID,40+$count)
			end if
			
			{Width and Height}
			set_control_par_str(%arp_variation_sld_ids[$count],$CONTROL_PAR_TEXT,"")
			{Position}
			set_control_par(%arp_variation_sld_ids[$count],$CONTROL_PAR_POS_X,$DEFAULT_POS_X+(%DEFAULT_DIST_X[$beat_grid_btn]*$count)+%DEFAULT_X_OFFSET[$count + ($beat_grid_btn*12)])
			set_control_par(%arp_variation_sld_ids[$count],$CONTROL_PAR_POS_Y,$DEFAULT_POS_Y_ARP_VARIATION)
		
		inc($count)
	end while
	
	declare ui_label $arp_variation_0_lbl (1,1)
	declare ui_label $arp_variation_1_lbl (1,1)
	declare ui_label $arp_variation_2_lbl (1,1)
	declare ui_label $arp_variation_3_lbl (1,1)
	declare ui_label $arp_variation_4_lbl (1,1)
	declare ui_label $arp_variation_5_lbl (1,1)
	declare ui_label $arp_variation_6_lbl (1,1)
	declare ui_label $arp_variation_7_lbl (1,1)
	declare ui_label $arp_variation_8_lbl (1,1)
	declare ui_label $arp_variation_9_lbl (1,1)
	declare ui_label $arp_variation_10_lbl (1,1)
	declare ui_label $arp_variation_11_lbl (1,1)
	declare ui_label $arp_variation_12_lbl (1,1)
	declare ui_label $arp_variation_13_lbl (1,1)
	declare ui_label $arp_variation_14_lbl (1,1)
	declare ui_label $arp_variation_15_lbl (1,1)
	
	declare %arp_variation_lbl_ids[$MAX_NUM_OF_STEPS]
	%arp_variation_lbl_ids[0] :=  get_ui_id($arp_variation_0_lbl)
	%arp_variation_lbl_ids[1] :=  get_ui_id($arp_variation_1_lbl)
	%arp_variation_lbl_ids[2] :=  get_ui_id($arp_variation_2_lbl)
	%arp_variation_lbl_ids[3] :=  get_ui_id($arp_variation_3_lbl)
	%arp_variation_lbl_ids[4] :=  get_ui_id($arp_variation_4_lbl)
	%arp_variation_lbl_ids[5] :=  get_ui_id($arp_variation_5_lbl)
	%arp_variation_lbl_ids[6] :=  get_ui_id($arp_variation_6_lbl)
	%arp_variation_lbl_ids[7] :=  get_ui_id($arp_variation_7_lbl)
	%arp_variation_lbl_ids[8] :=  get_ui_id($arp_variation_8_lbl)
	%arp_variation_lbl_ids[9] :=  get_ui_id($arp_variation_9_lbl)
	%arp_variation_lbl_ids[10] := get_ui_id($arp_variation_10_lbl)
	%arp_variation_lbl_ids[11] := get_ui_id($arp_variation_11_lbl)
	%arp_variation_lbl_ids[12] := get_ui_id($arp_variation_12_lbl)
	%arp_variation_lbl_ids[13] := get_ui_id($arp_variation_13_lbl)
	%arp_variation_lbl_ids[14] := get_ui_id($arp_variation_14_lbl)
	%arp_variation_lbl_ids[15] := get_ui_id($arp_variation_15_lbl)
	
	
	$count := 0
	while ($count < $MAX_NUM_OF_STEPS)
		
			set_control_par_str(%arp_variation_lbl_ids[$count],$CONTROL_PAR_PICTURE,"slider-trans-sound")
			set_control_par(%arp_variation_lbl_ids[$count],$CONTROL_PAR_TEXT_ALIGNMENT,1)
			set_control_par(%arp_variation_lbl_ids[$count],$CONTROL_PAR_FONT_TYPE,$FONT_ID1)
			
			{Width and Height}
			set_control_par(%arp_variation_lbl_ids[$count],$CONTROL_PAR_WIDTH,20)
			set_control_par(%arp_variation_lbl_ids[$count],$CONTROL_PAR_HEIGHT,16)
			set_control_par_str(%arp_variation_lbl_ids[$count],$CONTROL_PAR_TEXT,"0")
			{Position}
			set_control_par(%arp_variation_lbl_ids[$count],$CONTROL_PAR_POS_X,- 2 + $DEFAULT_POS_X+(%DEFAULT_DIST_X[$beat_grid_btn]*$count)+%DEFAULT_X_OFFSET[$count + ($beat_grid_btn*12)])
			set_control_par(%arp_variation_lbl_ids[$count],$CONTROL_PAR_POS_Y,$DEFAULT_POS_Y_ARP_VARIATION)
		
		inc($count)
	end while
	
{function } {}
	
{ function gui_arp_presets }
	
	declare ui_menu $arp_preset_menu
	declare ui_switch $arp_preset_next_btn
	declare ui_switch $arp_preset_prev_btn
	declare ui_button $arp_preset_save_btn
	declare ui_button $arp_preset_delete_btn
	declare ui_text_edit @arp_preset_name
	
	declare %arp_preset_control_id[6]
	%arp_preset_control_id[0] := get_ui_id($arp_preset_menu)
	%arp_preset_control_id[1] := get_ui_id($arp_preset_next_btn)
	%arp_preset_control_id[2] := get_ui_id($arp_preset_prev_btn)
	%arp_preset_control_id[3] := get_ui_id($arp_preset_save_btn)
	%arp_preset_control_id[4] := get_ui_id($arp_preset_delete_btn)
	%arp_preset_control_id[5] := get_ui_id(@arp_preset_name)
	
	make_persistent($arp_preset_menu)
	read_persistent_var($arp_preset_menu)
	
	set_text($arp_preset_next_btn,"")
	set_text($arp_preset_prev_btn,"")
	set_text($arp_preset_save_btn,"")
	set_text($arp_preset_delete_btn,"")
	
	set_control_par(%arp_preset_control_id[0],$CONTROL_PAR_TEXTPOS_Y,30)
	set_control_par_str(%arp_preset_control_id[0],$CONTROL_PAR_PICTURE,"menu-dropdown")
	set_control_par(%arp_preset_control_id[0],$CONTROL_PAR_WIDTH,65)
	set_control_par(%arp_preset_control_id[0],$CONTROL_PAR_HEIGHT,18)
	set_control_par(%arp_preset_control_id[5],$CONTROL_PAR_FONT_TYPE,$FONT_ID2)
	
	move_control_px($arp_preset_menu,233,75)
	move_control_px(@arp_preset_name,241,76)
	move_control_px($arp_preset_prev_btn,293,75)
	move_control_px($arp_preset_next_btn,305,75)
	move_control_px($arp_preset_save_btn,322,75)
	move_control_px($arp_preset_delete_btn,360,75)
	
	set_control_par(%arp_preset_control_id[1],$CONTROL_PAR_HEIGHT,24)
	set_control_par(%arp_preset_control_id[1],$CONTROL_PAR_WIDTH,20)
	set_control_par_str(%arp_preset_control_id[1],$CONTROL_PAR_PICTURE,"btn-plus")
	
	set_control_par(%arp_preset_control_id[2],$CONTROL_PAR_HEIGHT,24)
	set_control_par(%arp_preset_control_id[2],$CONTROL_PAR_WIDTH,20)
	set_control_par_str(%arp_preset_control_id[2],$CONTROL_PAR_PICTURE,"btn-minus")
	
	set_control_par(%arp_preset_control_id[3],$CONTROL_PAR_HEIGHT,20)
	set_control_par(%arp_preset_control_id[3],$CONTROL_PAR_WIDTH,40)
	set_control_par_str(%arp_preset_control_id[3],$CONTROL_PAR_PICTURE,"btn-save")
	
	set_control_par(%arp_preset_control_id[4],$CONTROL_PAR_HEIGHT,20)
	set_control_par(%arp_preset_control_id[4],$CONTROL_PAR_WIDTH,40)
	set_control_par_str(%arp_preset_control_id[4],$CONTROL_PAR_PICTURE,"btn-del")
	
	set_control_par(%arp_preset_control_id[5],$CONTROL_PAR_HEIGHT,18)
	set_control_par(%arp_preset_control_id[5],$CONTROL_PAR_WIDTH,43)

{function } {}

{****************** CHORD GUI ******************}

{ function gui_chord_controls }

	declare ui_label $chord_bg (1,1)
	set_text($chord_bg,"")
	set_control_par_str(get_ui_id($chord_bg),$CONTROL_PAR_PICTURE,"bg-chord")
	move_control_px($chord_bg,32,316)
	
	declare ui_menu $sel_note_menu
	add_menu_item($sel_note_menu,"     C",0)
	add_menu_item($sel_note_menu,"    Db",1)
	add_menu_item($sel_note_menu,"     D",2)
	add_menu_item($sel_note_menu,"    Eb",3)
	add_menu_item($sel_note_menu,"     E",4)
	add_menu_item($sel_note_menu,"     F",5)
	add_menu_item($sel_note_menu,"    Gb",6)
	add_menu_item($sel_note_menu,"     G",7)
	add_menu_item($sel_note_menu,"    Ab",8)
	add_menu_item($sel_note_menu,"     A",9)
	add_menu_item($sel_note_menu,"    Bb",10)
	add_menu_item($sel_note_menu,"     B",11)
	make_persistent($sel_note_menu)
	set_control_par(get_ui_id($sel_note_menu),$CONTROL_PAR_WIDTH,48)
	set_control_par(get_ui_id($sel_note_menu),$CONTROL_PAR_FONT_TYPE,$FONT_ID1)
	set_control_par_str(get_ui_id($sel_note_menu),$CONTROL_PAR_PICTURE,"menu-transparent")
	
	declare ui_button $prev_sel_note_menu_btn
	set_text ($prev_sel_note_menu_btn,"")
	set_control_par(get_ui_id($prev_sel_note_menu_btn),$CONTROL_PAR_WIDTH,20)
	set_control_par(get_ui_id($prev_sel_note_menu_btn),$CONTROL_PAR_HEIGHT,24)
	set_control_par_str(get_ui_id($prev_sel_note_menu_btn),$CONTROL_PAR_PICTURE,"btn-minus")
	
	declare ui_button $next_sel_note_menu_btn
	set_text ($next_sel_note_menu_btn,"")
	set_control_par(get_ui_id($next_sel_note_menu_btn),$CONTROL_PAR_WIDTH,20)
	set_control_par(get_ui_id($next_sel_note_menu_btn),$CONTROL_PAR_HEIGHT,24)
	set_control_par_str(get_ui_id($next_sel_note_menu_btn),$CONTROL_PAR_PICTURE,"btn-plus")
	
	move_control_px($sel_note_menu,$CHORD_POS_X+63,$CHORD_POS_Y+79)
	move_control_px($prev_sel_note_menu_btn,$CHORD_POS_X+107,$CHORD_POS_Y+78)
	move_control_px($next_sel_note_menu_btn,$CHORD_POS_X+119,$CHORD_POS_Y+78)
	
	{chord tone sliders and labels}
	
	declare ui_slider $note_1_sld (-12,12)
	make_persistent($note_1_sld)

	declare ui_slider $note_2_sld (-12,12)
	make_persistent($note_2_sld)
	
	declare ui_slider $note_3_sld (-12,12)
	make_persistent($note_3_sld)
	
	declare ui_slider $note_4_sld (-12,12)
	make_persistent($note_4_sld)
	
	declare ui_label $note_1_lbl (1,1)
	declare ui_label $note_2_lbl (1,1)
	declare ui_label $note_3_lbl (1,1)
	declare ui_label $note_4_lbl (1,1)
	
	declare ui_button $prev_note_1_btn
	declare ui_button $prev_note_2_btn
	declare ui_button $prev_note_3_btn
	declare ui_button $prev_note_4_btn
	
	declare ui_button $next_note_1_btn
	declare ui_button $next_note_2_btn
	declare ui_button $next_note_3_btn
	declare ui_button $next_note_4_btn
	
	declare %chord_tone_sld_ids[4]
	%chord_tone_sld_ids[0] := get_ui_id($note_1_sld)
	%chord_tone_sld_ids[1] := get_ui_id($note_2_sld)
	%chord_tone_sld_ids[2] := get_ui_id($note_3_sld)
	%chord_tone_sld_ids[3] := get_ui_id($note_4_sld)
	
	declare %chord_tone_lbl_ids[4]
	%chord_tone_lbl_ids[0] := get_ui_id($note_1_lbl)
	%chord_tone_lbl_ids[1] := get_ui_id($note_2_lbl)
	%chord_tone_lbl_ids[2] := get_ui_id($note_3_lbl)
	%chord_tone_lbl_ids[3] := get_ui_id($note_4_lbl)
	
	declare %prev_note_btn_ids[4]
	%prev_note_btn_ids[0] := get_ui_id($prev_note_1_btn)
	%prev_note_btn_ids[1] := get_ui_id($prev_note_2_btn)
	%prev_note_btn_ids[2] := get_ui_id($prev_note_3_btn)
	%prev_note_btn_ids[3] := get_ui_id($prev_note_4_btn)
	
	declare %next_note_btn_ids[4]
	%next_note_btn_ids[0] := get_ui_id($next_note_1_btn)
	%next_note_btn_ids[1] := get_ui_id($next_note_2_btn)
	%next_note_btn_ids[2] := get_ui_id($next_note_3_btn)
	%next_note_btn_ids[3] := get_ui_id($next_note_4_btn)
	
	
	$count := 0
	while ($count < 4)
		set_control_par_str(%chord_tone_sld_ids[$count],$CONTROL_PAR_PICTURE,"slider-trans-note")
		
		set_control_par(%chord_tone_sld_ids[$count],$CONTROL_PAR_VALUE,0)
		set_control_par(%chord_tone_sld_ids[$count],$CONTROL_PAR_DEFAULT_VALUE,0)
		set_control_par(%chord_tone_sld_ids[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-100)
		
		set_control_par(%chord_tone_sld_ids[$count],$CONTROL_PAR_POS_X,$CHORD_POS_X+155 + $count*85)
		set_control_par(%chord_tone_sld_ids[$count],$CONTROL_PAR_POS_Y,$CHORD_POS_Y+98)
		
		set_control_par(%chord_tone_lbl_ids[$count],$CONTROL_PAR_POS_X,$CHORD_POS_X+155 + $count*85)
		set_control_par(%chord_tone_lbl_ids[$count],$CONTROL_PAR_POS_Y,$CHORD_POS_Y+98)
		set_control_par(%chord_tone_lbl_ids[$count],$CONTROL_PAR_WIDTH,47)
		set_control_par(%chord_tone_lbl_ids[$count],$CONTROL_PAR_TEXT_ALIGNMENT,1)
		set_control_par(%chord_tone_lbl_ids[$count],$CONTROL_PAR_FONT_TYPE,$FONT_ID1)
		set_control_par_str(%chord_tone_lbl_ids[$count],$CONTROL_PAR_PICTURE,"menu-transparent")
		
		set_control_par_str(%chord_tone_lbl_ids[$count],$CONTROL_PAR_TEXT,"0")
		
		set_control_par_str(%prev_note_btn_ids[$count],$CONTROL_PAR_TEXT,"")
		set_control_par_str(%next_note_btn_ids[$count],$CONTROL_PAR_TEXT,"")
		set_control_par_str(%prev_note_btn_ids[$count],$CONTROL_PAR_PICTURE,"btn-minus")
		set_control_par_str(%next_note_btn_ids[$count],$CONTROL_PAR_PICTURE,"btn-plus")
		
		set_control_par(%prev_note_btn_ids[$count],$CONTROL_PAR_POS_X,$CHORD_POS_X+197 + $count*85)
		set_control_par(%prev_note_btn_ids[$count],$CONTROL_PAR_POS_Y,$CHORD_POS_Y+97)
		
		set_control_par(%prev_note_btn_ids[$count],$CONTROL_PAR_WIDTH,20)
		set_control_par(%prev_note_btn_ids[$count],$CONTROL_PAR_HEIGHT,24)
		
		set_control_par(%next_note_btn_ids[$count],$CONTROL_PAR_POS_X,get_control_par(%prev_note_btn_ids[$count],$CONTROL_PAR_POS_X) + 12)
		set_control_par(%next_note_btn_ids[$count],$CONTROL_PAR_POS_Y,get_control_par(%prev_note_btn_ids[$count],$CONTROL_PAR_POS_Y))
		
		set_control_par(%next_note_btn_ids[$count],$CONTROL_PAR_WIDTH,20)
		set_control_par(%next_note_btn_ids[$count],$CONTROL_PAR_HEIGHT,24)
		
		inc($count)
	end while
	
	declare ui_switch $note_1_btn
	set_text ($note_1_btn,"")
	make_persistent($note_1_btn)
	
	declare ui_switch $note_2_btn
	set_text ($note_2_btn,"")
	make_persistent($note_2_btn)
	
	declare ui_switch $note_3_btn
	set_text ($note_3_btn,"")
	make_persistent($note_3_btn)
	
	declare ui_switch $note_4_btn
	set_text ($note_4_btn,"")
	make_persistent($note_4_btn)
	
	move_control_px($note_1_btn,$CHORD_POS_X+153,$CHORD_POS_Y+73)
	move_control_px($note_2_btn,$CHORD_POS_X+153+85,$CHORD_POS_Y+73)
	move_control_px($note_3_btn,$CHORD_POS_X+153+(85*2),$CHORD_POS_Y+73)
	move_control_px($note_4_btn,$CHORD_POS_X+153+(85*3),$CHORD_POS_Y+73)
	
	set_control_par_str(get_ui_id($note_1_btn),$CONTROL_PAR_PICTURE,"btn-chord-1")
	set_control_par_str(get_ui_id($note_2_btn),$CONTROL_PAR_PICTURE,"btn-chord-2")
	set_control_par_str(get_ui_id($note_3_btn),$CONTROL_PAR_PICTURE,"btn-chord-3")
	set_control_par_str(get_ui_id($note_4_btn),$CONTROL_PAR_PICTURE,"btn-chord-4")
	
	set_control_par(get_ui_id($note_1_btn),$CONTROL_PAR_HEIGHT,24)
	set_control_par(get_ui_id($note_2_btn),$CONTROL_PAR_HEIGHT,24)
	set_control_par(get_ui_id($note_3_btn),$CONTROL_PAR_HEIGHT,24)
	set_control_par(get_ui_id($note_4_btn),$CONTROL_PAR_HEIGHT,24)
	
	set_control_par(get_ui_id($note_1_btn),$CONTROL_PAR_WIDTH,78)
	set_control_par(get_ui_id($note_2_btn),$CONTROL_PAR_WIDTH,78)
	set_control_par(get_ui_id($note_3_btn),$CONTROL_PAR_WIDTH,78)
	set_control_par(get_ui_id($note_4_btn),$CONTROL_PAR_WIDTH,78)
	
	declare ui_menu $transpose_menu
	$count := 0
	while ($count < 12)
		add_menu_item($transpose_menu,!note_class[$count] & " (+" & $count & ")",$count)
		inc($count)
	end while
	make_persistent($transpose_menu)
	set_control_par(get_ui_id($transpose_menu),$CONTROL_PAR_WIDTH,46)
	set_control_par(get_ui_id($transpose_menu),$CONTROL_PAR_HEIGHT,20)
	set_control_par(get_ui_id($transpose_menu),$CONTROL_PAR_FONT_TYPE,$FONT_ID1)
	set_control_par_str(get_ui_id($transpose_menu),$CONTROL_PAR_PICTURE,"menu-transparent")
	
	declare ui_switch $prev_transpose_menu_btn
	set_text ($prev_transpose_menu_btn,"")
	set_control_par(get_ui_id($prev_transpose_menu_btn),$CONTROL_PAR_WIDTH,20)
	set_control_par(get_ui_id($prev_transpose_menu_btn),$CONTROL_PAR_HEIGHT,24)
	set_control_par_str(get_ui_id($prev_transpose_menu_btn),$CONTROL_PAR_PICTURE,"btn-minus")
	
	move_control_px($transpose_menu,$CHORD_POS_X+500,$CHORD_POS_Y+79)
	move_control_px($prev_transpose_menu_btn,$CHORD_POS_X+542,$CHORD_POS_Y+78)
	
	declare ui_switch $next_transpose_menu_btn
	set_text ($next_transpose_menu_btn,"")
	set_control_par(get_ui_id($next_transpose_menu_btn),$CONTROL_PAR_WIDTH,20)
	set_control_par(get_ui_id($next_transpose_menu_btn),$CONTROL_PAR_HEIGHT,24)
	set_control_par(get_ui_id($next_transpose_menu_btn),$CONTROL_PAR_POS_X,get_control_par(get_ui_id($prev_transpose_menu_btn),$CONTROL_PAR_POS_X)+12)
	set_control_par(get_ui_id($next_transpose_menu_btn),$CONTROL_PAR_POS_Y,get_control_par(get_ui_id($prev_transpose_menu_btn),$CONTROL_PAR_POS_Y))
	set_control_par_str(get_ui_id($next_transpose_menu_btn),$CONTROL_PAR_PICTURE,"btn-plus")
	
	declare ui_switch $fixed_chord_btn
	set_text($fixed_chord_btn,"")
	make_persistent($fixed_chord_btn)
	set_control_par_str(get_ui_id($fixed_chord_btn),$CONTROL_PAR_PICTURE,"btn-small")
	set_control_par(get_ui_id($fixed_chord_btn),$CONTROL_PAR_HEIGHT,20)
	set_control_par(get_ui_id($fixed_chord_btn),$CONTROL_PAR_WIDTH,24)
	
	move_control_px($fixed_chord_btn,$CHORD_POS_X+57,$CHORD_POS_Y+40)
	
{function } {}

{ function gui_chord_presets }
	
	declare ui_menu $harm_preset_menu
	declare ui_switch $harm_preset_next_btn
	declare ui_switch $harm_preset_prev_btn
	declare ui_button $harm_preset_save_btn
	declare ui_button $harm_preset_delete_btn
	declare ui_text_edit @harm_preset_name
	
	declare %harm_preset_control_id[6]
	%harm_preset_control_id[0] := get_ui_id($harm_preset_menu)
	%harm_preset_control_id[1] := get_ui_id($harm_preset_next_btn)
	%harm_preset_control_id[2] := get_ui_id($harm_preset_prev_btn)
	%harm_preset_control_id[3] := get_ui_id($harm_preset_save_btn)
	%harm_preset_control_id[4] := get_ui_id($harm_preset_delete_btn)
	%harm_preset_control_id[5] := get_ui_id(@harm_preset_name)
	
	make_persistent($harm_preset_menu)
	read_persistent_var($harm_preset_menu)
	
	set_text($harm_preset_next_btn,"")
	set_text($harm_preset_prev_btn,"")
	set_text($harm_preset_save_btn,"")
	set_text($harm_preset_delete_btn,"")
	
	set_control_par_str(%harm_preset_control_id[0],$CONTROL_PAR_PICTURE,"menu-dropdown")
	set_control_par_str(%harm_preset_control_id[1],$CONTROL_PAR_PICTURE,"btn-plus")
	set_control_par_str(%harm_preset_control_id[2],$CONTROL_PAR_PICTURE,"btn-minus")
	set_control_par_str(%harm_preset_control_id[3],$CONTROL_PAR_PICTURE,"btn-save")
	set_control_par_str(%harm_preset_control_id[4],$CONTROL_PAR_PICTURE,"btn-del")
	
	set_control_par(%harm_preset_control_id[0],$CONTROL_PAR_TEXTPOS_Y,30)
	set_control_par(%harm_preset_control_id[5],$CONTROL_PAR_FONT_TYPE,$FONT_ID2)
	
	move_control_px($harm_preset_menu,236,$CHORD_POS_Y + 40)
	move_control_px(@harm_preset_name,236+5,$CHORD_POS_Y + 41)
	move_control_px($harm_preset_prev_btn,293,$CHORD_POS_Y + 40)
	move_control_px($harm_preset_save_btn,322,$CHORD_POS_Y + 40)
	move_control_px($harm_preset_delete_btn,360,$CHORD_POS_Y + 40)
	
	set_control_par(%harm_preset_control_id[1],$CONTROL_PAR_HEIGHT,24)
	set_control_par(%harm_preset_control_id[1],$CONTROL_PAR_WIDTH,21)
	set_control_par(%harm_preset_control_id[1],$CONTROL_PAR_POS_X,get_control_par(%harm_preset_control_id[2],$CONTROL_PAR_POS_X)+12)
	set_control_par(%harm_preset_control_id[1],$CONTROL_PAR_POS_Y,get_control_par(%harm_preset_control_id[2],$CONTROL_PAR_POS_Y))
	
	set_control_par(%harm_preset_control_id[2],$CONTROL_PAR_HEIGHT,24)
	set_control_par(%harm_preset_control_id[2],$CONTROL_PAR_WIDTH,21)
	
	set_control_par(%harm_preset_control_id[3],$CONTROL_PAR_HEIGHT,24)
	set_control_par(%harm_preset_control_id[3],$CONTROL_PAR_WIDTH,45)
	
	set_control_par(%harm_preset_control_id[4],$CONTROL_PAR_HEIGHT,24)
	set_control_par(%harm_preset_control_id[4],$CONTROL_PAR_WIDTH,45)
	
	set_control_par(%harm_preset_control_id[0],$CONTROL_PAR_HEIGHT,19)
	set_control_par(%harm_preset_control_id[0],$CONTROL_PAR_WIDTH,61)
	set_control_par(%harm_preset_control_id[5],$CONTROL_PAR_HEIGHT,18)
	set_control_par(%harm_preset_control_id[5],$CONTROL_PAR_WIDTH,43)

{function } {}


{****************** SETTINGS GUI + ALL ******************}

{ function gui_settings }
	
	declare ui_button $global_recall_btn
	set_text($global_recall_btn,"")
	make_instr_persistent($global_recall_btn)
	
	$global_recall_btn := 1
	
	declare ui_button $preset_recall_btn
	set_text($preset_recall_btn,"")
	make_instr_persistent($preset_recall_btn)
	
	set_control_par_str(get_ui_id($global_recall_btn),$CONTROL_PAR_PICTURE,"btn-small")
	set_control_par_str(get_ui_id($preset_recall_btn),$CONTROL_PAR_PICTURE,"btn-small")
	set_control_par(get_ui_id($global_recall_btn),$CONTROL_PAR_WIDTH,24)
	set_control_par(get_ui_id($preset_recall_btn),$CONTROL_PAR_WIDTH,24)
	set_control_par(get_ui_id($global_recall_btn),$CONTROL_PAR_HEIGHT,20)
	set_control_par(get_ui_id($preset_recall_btn),$CONTROL_PAR_HEIGHT,20)
	
	move_control_px ($preset_recall_btn,336,344)
	move_control_px ($global_recall_btn,336,329)
	
	declare ui_menu $modwheel_menu
	add_menu_item ($modwheel_menu,"Mod Amount",0)
	add_menu_item ($modwheel_menu,"Switch Variations",1)
	add_menu_item ($modwheel_menu,"Morph Slider",2)
	set_control_par(get_ui_id($modwheel_menu),$CONTROL_PAR_WIDTH,121)
	set_control_par(get_ui_id($modwheel_menu),$CONTROL_PAR_FONT_TYPE,$FONT_ID1)
	set_control_par(get_ui_id($modwheel_menu),$CONTROL_PAR_TEXTPOS_Y,1)
	set_control_par_str(get_ui_id($modwheel_menu),$CONTROL_PAR_PICTURE,"btn-menu")
	
	declare ui_menu $aftertouch_menu
	add_menu_item ($aftertouch_menu,"Mod Amount",0)
	add_menu_item ($aftertouch_menu,"Tune",1)
	set_control_par(get_ui_id($aftertouch_menu),$CONTROL_PAR_WIDTH,121)
	set_control_par(get_ui_id($aftertouch_menu),$CONTROL_PAR_FONT_TYPE,$FONT_ID1)
	set_control_par(get_ui_id($aftertouch_menu),$CONTROL_PAR_TEXTPOS_Y,1)
	set_control_par_str(get_ui_id($aftertouch_menu),$CONTROL_PAR_PICTURE,"btn-menu")
	
	declare ui_menu $pbend_menu
	add_menu_item ($pbend_menu,"Pitch Bend",0)
	add_menu_item ($pbend_menu,"Morph Slider (Full)",1)
	add_menu_item ($pbend_menu,"Morph Slider (Next)",2)
	set_control_par(get_ui_id($pbend_menu),$CONTROL_PAR_WIDTH,121)
	set_control_par(get_ui_id($pbend_menu),$CONTROL_PAR_FONT_TYPE,$FONT_ID1)
	set_control_par(get_ui_id($pbend_menu),$CONTROL_PAR_TEXTPOS_Y,1)
	set_control_par_str(get_ui_id($pbend_menu),$CONTROL_PAR_PICTURE,"btn-menu")
	
	declare ui_slider $pbend_down_sld (-120,120)
	set_control_par (get_ui_id($pbend_down_sld),$CONTROL_PAR_DEFAULT_VALUE,-50)
	set_control_par_str(get_ui_id($pbend_down_sld),$CONTROL_PAR_PICTURE,"knob-small-green")
	set_control_par(get_ui_id($pbend_down_sld),$CONTROL_PAR_MOUSE_BEHAVIOUR,$MOUSE_BEHAVIOUR_KNOB)
	$pbend_down_sld := -50
	
	declare ui_slider $pbend_up_sld (-120,120)
	set_control_par (get_ui_id($pbend_up_sld),$CONTROL_PAR_DEFAULT_VALUE,50)
	set_control_par_str(get_ui_id($pbend_up_sld),$CONTROL_PAR_PICTURE,"knob-small-green")
	set_control_par(get_ui_id($pbend_up_sld),$CONTROL_PAR_MOUSE_BEHAVIOUR,$MOUSE_BEHAVIOUR_KNOB)
	$pbend_up_sld := 50
	
	move_control_px ($modwheel_menu,307,107)
	move_control_px ($aftertouch_menu,307,141)
	move_control_px ($pbend_menu,307,175)
	
	move_control_px ($pbend_down_sld,310,217)
	move_control_px ($pbend_up_sld,357,217)
	
{function } {}

{ function gui_all }

	declare const $NUM_CONTROLS_PAGE_1 := 43
	declare const $NUM_CONTROLS_PAGE_2 := 120
	declare const $NUM_CONTROLS_PAGE_3 := 7
	
	declare %page_1_ids[$NUM_CONTROLS_PAGE_1]
	declare %page_2_ids[$NUM_CONTROLS_PAGE_2]
	declare %page_3_ids[$NUM_CONTROLS_PAGE_3]
	
	%page_1_ids[0] := get_ui_id($sound_sld)
	%page_1_ids[1] := get_ui_id($fat_sld)
	%page_1_ids[2] := get_ui_id($lfo_pitch_sld)
	%page_1_ids[3] := get_ui_id($sample_start_sld)
	%page_1_ids[4] := get_ui_id($glide_sld)
	%page_1_ids[5] := get_ui_id($solo_btn)
	%page_1_ids[6] := get_ui_id($legato_btn)
	%page_1_ids[7] := get_ui_id($fx_1_sld)
	%page_1_ids[8] := get_ui_id($fx_2_sld)
	%page_1_ids[9] := get_ui_id($cutoff_sld)
	%page_1_ids[10] := get_ui_id($reso_sld)
	%page_1_ids[11] := get_ui_id($lfo_cutoff_sld)
	%page_1_ids[12] := get_ui_id($velo_cutoff_sld)
	%page_1_ids[13] := get_ui_id($env_cutoff_sld)
	%page_1_ids[14] := get_ui_id($flt_env_decay_sld)
	%page_1_ids[15] := get_ui_id($flt_1_btn)
	%page_1_ids[16] := get_ui_id($flt_2_btn)
	%page_1_ids[17] := get_ui_id($flt_3_btn)
	%page_1_ids[18] := get_ui_id($flt_4_btn)
	%page_1_ids[19] := get_ui_id($flt_onoff_btn)
	%page_1_ids[20] := get_ui_id($attack_sld)
	%page_1_ids[21] := get_ui_id($release_sld)
	%page_1_ids[22] := get_ui_id($vel_vol_sld)
	%page_1_ids[23] := get_ui_id($gain_sld)
	%page_1_ids[24] := get_ui_id($env_btn)
	%page_1_ids[25] := get_ui_id($lfo_rate_sld)
	%page_1_ids[26] := get_ui_id($lfo_1_btn)
	%page_1_ids[27] := get_ui_id($lfo_2_btn)
	%page_1_ids[28] := get_ui_id($lfo_3_btn)
	%page_1_ids[29] := get_ui_id($lfo_4_btn)
	%page_1_ids[30] := get_ui_id($var_1_btn)
	%page_1_ids[31] := get_ui_id($var_2_btn)
	%page_1_ids[32] := get_ui_id($var_3_btn)
	%page_1_ids[33] := get_ui_id($var_4_btn)
	%page_1_ids[34] := get_ui_id($var_5_btn)
	%page_1_ids[35] := get_ui_id($var_6_btn)
	%page_1_ids[36] := get_ui_id($var_7_btn)
	%page_1_ids[37] := get_ui_id($var_8_btn)
	%page_1_ids[38] := get_ui_id($morph_sld)
	%page_1_ids[39] := get_ui_id($glide_btn)
	%page_1_ids[40] := get_ui_id($arp_onoff_btn)
	%page_1_ids[41] := get_ui_id($chord_onoff_btn)
	%page_1_ids[42] := get_ui_id($fx_2_lbl)
	
	
	
	%page_2_ids[0] := get_ui_id($tempo_double_btn)
	%page_2_ids[1] := get_ui_id($swing_sld)
	%page_2_ids[2] := get_ui_id($duration_sld)
	%page_2_ids[3] := get_ui_id($note_order_menu)
	%page_2_ids[4] := get_ui_id($prev_note_order_menu_btn)
	%page_2_ids[5] := get_ui_id($next_note_order_menu_btn)
	%page_2_ids[6] := get_ui_id($octave_menu)
	%page_2_ids[7] := get_ui_id($prev_octave_menu_btn)
	%page_2_ids[8] := get_ui_id($next_octave_menu_btn)
	%page_2_ids[9] := get_ui_id($init_rhythm_btn)
	%page_2_ids[10] := get_ui_id($clear_rhythm_btn)
	%page_2_ids[11] := get_ui_id($clear_variation_btn)
	%page_2_ids[12] := get_ui_id($beat_grid_btn)
	%page_2_ids[13] := get_ui_id($note_bg)
	%page_2_ids[14] := get_ui_id($lauflicht_0_lbl)
	%page_2_ids[15] := get_ui_id($lauflicht_1_lbl)
	%page_2_ids[16] := get_ui_id($lauflicht_2_lbl)
	%page_2_ids[17] := get_ui_id($lauflicht_3_lbl)
	%page_2_ids[18] := get_ui_id($lauflicht_4_lbl)
	%page_2_ids[19] := get_ui_id($lauflicht_5_lbl)
	%page_2_ids[20] := get_ui_id($lauflicht_6_lbl)
	%page_2_ids[21] := get_ui_id($lauflicht_7_lbl)
	%page_2_ids[22] := get_ui_id($lauflicht_8_lbl)
	%page_2_ids[23] := get_ui_id($lauflicht_9_lbl)
	%page_2_ids[24] := get_ui_id($lauflicht_10_lbl)
	%page_2_ids[25] := get_ui_id($lauflicht_11_lbl)
	%page_2_ids[26] := get_ui_id($lauflicht_12_lbl)
	%page_2_ids[27] := get_ui_id($lauflicht_13_lbl)
	%page_2_ids[28] := get_ui_id($lauflicht_14_lbl)
	%page_2_ids[29] := get_ui_id($lauflicht_15_lbl)
	%page_2_ids[30] := get_ui_id($arp_rhythm_0_sld)
	%page_2_ids[31] := get_ui_id($arp_rhythm_1_sld)
	%page_2_ids[32] := get_ui_id($arp_rhythm_2_sld)
	%page_2_ids[33] := get_ui_id($arp_rhythm_3_sld)
	%page_2_ids[34] := get_ui_id($arp_rhythm_4_sld)
	%page_2_ids[35] := get_ui_id($arp_rhythm_5_sld)
	%page_2_ids[36] := get_ui_id($arp_rhythm_6_sld)
	%page_2_ids[37] := get_ui_id($arp_rhythm_7_sld)
	%page_2_ids[38] := get_ui_id($arp_rhythm_8_sld)
	%page_2_ids[39] := get_ui_id($arp_rhythm_9_sld)
	%page_2_ids[40] := get_ui_id($arp_rhythm_10_sld)
	%page_2_ids[41] := get_ui_id($arp_rhythm_11_sld)
	%page_2_ids[42] := get_ui_id($arp_rhythm_12_sld)
	%page_2_ids[43] := get_ui_id($arp_rhythm_13_sld)
	%page_2_ids[44] := get_ui_id($arp_rhythm_14_sld)
	%page_2_ids[45] := get_ui_id($arp_rhythm_15_sld)
	%page_2_ids[46] := get_ui_id($arp_variation_0_sld) 
	%page_2_ids[47] := get_ui_id($arp_variation_1_sld)
	%page_2_ids[48] := get_ui_id($arp_variation_2_sld)
	%page_2_ids[49] := get_ui_id($arp_variation_3_sld)
	%page_2_ids[50] := get_ui_id($arp_variation_4_sld)
	%page_2_ids[51] := get_ui_id($arp_variation_5_sld)
	%page_2_ids[52] := get_ui_id($arp_variation_6_sld)
	%page_2_ids[53] := get_ui_id($arp_variation_7_sld)
	%page_2_ids[54] := get_ui_id($arp_variation_8_sld)
	%page_2_ids[55] := get_ui_id($arp_variation_9_sld)
	%page_2_ids[56] := get_ui_id($arp_variation_10_sld)
	%page_2_ids[57] := get_ui_id($arp_variation_11_sld)
	%page_2_ids[58] := get_ui_id($arp_variation_12_sld)
	%page_2_ids[59] := get_ui_id($arp_variation_13_sld)
	%page_2_ids[60] := get_ui_id($arp_variation_14_sld)
	%page_2_ids[61] := get_ui_id($arp_variation_15_sld)
	%page_2_ids[62] := get_ui_id($arp_preset_menu)
	%page_2_ids[63] := get_ui_id($arp_preset_next_btn)
	%page_2_ids[64] := get_ui_id($arp_preset_prev_btn)
	%page_2_ids[65] := get_ui_id($arp_preset_save_btn)
	%page_2_ids[66] := get_ui_id($arp_preset_delete_btn)
	%page_2_ids[67] := get_ui_id(@arp_preset_name)
	%page_2_ids[68] := get_ui_id($sel_note_menu)
	%page_2_ids[69] := get_ui_id($prev_sel_note_menu_btn)
	%page_2_ids[70] := get_ui_id($next_sel_note_menu_btn)
	%page_2_ids[71] := get_ui_id($note_1_sld)
	%page_2_ids[72] := get_ui_id($note_2_sld)
	%page_2_ids[73] := get_ui_id($note_3_sld)
	%page_2_ids[74] := get_ui_id($note_4_sld)
	%page_2_ids[75] := get_ui_id($note_1_lbl)
	%page_2_ids[76] := get_ui_id($note_2_lbl)
	%page_2_ids[77] := get_ui_id($note_3_lbl)
	%page_2_ids[78] := get_ui_id($note_4_lbl)
	%page_2_ids[79] := get_ui_id($prev_note_1_btn)
	%page_2_ids[80] := get_ui_id($prev_note_2_btn)
	%page_2_ids[81] := get_ui_id($prev_note_3_btn)
	%page_2_ids[82] := get_ui_id($prev_note_4_btn)
	%page_2_ids[83] := get_ui_id($next_note_1_btn)
	%page_2_ids[84] := get_ui_id($next_note_2_btn)
	%page_2_ids[85] := get_ui_id($next_note_3_btn)
	%page_2_ids[86] := get_ui_id($next_note_4_btn)
	%page_2_ids[87] := get_ui_id($note_1_btn)
	%page_2_ids[88] := get_ui_id($note_2_btn)
	%page_2_ids[89] := get_ui_id($note_3_btn)
	%page_2_ids[90] := get_ui_id($note_4_btn)
	%page_2_ids[91] := get_ui_id($transpose_menu)
	%page_2_ids[92] := get_ui_id($prev_transpose_menu_btn)
	%page_2_ids[93] := get_ui_id($next_transpose_menu_btn)
	%page_2_ids[94] := get_ui_id($fixed_chord_btn)
	%page_2_ids[95] := get_ui_id($harm_preset_menu)
	%page_2_ids[96] := get_ui_id($harm_preset_next_btn)
	%page_2_ids[97] := get_ui_id($harm_preset_prev_btn)
	%page_2_ids[98] := get_ui_id($harm_preset_save_btn)
	%page_2_ids[99] := get_ui_id($harm_preset_delete_btn)
	%page_2_ids[100] := get_ui_id(@harm_preset_name)
	%page_2_ids[101] := get_ui_id($arp_variation_0_lbl) 
	%page_2_ids[102] := get_ui_id($arp_variation_1_lbl)
	%page_2_ids[103] := get_ui_id($arp_variation_2_lbl)
	%page_2_ids[104] := get_ui_id($arp_variation_3_lbl)
	%page_2_ids[105] := get_ui_id($arp_variation_4_lbl)
	%page_2_ids[106] := get_ui_id($arp_variation_5_lbl)
	%page_2_ids[107] := get_ui_id($arp_variation_6_lbl)
	%page_2_ids[108] := get_ui_id($arp_variation_7_lbl)
	%page_2_ids[109] := get_ui_id($arp_variation_8_lbl)
	%page_2_ids[110] := get_ui_id($arp_variation_9_lbl)
	%page_2_ids[111] := get_ui_id($arp_variation_10_lbl)
	%page_2_ids[112] := get_ui_id($arp_variation_11_lbl)
	%page_2_ids[113] := get_ui_id($arp_variation_12_lbl)
	%page_2_ids[114] := get_ui_id($arp_variation_13_lbl)
	%page_2_ids[115] := get_ui_id($arp_variation_14_lbl)
	%page_2_ids[116] := get_ui_id($arp_variation_15_lbl)
	%page_2_ids[117] := get_ui_id($chord_bg)
	%page_2_ids[118] := get_ui_id($arp_onoff_btn2)
	%page_2_ids[119] := get_ui_id($chord_onoff_btn2)
	
	%page_3_ids[0] := get_ui_id($pbend_menu)
	%page_3_ids[1] := get_ui_id($pbend_down_sld)
	%page_3_ids[2] := get_ui_id($pbend_up_sld)
	%page_3_ids[3] := get_ui_id($modwheel_menu)
	%page_3_ids[4] := get_ui_id($aftertouch_menu)
	%page_3_ids[5] := get_ui_id($global_recall_btn)
	%page_3_ids[6] := get_ui_id($preset_recall_btn)
	
	{hide page 2}
	$count := 0
	while ($count < num_elements(%page_2_ids))
		set_control_par(%page_2_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($count)
	end while
	
	{hide page 3}
	$count := 0
	while ($count < num_elements(%page_3_ids))
		set_control_par(%page_3_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($count)
	end while
	
	
{function } {}


{****************** DATA ******************}

{ function synth_data }
	
	declare %presets[$NUM_VARIATIONS * $NUM_PARAMETER]
	make_persistent(%presets)
	
	declare %lfo_type_engine_par[4]
	%lfo_type_engine_par[0] := $ENGINE_PAR_LFO_TRI
	%lfo_type_engine_par[1] := $ENGINE_PAR_LFO_RECT
	%lfo_type_engine_par[2] := $ENGINE_PAR_LFO_SAW
	%lfo_type_engine_par[3] := $ENGINE_PAR_LFO_RAND
	
{function } {}
	
{ function arp_data }
	
	declare %arp_rhythm[$MAX_NUM_OF_STEPS]
	make_persistent(%arp_rhythm)
	
	declare %arp_variation[$MAX_NUM_OF_STEPS]
	make_persistent(%arp_variation)

{function } {}
	
{ function chord_data }
	
	declare %note_1_data[12]
	declare %note_2_data[12]
	declare %note_3_data[12]
	declare %note_4_data[12]
	make_persistent(%note_1_data)
	make_persistent(%note_2_data)
	make_persistent(%note_3_data)
	make_persistent(%note_4_data)
	
	declare %note_1_state[12]
	declare %note_2_state[12]
	declare %note_3_state[12]
	declare %note_4_state[12]
	make_persistent(%note_1_state)
	make_persistent(%note_2_state)
	make_persistent(%note_3_state)
	make_persistent(%note_4_state)
	
	declare %fixed_note_data[4]
	make_persistent(%fixed_note_data)
	
	declare %fixed_note_state[4]
	make_persistent(%fixed_note_state)
	
{function } {}
	
{ function settings_data }
	
	declare %preset_settings[$NUM_PRESET_SETTINGS] := (0,0,0,-50,50)
	make_instr_persistent(%preset_settings)
	
	declare %global_settings[$NUM_PRESET_SETTINGS] := (0,0,0,-50,50)
	
	{aftertouch, modwheel, pbend menu, pbend down, pbend up}
	
	
	
{function } {}
	
{****************** VARIABLES ******************}
	
{ function synth_variables }
	
	declare $selected_variation
	make_persistent($selected_variation)
	
	declare $active_filter
	make_persistent($active_filter)
	
	declare $last_active_filter
	make_persistent($last_active_filter)
	
	declare $active_lfo
	make_persistent($active_lfo)
	
	declare $last_active_lfo
	make_persistent($last_active_lfo)
	
	declare $active_page
	declare $last_active_page
	
{function } {}
	
{ function arp_variables }
	
	declare $last_random_note
	
	declare $tick_counter
	declare $step_counter
	declare $step_counter_previous
	declare $seq_running
	declare $grid_counter
	declare $oct_counter
	declare $up_down_counter
	declare $up_down_oct_counter
	declare $chord_oct_counter
	
	declare $play_counter
	
	declare $sync_position
	
	declare $wait_time
	
	declare %note_ids[128]
	
	declare %note_buffer[128] {all held notes in the played order}
	declare %sorted_buffer[128] {the sorted note buffer, top note first}
	declare %play_buffer[128] {the actual notes to be played}
	declare %play_up_buffer[128]
	declare %play_down_buffer[128]
	
	declare $cursor
	declare $cursor_helper
	
	
	declare $check_id
	
	declare $step_duration
	
	declare $played_note
	declare $played_duration
	declare $played_velocity
	
	declare $up_down_direction
	
	declare $latch_mode {0 for normal operation, 1 when sustain pedal is held}
	declare $old_latch_time
	
	declare !variation_slider_names[9]
	!variation_slider_names[0] := ""
	!variation_slider_names[1] := "1"
	!variation_slider_names[2] := "2"
	!variation_slider_names[3] := "3"
	!variation_slider_names[4] := "4"
	!variation_slider_names[5] := "5"
	!variation_slider_names[6] := "6"
	!variation_slider_names[7] := "7"
	!variation_slider_names[8] := "8"
	
	set_listener($NI_SIGNAL_TIMER_BEAT,$TICKS_PER_BEAT)	

{function } {}
	
{ function chord_variables}
	
	declare %played_note[$MAX_NUM_OF_NOTES]
	declare $scale_degree
	
	
{function } {}
	
{ function init }
	
	$selected_variation := 0
	
	$active_filter := 0
	$last_active_filter := 1
	
	$var_1_btn := 1
	$flt_1_btn := 1
	
	$lfo_1_btn := 1
	$active_lfo := 0
	$last_active_lfo := 1
	
	$pbend_menu := 1
	$aftertouch_menu := 1

	$count := 0
	while ($count < $MAX_NUM_OF_STEPS)
		%arp_rhythm[$count] := 127
		set_control_par(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_VALUE,127)
		inc($count)
	end while
	
	$duration_sld := 55
	
	if ($global_recall_btn = 1)
		
		load_array(%global_settings,1)
		
		$aftertouch_menu := %global_settings[0]
		$modwheel_menu := %global_settings[1]
		$pbend_menu := %global_settings[2]
		$pbend_down_sld := %global_settings[3]
		$pbend_up_sld := %global_settings[4]
		
	else
	
		$aftertouch_menu := %preset_settings[0]
		$modwheel_menu := %preset_settings[1]
		$pbend_menu := %preset_settings[2]
		$pbend_down_sld := %preset_settings[3]
		$pbend_up_sld := %preset_settings[4]
		
	end if
	
{function } {}
	
{****************** OTHER ******************}
	
{ function automation_stuff }
	
	set_control_par_str(get_ui_id($sound_sld),$CONTROL_PAR_AUTOMATION_NAME,"Sound")
	set_control_par_str(get_ui_id($fat_sld),$CONTROL_PAR_AUTOMATION_NAME,"Fat")
	set_control_par_str(get_ui_id($lfo_pitch_sld),$CONTROL_PAR_AUTOMATION_NAME,"Pitch LFO")
	set_control_par_str(get_ui_id($sample_start_sld),$CONTROL_PAR_AUTOMATION_NAME,"Smpl Start")
	
	set_control_par_str(get_ui_id($glide_sld),$CONTROL_PAR_AUTOMATION_NAME,"Gld Time")
	set_control_par_str(get_ui_id($glide_btn),$CONTROL_PAR_AUTOMATION_NAME,"Glide")
	set_control_par_str(get_ui_id($solo_btn),$CONTROL_PAR_AUTOMATION_NAME,"Solo")
	set_control_par_str(get_ui_id($legato_btn),$CONTROL_PAR_AUTOMATION_NAME,"Legato")
	
	set_control_par_str(get_ui_id($arp_onoff_btn),$CONTROL_PAR_AUTOMATION_NAME,"Arp")
	set_control_par_str(get_ui_id($chord_onoff_btn),$CONTROL_PAR_AUTOMATION_NAME,"Chord")
	
	set_control_par_str(get_ui_id($cutoff_sld),$CONTROL_PAR_AUTOMATION_NAME,"Cutoff")
	set_control_par_str(get_ui_id($reso_sld),$CONTROL_PAR_AUTOMATION_NAME,"Reso")
	set_control_par_str(get_ui_id($lfo_cutoff_sld),$CONTROL_PAR_AUTOMATION_NAME,"Flt LFO")
	set_control_par_str(get_ui_id($velo_cutoff_sld),$CONTROL_PAR_AUTOMATION_NAME,"Vel to Flt")
	set_control_par_str(get_ui_id($env_cutoff_sld),$CONTROL_PAR_AUTOMATION_NAME,"Flt Env")
	set_control_par_str(get_ui_id($flt_env_decay_sld),$CONTROL_PAR_AUTOMATION_NAME,"Env Decay")
	
	set_control_par_str(get_ui_id($flt_onoff_btn),$CONTROL_PAR_AUTOMATION_NAME,"Flt On")
	
	
	set_control_par_str(get_ui_id($attack_sld),$CONTROL_PAR_AUTOMATION_NAME,"Attack")
	set_control_par_str(get_ui_id($release_sld),$CONTROL_PAR_AUTOMATION_NAME,"Release")
	set_control_par_str(get_ui_id($vel_vol_sld),$CONTROL_PAR_AUTOMATION_NAME,"Vel Sens")
	set_control_par_str(get_ui_id($gain_sld),$CONTROL_PAR_AUTOMATION_NAME,"Gain")
	set_control_par_str(get_ui_id($env_btn),$CONTROL_PAR_AUTOMATION_NAME,"Percussive")
	
	set_control_par_str(get_ui_id($fx_1_sld),$CONTROL_PAR_AUTOMATION_NAME,"Reverb")
	if (get_engine_par($ENGINE_PAR_SEND_EFFECT_TYPE,-1,1,0) = $EFFECT_TYPE_DELAY)
		set_control_par_str(get_ui_id($fx_2_sld),$CONTROL_PAR_AUTOMATION_NAME,"Echo")
	else
		set_control_par_str(get_ui_id($fx_2_sld),$CONTROL_PAR_AUTOMATION_NAME,"Phaser")
	end if
	
	set_control_par_str(get_ui_id($lfo_rate_sld),$CONTROL_PAR_AUTOMATION_NAME,"LFO Rate")
	set_control_par_str(get_ui_id($morph_sld),$CONTROL_PAR_AUTOMATION_NAME,"Morph")
	
	set_control_par_str(get_ui_id($arp_preset_next_btn),$CONTROL_PAR_AUTOMATION_NAME,"Next Arp Preset")
	set_control_par_str(get_ui_id($arp_preset_prev_btn),$CONTROL_PAR_AUTOMATION_NAME,"Prev Arp Preset")
	
	set_control_par_str(get_ui_id($prev_note_order_menu_btn),$CONTROL_PAR_AUTOMATION_NAME,"Prev Note Order")
	set_control_par_str(get_ui_id($next_note_order_menu_btn),$CONTROL_PAR_AUTOMATION_NAME,"Next Note Order")
	set_control_par_str(get_ui_id($tempo_double_btn),$CONTROL_PAR_AUTOMATION_NAME,"Double Time")
	set_control_par_str(get_ui_id($beat_grid_btn),$CONTROL_PAR_AUTOMATION_NAME,"Grid")
	set_control_par_str(get_ui_id($prev_octave_menu_btn),$CONTROL_PAR_AUTOMATION_NAME,"Prev Oct")
	set_control_par_str(get_ui_id($next_octave_menu_btn),$CONTROL_PAR_AUTOMATION_NAME,"Next Oct")
	set_control_par_str(get_ui_id($duration_sld),$CONTROL_PAR_AUTOMATION_NAME,"Duration")
	set_control_par_str(get_ui_id($swing_sld),$CONTROL_PAR_AUTOMATION_NAME,"Swing")
	
	set_control_par_str(get_ui_id($harm_preset_next_btn),$CONTROL_PAR_AUTOMATION_NAME,"Next Chord Preset")
	set_control_par_str(get_ui_id($harm_preset_prev_btn),$CONTROL_PAR_AUTOMATION_NAME,"Prev Chord Preset")
	
	set_control_par_str(get_ui_id($note_1_sld),$CONTROL_PAR_AUTOMATION_NAME,"Note 1")
	set_control_par_str(get_ui_id($note_2_sld),$CONTROL_PAR_AUTOMATION_NAME,"Note 2")
	set_control_par_str(get_ui_id($note_3_sld),$CONTROL_PAR_AUTOMATION_NAME,"Note 3")
	set_control_par_str(get_ui_id($note_4_sld),$CONTROL_PAR_AUTOMATION_NAME,"Note 4")
	
	set_control_par_str(get_ui_id($note_1_btn),$CONTROL_PAR_AUTOMATION_NAME,"Note 1 On")
	set_control_par_str(get_ui_id($note_2_btn),$CONTROL_PAR_AUTOMATION_NAME,"Note 2 On")
	set_control_par_str(get_ui_id($note_3_btn),$CONTROL_PAR_AUTOMATION_NAME,"Note 3 On")
	set_control_par_str(get_ui_id($note_4_btn),$CONTROL_PAR_AUTOMATION_NAME,"Note 4 On")
	
	set_control_par_str(get_ui_id($fixed_chord_btn),$CONTROL_PAR_AUTOMATION_NAME,"Fixed Chord")
	
	set_control_par_str(get_ui_id($next_transpose_menu_btn),$CONTROL_PAR_AUTOMATION_NAME,"Transp Up")
	set_control_par_str(get_ui_id($prev_transpose_menu_btn),$CONTROL_PAR_AUTOMATION_NAME,"Transp Down")
	
	
	set_control_par_str(get_ui_id($pbend_down_sld),$CONTROL_PAR_AUTOMATION_NAME,"PB Down")
	set_control_par_str(get_ui_id($pbend_up_sld),$CONTROL_PAR_AUTOMATION_NAME,"PB Up")
	
	if ($CREATE_AUTOMATION_ID = 1)
		set_control_par(get_ui_id($cutoff_sld),$CONTROL_PAR_AUTOMATION_ID,0)
		set_control_par(get_ui_id($reso_sld),$CONTROL_PAR_AUTOMATION_ID,1)
		set_control_par(get_ui_id($sound_sld),$CONTROL_PAR_AUTOMATION_ID,2)
		set_control_par(get_ui_id($fat_sld),$CONTROL_PAR_AUTOMATION_ID,3)
		set_control_par(get_ui_id($fx_1_sld),$CONTROL_PAR_AUTOMATION_ID,4)
		set_control_par(get_ui_id($fx_2_sld),$CONTROL_PAR_AUTOMATION_ID,5)
		set_control_par(get_ui_id($attack_sld),$CONTROL_PAR_AUTOMATION_ID,6)
		set_control_par(get_ui_id($release_sld),$CONTROL_PAR_AUTOMATION_ID,7)
		set_control_par(get_ui_id($lfo_pitch_sld),$CONTROL_PAR_AUTOMATION_ID,8)
		set_control_par(get_ui_id($sample_start_sld),$CONTROL_PAR_AUTOMATION_ID,9)
		set_control_par(get_ui_id($lfo_cutoff_sld),$CONTROL_PAR_AUTOMATION_ID,10)
		set_control_par(get_ui_id($velo_cutoff_sld),$CONTROL_PAR_AUTOMATION_ID,11)
		set_control_par(get_ui_id($env_cutoff_sld),$CONTROL_PAR_AUTOMATION_ID,12)
		set_control_par(get_ui_id($flt_env_decay_sld),$CONTROL_PAR_AUTOMATION_ID,13)
		set_control_par(get_ui_id($vel_vol_sld),$CONTROL_PAR_AUTOMATION_ID,14)
		set_control_par(get_ui_id($gain_sld),$CONTROL_PAR_AUTOMATION_ID,15)
		set_control_par(get_ui_id($glide_sld),$CONTROL_PAR_AUTOMATION_ID,16)
		set_control_par(get_ui_id($morph_sld),$CONTROL_PAR_AUTOMATION_ID,17)
		set_control_par(get_ui_id($lfo_rate_sld),$CONTROL_PAR_AUTOMATION_ID,18)
		set_control_par(get_ui_id($duration_sld),$CONTROL_PAR_AUTOMATION_ID,19)
		set_control_par(get_ui_id($swing_sld),$CONTROL_PAR_AUTOMATION_ID,20)
		set_control_par(get_ui_id($solo_btn),$CONTROL_PAR_AUTOMATION_ID,21)
		set_control_par(get_ui_id($legato_btn),$CONTROL_PAR_AUTOMATION_ID,22)
		set_control_par(get_ui_id($glide_btn),$CONTROL_PAR_AUTOMATION_ID,23)
		
		{gap, ids for vel sliders and var sliders assigned in respective while loops}
		
		set_control_par(get_ui_id($note_1_sld),$CONTROL_PAR_AUTOMATION_ID,56)
		set_control_par(get_ui_id($note_2_sld),$CONTROL_PAR_AUTOMATION_ID,57)
		set_control_par(get_ui_id($note_3_sld),$CONTROL_PAR_AUTOMATION_ID,58)
		set_control_par(get_ui_id($note_4_sld),$CONTROL_PAR_AUTOMATION_ID,59)
		set_control_par(get_ui_id($note_1_btn),$CONTROL_PAR_AUTOMATION_ID,60)
		set_control_par(get_ui_id($note_2_btn),$CONTROL_PAR_AUTOMATION_ID,61)
		set_control_par(get_ui_id($note_3_btn),$CONTROL_PAR_AUTOMATION_ID,62)
		set_control_par(get_ui_id($note_4_btn),$CONTROL_PAR_AUTOMATION_ID,63)
		set_control_par(get_ui_id($arp_preset_next_btn),$CONTROL_PAR_AUTOMATION_ID,64)
		set_control_par(get_ui_id($arp_preset_prev_btn),$CONTROL_PAR_AUTOMATION_ID,65)
		set_control_par(get_ui_id($prev_note_order_menu_btn),$CONTROL_PAR_AUTOMATION_ID,66)
		set_control_par(get_ui_id($next_note_order_menu_btn),$CONTROL_PAR_AUTOMATION_ID,67)
		set_control_par(get_ui_id($tempo_double_btn),$CONTROL_PAR_AUTOMATION_ID,68)
		set_control_par(get_ui_id($beat_grid_btn),$CONTROL_PAR_AUTOMATION_ID,69)
		set_control_par(get_ui_id($prev_octave_menu_btn),$CONTROL_PAR_AUTOMATION_ID,70)
		set_control_par(get_ui_id($next_octave_menu_btn),$CONTROL_PAR_AUTOMATION_ID,71)
		set_control_par(get_ui_id($arp_onoff_btn),$CONTROL_PAR_AUTOMATION_ID,72)
		set_control_par(get_ui_id($chord_onoff_btn),$CONTROL_PAR_AUTOMATION_ID,73)
		set_control_par(get_ui_id($harm_preset_next_btn),$CONTROL_PAR_AUTOMATION_ID,74)
		set_control_par(get_ui_id($harm_preset_prev_btn),$CONTROL_PAR_AUTOMATION_ID,75)
		set_control_par(get_ui_id($fixed_chord_btn),$CONTROL_PAR_AUTOMATION_ID,76)
		set_control_par(get_ui_id($next_transpose_menu_btn),$CONTROL_PAR_AUTOMATION_ID,77)
		set_control_par(get_ui_id($prev_transpose_menu_btn),$CONTROL_PAR_AUTOMATION_ID,78)
		set_control_par(get_ui_id($env_btn),$CONTROL_PAR_AUTOMATION_ID,79)
		set_control_par(get_ui_id($flt_onoff_btn),$CONTROL_PAR_AUTOMATION_ID,80)
		set_control_par(get_ui_id($pbend_down_sld),$CONTROL_PAR_AUTOMATION_ID,81)
		set_control_par(get_ui_id($pbend_up_sld),$CONTROL_PAR_AUTOMATION_ID,82)
	end if
	
{function } {}

{ function control_help }
	
	set_control_help($sound_sld,"Sound: Morphs through various EQ settings.")
	set_control_help($fat_sld,"Fat: Thickens the sound by detuning and spreading the audio signal.")
	set_control_help($lfo_pitch_sld,"LFO Amount: Sets the amount of modulation applied from the LFO to pitch.")
	set_control_help($sample_start_sld,"Sample Start: Moves the sample start point forward. Useful for making a sound more static by cutting the sampled filter envelope phase.")
	
	set_control_help($glide_sld,"Glide Time: Sets the glissando time between notes when <Glide> is activated.")
	set_control_help($glide_btn,"Glide: Turns pitch slides on or off. The rate of the glide can be controlled with the <Glide Time> control. ")
	set_control_help($solo_btn,"Solo: Enables solo mode, i.e. making a sound monophonic. Works well with both <Legato> and <Glide>.")
	set_control_help($legato_btn,"Legato: Enables legato mode, i.e. envelopes will not be triggered when playing legato notes . Only active when <Solo> is set to On.")
	
	set_control_help($arp_onoff_btn,"Arp: Activates the arpeggiator. The arpeggiator can be programmed on the <Arp/Chord> page. While the arpeggiator is running, you can use the sustain pedal to hold notes.")
	set_control_help($chord_onoff_btn,"Chord: Activates the harmonizer. The harmonizer can be programmed on the <Arp/Chord> page.")
	
	set_control_help($cutoff_sld,"Cutoff: Sets the cutoff frequency of the filter.")
	set_control_help($reso_sld,"Resonance: Sets the strength of the resonant peak at the cutoff frequency.")
	set_control_help($lfo_cutoff_sld,"LFO Amount: Sets the amount of modulation applied from the LFO to the cutoff frequency.")
	set_control_help($velo_cutoff_sld,"Vel Amount: Sets the amount of modulation applied from the MIDI velocity to the cutoff frequency.")
	set_control_help($env_cutoff_sld,"Env Amount: Sets the amount of modulation applied from the filter envelope to the cutoff frequency. This knob is bipolar: the left side opens the filter while the right side closes it.")
	set_control_help($flt_env_decay_sld,"Env Decay: Sets the decay time of the filter envelope. Only has an effect on the filter when <Env Amount> is not set to middle position")
	
	set_control_help($flt_1_btn,"Daft LP: Selects the Daft Low Pass Filter.")
	set_control_help($flt_2_btn,"Ladder LP: Selects the Ladder Low Pass Filter.")
	set_control_help($flt_3_btn,"Notch: Selects the Notch Filter. This filter works nicely with Filter LFO modulation.")
	set_control_help($flt_4_btn,"Formant: Selects the Formant Filter.")
	
	set_control_help($flt_onoff_btn,"Filter On/Off: Turns the entire filter section on or off.")
	
	set_control_help($attack_sld,"Attack: Sets the attack time the volume envelope, i.e. the time it will take to fade to its maximum level.")
	set_control_help($release_sld,"Release: Sets the release time the volume envelope, i.e. the time it will take to fade out after the note has been released.")
	set_control_help($vel_vol_sld,"Vel Sens: Sets the amount of modulation applied from the MIDI velocity to the volume.")
	set_control_help($gain_sld,"Gain: Adjusts the volume of the selected sound variation. Useful for matching the volume of different sound variations.")
	set_control_help($env_btn,"Percussive: Changes the volume envelope mode for short percussive sounds.")
	
	set_control_help($fx_1_sld,"Reverb: Sets the send level of the reverb effect.")
	if (get_engine_par($ENGINE_PAR_SEND_EFFECT_TYPE,-1,1,0) = $EFFECT_TYPE_DELAY)
		set_control_help($fx_2_sld,"Echo: Sets the send level of the echo effect.")
	else
		set_control_help($fx_2_sld,"Phaser: Sets the send level of the phaser effect.")
	end if
	
	set_control_help($lfo_rate_sld,"LFO Rate: Sets the speed of the LFO. The LFO is monophonic and can modulate pitch and filter cutoff frequency.")
	
	set_control_help($lfo_1_btn,"Triangle: Sets the LFO waveform to a triangle wave.")
	set_control_help($lfo_2_btn,"Square: Sets the LFO waveform to a square wave.")
	set_control_help($lfo_3_btn,"Saw: Sets the LFO waveform to a saw wave.")
	set_control_help($lfo_4_btn,"Random: Sets the LFO waveform to S/H (Sample and Hold) behaviour, i.e. generating a random and stepped waveform.")
	
	set_control_help($var_1_btn,"Sound Variation: Recalls a sound variation. Alt-clicking a sound variation button will copy the entire sound variation to all variations. Changes to any knob or button are immediately stored in the selected sound variation slot, while alt-clicking any knob/button will copy the control's value to all sound variations.")
	set_control_help($var_2_btn,"Sound Variation: Recalls a sound variation. Alt-clicking a sound variation button will copy the entire sound variation to all variations. Changes to any knob or button are immediately stored in the selected sound variation slot, while alt-clicking any knob/button will copy the control's value to all sound variations.")
	set_control_help($var_3_btn,"Sound Variation: Recalls a sound variation. Alt-clicking a sound variation button will copy the entire sound variation to all variations. Changes to any knob or button are immediately stored in the selected sound variation slot, while alt-clicking any knob/button will copy the control's value to all sound variations.")
	set_control_help($var_4_btn,"Sound Variation: Recalls a sound variation. Alt-clicking a sound variation button will copy the entire sound variation to all variations. Changes to any knob or button are immediately stored in the selected sound variation slot, while alt-clicking any knob/button will copy the control's value to all sound variations.")
	set_control_help($var_5_btn,"Sound Variation: Recalls a sound variation. Alt-clicking a sound variation button will copy the entire sound variation to all variations. Changes to any knob or button are immediately stored in the selected sound variation slot, while alt-clicking any knob/button will copy the control's value to all sound variations.")
	set_control_help($var_6_btn,"Sound Variation: Recalls a sound variation. Alt-clicking a sound variation button will copy the entire sound variation to all variations. Changes to any knob or button are immediately stored in the selected sound variation slot, while alt-clicking any knob/button will copy the control's value to all sound variations.")
	set_control_help($var_7_btn,"Sound Variation: Recalls a sound variation. Alt-clicking a sound variation button will copy the entire sound variation to all variations. Changes to any knob or button are immediately stored in the selected sound variation slot, while alt-clicking any knob/button will copy the control's value to all sound variations.")
	set_control_help($var_8_btn,"Sound Variation: Recalls a sound variation. Alt-clicking a sound variation button will copy the entire sound variation to all variations. Changes to any knob or button are immediately stored in the selected sound variation slot, while alt-clicking any knob/button will copy the control's value to all sound variations.")
	
	set_control_help($morph_sld,"Morph Slider: Morphs through sound variations. Only the knob settings of the variations will be affected by morphing. This slider can be controlled with the arpeggiator or the pitch bend/mod wheel (the pitch bend/mod wheel behaviour can be changed on the <Settings> page).")
	
	set_control_help($note_order_menu,"Play Order: Defines the pattern for the order in which notes are arpeggiated.")
	set_control_help($tempo_double_btn,"Double Time: Doubles the tempo to 32nd notes (16) or 16th triplets (12).")
	set_control_help($beat_grid_btn,"Beat Grid: Sets the rhythmic grid to either 16th notes (16) or triplet 8ths (12).")
	
	set_control_help($init_rhythm_btn,"Init Rhythm: Initializes the rhythmic grid and sets all sliders to maximum. When alt-clicking this button, all active sliders (all sliders greater than zero) will be randomized.")
	set_control_help($clear_rhythm_btn,"Clear Rhythm: Clears the rhythmic grid, i.e. sets all sliders to zero. When alt-clicking this button, all sliders will be randomized.")
	set_control_help($clear_variation_btn,"Clear Variation: Clears the sound variation grid. When alt-clicking this button, all variation steps will be randomized.")
	
	set_control_help($octave_menu,"Octave: Sets the octave displacement, i.e. the distribution of the arpeggio pattern in various octaves. The arpeggio pattern cycles from the played octave to the octave set upwards.")
	set_control_help($duration_sld,"Duration: Sets the duration of the arpeggiated notes. At maximum, consecutive notes will overlap, useful when <Solo> and <Legato> are activated.")
	set_control_help($swing_sld,"Swing: Offsets the second and fourth step in 16th mode to create a swing feel. Only works in 16th mode.")
	
	set_control_help($arp_preset_menu,"Preset Menu: Selects an arpeggiator preset. You can also click on the name of a preset to type in a new preset name.")
	set_control_help($arp_preset_next_btn,"Next Preset: Selects the next arpeggiator preset.")
	set_control_help($arp_preset_prev_btn,"Previous Preset: Selects the previous arpeggiator preset.")
	set_control_help($arp_preset_save_btn,"Save Preset: Click here to save any changes made to the current arpeggiator preset. If it was a factory preset, a copy will be created in the user area. If it was a user preset, and no name changes have been made, the preset will be overwritten.")
	set_control_help($arp_preset_delete_btn,"Delete Preset: Click here to delete the current arpeggiator preset.")
	
	set_control_help($sel_note_menu,"Played Note: If <Fixed Chord> is off, this note shows the incoming MIDI note to be harmonized.")
	
	set_control_help($note_1_sld,"Note 1 Interval: Sets the interval for the 1st chord note.")
	set_control_help($note_2_sld,"Note 2 Interval: Sets the interval for the 2nd chord note.")
	set_control_help($note_3_sld,"Note 3 Interval: Sets the interval for the 3rd chord note.")
	set_control_help($note_4_sld,"Note 4 Interval: Sets the interval for the 4th chord note")
	
	set_control_help($note_1_btn,"Note 1 On/Off: Enables the 1st chord note.")
	set_control_help($note_2_btn,"Note 2 On/Off: Enables the 2nd chord note")
	set_control_help($note_3_btn,"Note 3 On/Off: Enables the 3rd chord note")
	set_control_help($note_4_btn,"Note 4 On/Off: Enables the 4th chord note")
	set_control_help($transpose_menu,"Transpose: If <Fixed Chord> is off, you can transposes the chord set with this control, i.e. a chord progression which works in the key if C can be transposed to a different key.")
	set_control_help($fixed_chord_btn,"Fixed Chord: If enabled, each note of the chromatic scale will be harmonized with the same chord. Otherwise each note of the chromatic scale can trigger a different chord.")
	
	set_control_help($harm_preset_menu,"Preset Menu: Selects a chord preset. You can also click on the name of a preset to type in a new preset name.")
	set_control_help($harm_preset_next_btn,"Next Preset: Selects the next chord preset.")
	set_control_help($harm_preset_prev_btn,"Previous Preset: Selects the previous chord preset.")
	set_control_help($harm_preset_save_btn,"Save Preset: Click here to save any changes made to the current chord preset. If it was a factory preset, a copy will be created in the user area. If it was a user preset, and no name changes have been made, the preset will be overwritten.")
	set_control_help($harm_preset_delete_btn,"Delete Preset: Click here to delete the current chord preset.")
	
	
	set_control_help($pbend_menu,"Pitch Bend: Sets the functionality for the pitch bend wheel. Other than pitch bend, you can use the pitch bend wheel to morph through all variations or just the previous and next variation.")
	set_control_help($pbend_down_sld,"PB Range Down: Sets the pitch bend range when the pitch bend wheel is moved down. Make sure <Pitch Bend> is selected as the destination for the pitchbend wheel.")
	set_control_help($pbend_up_sld,"PB Range Up: Sets the pitch bend range when the pitch bend wheel is moved up. Make sure <Pitch Bend> is selected as the destination for the pitchbend wheel.")
	set_control_help($aftertouch_menu,"Aftertouch: Sets the functionality for the channel pressure (monophonic aftertouch).")
	set_control_help($modwheel_menu,"Mod Wheel: Sets the functionality for the mod wheel.")
	
	set_control_help($global_recall_btn,"Global: If enabled, the above controller settings will be applied to all instruments with this option enabled.")
	set_control_help($preset_recall_btn,"Preset: If enabled, the above controller settings are specific to the current instrument. The settings will not be saved with snapshots.")
	
{function } {}

{ function arp_presets}
	
	declare $arp_count
	declare $arp_count_2
	declare $arp_count_3

	declare const $ARP_DATA_SIZE := 38
	declare const $ARP_NUM_PRESETS_FACT := 5
	declare const $ARP_NUM_PRESETS_USER := 10
	
	declare %arp_presets_fact[$ARP_DATA_SIZE*$ARP_NUM_PRESETS_FACT] := (...
	{1}	1,0,1,0,55,0,...
		127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,...
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,...
	{2}	3,0,0,0,70,0,...
		127,80,40,127,80,40,127,80,40,127,80,40,127,80,127,40,...
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,...
	{3}	5,0,1,1,40,0,...
		127,0,0,127,0,0,127,0,0,127,0,0,127,0,127,0,...
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,...
	{4}	4,0,1,3,55,0,...
		127,60,98,120,5,32,42,99,60,3,20,115,40,60,90,64,...
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,...
	{5}	1,0,1,0,55,0,...
		127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,...
		0,1,2,3,4,5,6,7,8,7,6,5,4,3,2,0)
	
	{note order, tempo double, beat grid, octave, duration, swing
	rhythm,
	variation}
	
	declare !arp_preset_names_fact[$ARP_NUM_PRESETS_FACT]
	!arp_preset_names_fact[0] := "Init"
	!arp_preset_names_fact[1] := "Triplets"
	!arp_preset_names_fact[2] := "Rhythm"
	!arp_preset_names_fact[3] := "Random"
	!arp_preset_names_fact[4] := "Move Sld"
	
	declare %arp_num_user_presets[1]
	declare %arp_presets_user[$ARP_NUM_PRESETS_USER*$ARP_DATA_SIZE]
	declare !arp_preset_names_user[$ARP_NUM_PRESETS_USER]
	
	declare %arp_async_check[3]
	declare $arp_change_flag
	declare $arp_delete_flag
	declare $last_arp_preset
	declare $arp_preset_helper
	declare $arp_load_safety := 1
	declare $arp_save_safety := 1
	declare $arp_delete_safety := 1
	
	make_persistent($arp_change_flag)
	make_persistent($arp_delete_flag)
	
	read_persistent_var($arp_change_flag)
	read_persistent_var($arp_delete_flag)
	
	read_persistent_var(%arp_num_user_presets)
	read_persistent_var(%arp_presets_user)
	$arp_count := 0
	while($arp_count < $ARP_NUM_PRESETS_USER)
		!arp_preset_names_user[$arp_count] := " "
		inc($arp_count)
	end while
	
	%arp_async_check[0] := load_array(%arp_num_user_presets, 1)
	%arp_async_check[1] := load_array(%arp_presets_user, 1)
	%arp_async_check[2] := load_array(!arp_preset_names_user, 1)
	
	$arp_count := 0
	while($arp_count < $ARP_NUM_PRESETS_FACT)
		add_menu_item($arp_preset_menu,!arp_preset_names_fact[$arp_count],$arp_count)
		inc($arp_count)
	end while
	
	add_menu_item($arp_preset_menu,"------",$ARP_NUM_PRESETS_FACT)
	if(%arp_num_user_presets[0] = 0)
		set_menu_item_visibility(%arp_preset_control_id[0], $ARP_NUM_PRESETS_FACT, 0)
	end if
	
	$arp_count := $ARP_NUM_PRESETS_FACT + 1
	while($arp_count < $ARP_NUM_PRESETS_FACT + 1 + $ARP_NUM_PRESETS_USER)
		add_menu_item($arp_preset_menu,!arp_preset_names_user[$arp_count - $ARP_NUM_PRESETS_FACT - 1],$arp_count)
		if($arp_count > $ARP_NUM_PRESETS_FACT + %arp_num_user_presets[0])
			set_menu_item_visibility(%arp_preset_control_id[0], $arp_count, 0)
		end if
		inc($arp_count)
	end while

{function } {}
	
{ function chord_presets}
	
	declare $harm_count
	declare $harm_count_2
	declare $harm_count_3

	declare const $HARM_DATA_SIZE := 106
	declare const $HARM_NUM_PRESETS_FACT := 9
	declare const $HARM_NUM_PRESETS_USER := 10
	
	declare %harm_presets_fact[$HARM_DATA_SIZE*$HARM_NUM_PRESETS_FACT] := (...
{0}	{Intervals}...
	{	C	Db	D	Eb	E	F	Gb	 G	Ab	 A	 Bb	  B} ...
		0,  0,  0,  0,  0,  0,   0,  0,  0,  0,   0,  0, ...
		7,  7,  7,  7,  7,  7,   7,  7,  7,  7,   7,  7, ...
		12, 12, 12, 12, 12, 12,  12, 12, 12, 12, 12, 12, ...
		0,  0,  0,  0,  0,  0,   0,  0,  0,  0,   0,  0, ...
	{Note States}...
	{	C	Db	D	Eb	E	F	Gb	G	Ab	A	Bb	B}...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
		0,  0,  0,  0,  0,  0,   0, 0,  0,  0,  0,  0,...
		0,  0,  0,  0,  0,  0,   0, 0,  0,  0,  0,  0,...
	{Fixed Note Intervall} 0,7,12,-5,...
	{Fixed Note State} 1,1,0,0,...
	{Fixed Note On/Off}1,...
	{Transpose}0,...
{1}	{Intervals}...
	{	C	Db	D	Eb	E	F	Gb	G	Ab	A	Bb	B}...
		0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,...
		4,	4,	3,	4,	3,	4,	4,	4,	4,	3,	4,	3,...
		7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	6,...
		-5,	-5,	-5,	-5,	-5,	-5,	-5,	-5,	-5,	-5,	-5,	-6,...
	{Note States}...
	{	C	Db	D	Eb	E	F	Gb	G	Ab	A	Bb	B}...
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,...
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,...
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,...
		0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,...
	{Fixed Note Intervall} 0,4,7,-5,...
	{Fixed Note State} 1,1,1,0,...
	{Fixed Note On/Off}1,...
	{Transpose}0,...
{2}	{Intervals}...
	{	C	Db	D	Eb	E	F	Gb	G	Ab	A	Bb	B}...
		0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,...
		4,	3,	3,	3,	3,	4,	4,	4,	3,	3,	3,	3,...
		5,	5,	5,	5,	5,	6,	5,	5,	5,	5,	5,	5,...
		9,	9,	9,	8,	8,	9,	9,	9,	8,	8,	8,	8,...
	{Note States}...
	{	C	Db	D	Eb	E	F	Gb	G	Ab	A	Bb	B}...
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,...
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,...
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,...
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,...
	{Fixed Note Intervall} 0,4,5,9,...
	{Fixed Note State} 1,1,1,1,...
	{Fixed Note On/Off}1,...
	{Transpose}0,...
{3}	{Intervals}...
	{	C	Db	D	Eb	E	F	Gb	G	Ab	A	Bb	B}...
		0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,...
		-12,	-12,	-12,	-12,	-12,	-12,	-12,	-12,	-12,	-12,	-12,	-12,...
		12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,...
		-5,	-5,	-5,	-5,	-5,	-5,	-5,	-5,	-5,	-5,	-5,	-5,...
	{Note States}...
	{	C	Db	D	Eb	E	F	Gb	G	Ab	A	Bb	B}...
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,...
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,...
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,...
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,...
	{Fixed Note Intervall} 0,-12,12,-5,...
	{Fixed Note State} 1,1,1,1,...
	{Fixed Note On/Off}1,...
	{Transpose}0,...
{4}	{Intervals}...
	{	C	Db	D	Eb	E	F	Gb	G	Ab	A	Bb	B}...
		0,  -1, 0,  0, -1,  0,  -1,  0, -1, -1,   0, -1, ...
		3,  2,  3,  4,  3,  3,   2,  3,  2,  3,   4,  3, ...
		0,  0,  0,  0,  0,  0,   0,  0,  0,  0,   0,  0, ...
		0,  0,  0,  0,  0,  0,   0,  0,  0,  0,   0,  0, ...
	{Note States}...
	{	C	Db	D	Eb	E	F	Gb	G	Ab	A	Bb	B}...
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,...
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,...
		0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,...
		0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,...
	{Fixed Note Intervall} 0,0,0,0,...
	{Fixed Note State} 1,0,0,0,...
	{Fixed Note On/Off}0,...
	{Transpose}0,...
{5}	{Intervals}...
	{	C	Db	D	Eb	E	F	Gb	 G	Ab	 A	 Bb	  B} ...
		0,  0,  0,  0, -1,  0,   0,  0,  0, -1,   0,  0, ...
		3,  4,  1,  4,  6,  3,  -3, -4,  4,  3,   2, -4, ...
		7,  6,  5,  7, -4, 10,   6,  5, -3,  5,   5,  3, ...
		12, 7,  8,  0,  0,  0,   0,  0,  0,  0,  -3,  8, ...
	{Note States}...
	{	C	Db	D	Eb	E	F	Gb	G	Ab	A	Bb	B}...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
		1,  1,  1,  0,  0,  0,   0, 0,  0,  0,  1,  1,...
	{Fixed Note Intervall} 0,3,7,0,...
	{Fixed Note State} 1,1,1,0,...
	{Fixed Note On/Off}0,...
	{Transpose}0,...
{6}	{Intervals}...
	{	 C		 Db		 D		Eb		 E		 F		Gb		 G		Ab		 A		Bb		 B} ...
		 0,		 1,		 0,		 0, 	-1,		 0,		-1,		 0,		 0, 	-1,		 0,		 0, ...
		 3,		-1,		-4,		-3,		 3,		-2,		-4, 	-5,		-5,  	-4,		 4,		-4, ...
		-5,		-6,		-7,  	-7, 	-4,		-5,		-6,  	-7,		-8,  	-9,		-5,		 3, ...
		 0,		 0,		 0,  	 0,  	 0,		 0,		 0,  	 0,		 0,  	 0,		 0,		 0, ...
	{Note States}...
	{	C	Db	D	Eb	E	F	Gb	G	Ab	A	Bb	B}...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
		0,  0,  0,  0,  0,  0,   0, 0,  0,  0,  0,  0,...
	{Fixed Note Intervall} 0,3,7,0,...
	{Fixed Note State} 1,1,1,0,...
	{Fixed Note On/Off}0,...
	{Transpose}0,...
{7}	{Intervals}...
	{	 C		 Db		 D		Eb		 E		 F		Gb		 G		Ab		 A		Bb		 B} ...
		12,		12,		12,		12, 	12,		12,		12,		12,		12, 	12,		12,		12, ...
		 4,		 3,		 3,		 3,		 3,		 4,		 3, 	 5,		 3,  	 3,		 3,		 3, ...
		 7,		 6,		 7,  	 6, 	 8,		 7,		 6,  	 9,		 6,  	 8,		 9,		 6, ...
		-12,	-12,	-12,   -12,  	-12,	-12,	-12,  	-12,	-12,  	-12,	-12,	-12, ...
	{Note States}...
	{	C	Db	D	Eb	E	F	Gb	G	Ab	A	Bb	B}...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
	{Fixed Note Intervall} 0,3,7,0,...
	{Fixed Note State} 1,1,1,0,...
	{Fixed Note On/Off}0,...
	{Transpose}0,...
{8}	{Intervals}...
	{	 C		 Db		 D		Eb		 E		 F		Gb		 G		Ab		 A		Bb		 B} ...
		 0,		 0,		-1,		 0, 	 0,		-1,		 0,		 0,		-1, 	 0,		 0,		-1, ...
		 4,		 3,		 4,		 4,		 3,		 4,		 4, 	 3,		 4,  	 4,		 3,		 4, ...
		 7,		 8,		 8,  	 7, 	 8,		 8,		 7,  	 8,		 8,  	 7,		 8,		 8, ...
		 0,		 0,		 0,  	 0,  	 0,		 0,		 0,  	 0,		 0,  	 0,		 0,		 0, ...
	{Note States}...
	{	C	Db	D	Eb	E	F	Gb	G	Ab	A	Bb	B}...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
		1,  1,  1,  1,  1,  1,   1, 1,  1,  1,  1,  1,...
		0,  0,  0,  0,  0,  0,   0, 0,  0,  0,  0,  0,...
	{Fixed Note Intervall} 0,3,7,0,...
	{Fixed Note State} 1,1,1,0,...
	{Fixed Note On/Off}0,...
	{Transpose}0)
	
	declare !harm_preset_names_fact[$HARM_NUM_PRESETS_FACT]
	!harm_preset_names_fact[0] := "Init"
	!harm_preset_names_fact[1] := "Maj Triad"
	!harm_preset_names_fact[2] := "Seventh"
	!harm_preset_names_fact[3] := "Power"
	!harm_preset_names_fact[4] := "Min 3rd"
	!harm_preset_names_fact[5] := "Minor 1"
	!harm_preset_names_fact[6] := "Minor 2"
	!harm_preset_names_fact[7] := "Gospel"
	!harm_preset_names_fact[8] := "Octatonic"
	
	declare %harm_num_user_presets[1]
	declare %harm_presets_user[$HARM_NUM_PRESETS_USER*$HARM_DATA_SIZE]
	declare !harm_preset_names_user[$HARM_NUM_PRESETS_USER]
	
	declare %harm_async_check[3]
	declare $harm_change_flag
	declare $harm_delete_flag
	declare $last_harm_preset
	declare $harm_preset_helper
	declare $harm_load_safety := 1
	declare $harm_save_safety := 1
	declare $harm_delete_safety := 1
	
	make_persistent($harm_change_flag)
	make_persistent($harm_delete_flag)
	read_persistent_var($harm_change_flag)
	read_persistent_var($harm_delete_flag)
	
	read_persistent_var(%harm_num_user_presets)
	read_persistent_var(%harm_presets_user)
	$harm_count := 0
	while($harm_count < $HARM_NUM_PRESETS_USER)
		!harm_preset_names_user[$harm_count] := " "
		inc($harm_count)
	end while
	
	%harm_async_check[0] := load_array(%harm_num_user_presets, 1)
	%harm_async_check[1] := load_array(%harm_presets_user, 1)
	%harm_async_check[2] := load_array(!harm_preset_names_user, 1)
	
	$harm_count := 0
	while($harm_count < $HARM_NUM_PRESETS_FACT)
		add_menu_item($harm_preset_menu,!harm_preset_names_fact[$harm_count],$harm_count)
		inc($harm_count)
	end while
	
	add_menu_item($harm_preset_menu,"------",$HARM_NUM_PRESETS_FACT)
	if(%harm_num_user_presets[0] = 0)
		set_menu_item_visibility(%harm_preset_control_id[0], $HARM_NUM_PRESETS_FACT, 0)
	end if
	
	$harm_count := $HARM_NUM_PRESETS_FACT + 1
	while($harm_count < $HARM_NUM_PRESETS_FACT + 1 + $HARM_NUM_PRESETS_USER)
		add_menu_item($harm_preset_menu,!harm_preset_names_user[$harm_count - $HARM_NUM_PRESETS_FACT - 1],$harm_count)
		if($harm_count > $HARM_NUM_PRESETS_FACT + %harm_num_user_presets[0])
			set_menu_item_visibility(%harm_preset_control_id[0], $harm_count, 0)
		end if
		inc($harm_count)
	end while
	
	
	
{function } {}
	
{ function pitchbend }
	
	declare $pbend_value
	declare $pb_helper
	
	declare $pbend_down
	make_persistent ($pbend_down)
	
	declare $pbend_up
	make_persistent ($pbend_up)
	
	declare $pbend_max
	make_persistent($pbend_max)
	
	declare $pbend_diff
	make_persistent($pbend_diff)
	
	declare $p_up
	declare $p_down
	declare $p_max
	make_persistent($p_up)
	make_persistent($p_down)
	make_persistent($p_max)
	
	
	
	
{function } {}
	
	$init_flag := 0
	
end on




function pbend_range_down
	
	$pbend_down := $pbend_down_sld*10
	$pbend_diff := $pbend_up - $pbend_down
	if (abs($pbend_up) > abs($pbend_down))
		$pbend_max := abs($pbend_up *10000)/12
	else
		$pbend_max := abs($pbend_down *10000)/12	
	end if
	
	$pb_helper := ($pbend_down*1000)/1200
	$pb_helper := ($pb_helper*$pb_helper*12)/10
	
	if ($pbend_down_sld < 0)
		$p_down := $pb_helper/1000
	else
		$p_down := -$pb_helper/1000	
	end if
	
	if ($pbend_down_sld < 0)
		if ($pb_helper < 100000)
			set_control_par_str(get_ui_id($pbend_down_sld),$CONTROL_PAR_LABEL,"-0."&$pb_helper/10000&($pb_helper mod 10000)/1000)
		else
			set_control_par_str(get_ui_id($pbend_down_sld),$CONTROL_PAR_LABEL,"-"&$pb_helper/100000&"."&($pb_helper mod 100000)/10000)		
		end if
	else
		if ($pb_helper < 100000)
			set_control_par_str(get_ui_id($pbend_down_sld),$CONTROL_PAR_LABEL,"0."&$pb_helper/10000&($pb_helper mod 10000)/1000)
		else
			set_control_par_str(get_ui_id($pbend_down_sld),$CONTROL_PAR_LABEL,$pb_helper/100000&"."&($pb_helper mod 100000)/10000)		
		end if
	end if
	
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$pbend_max,0,17,-1)

end function {}

function pbend_range_up
	
	$pbend_up := $pbend_up_sld*10
	$pbend_diff := $pbend_up - $pbend_down
	if (abs($pbend_up) > abs($pbend_down))
		$pbend_max := abs($pbend_up *10000)/12
	else
		$pbend_max := abs($pbend_down *10000)/12	
	end if
	$pb_helper := ($pbend_up*1000)/1200
	$pb_helper := ($pb_helper*$pb_helper*12)/10
	if ($pbend_up_sld < 0)
		$p_up := -$pb_helper/1000
	else
		$p_up := $pb_helper/1000	
	end if
	
	if ($pbend_up_sld < 0)
		if ($pb_helper < 100000)
			set_control_par_str(get_ui_id($pbend_up_sld),$CONTROL_PAR_LABEL,"-0."&$pb_helper/10000&($pb_helper mod 10000)/1000)
		else
			set_control_par_str(get_ui_id($pbend_up_sld),$CONTROL_PAR_LABEL,"-"&$pb_helper/100000&"."&($pb_helper mod 100000)/10000)		
		end if
	else
		if ($pb_helper < 100000)
			set_control_par_str(get_ui_id($pbend_up_sld),$CONTROL_PAR_LABEL,"0."&$pb_helper/10000&($pb_helper mod 10000)/1000)
		else
			set_control_par_str(get_ui_id($pbend_up_sld),$CONTROL_PAR_LABEL,$pb_helper/100000&"."&($pb_helper mod 100000)/10000)		
		end if
	end if
	
	
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$pbend_max,0,17,-1)

end function {}




{************************************* Synth Functions ***************************}

function change_eq
	
	$index_1 := $sound_sld/10
	$index_2 := $sound_sld/10 +1
	$knob_eq := $sound_sld*10
	if ($index_2 > 10)
		$index_2 := 10
	end if
	
	$a_eq := 0
	while($a_eq < 9)
		$helper_eq := ((%savearr[($index_2*9) + $a_eq] - %savearr[($index_1*9) + $a_eq]) * ($knob_eq mod 100))/100 + %savearr[($index_1*9) + $a_eq]
		set_engine_par(%engine_par[$a_eq],$helper_eq,-1,$EQ_SLOT_IDX,-1)
		inc($a_eq)
	end while   
	
end function {}

function change_flt_type
	
	{toggle functionality}
	$count := 0
	while ($count < num_elements(%flt_type_btn_ids))
		set_control_par(%flt_type_btn_ids[$count],$CONTROL_PAR_VALUE,0)
		inc($count)
	end while
	set_control_par(%flt_type_btn_ids[$active_filter],$CONTROL_PAR_VALUE,1)
	
	{change filter: activate current and bypass last}
	if ($active_filter # $last_active_filter)
		set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,0,2+$active_filter,-1)
		set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,0,2+$last_active_filter,-1)
	end if
	
	set_engine_par($ENGINE_PAR_EFFECT_BYPASS,abs($flt_onoff_btn-1),0,2+$active_filter,-1)
	
	$last_active_filter := $active_filter
	
end function {}

function change_lfo_type
	
	{toggle functionality}
	$count := 0
	while ($count < num_elements(%lfo_type_btn_ids))
		set_control_par(%lfo_type_btn_ids[$count],$CONTROL_PAR_VALUE,0)
		inc($count)
	end while
	set_control_par(%lfo_type_btn_ids[$active_lfo],$CONTROL_PAR_VALUE,1)
	
	{change lfo: activate current and bypass last}
	if ($active_lfo # $last_active_lfo)
		set_engine_par(%lfo_type_engine_par[$active_lfo],1000000,0,1,-1)
		set_engine_par(%lfo_type_engine_par[$last_active_lfo],500000,0,1,-1)
	end if
	
	$last_active_lfo := $active_lfo
	
end function {}

function change_velo_cutoff
	
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$velo_cutoff_sld,0,26,-1) 
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$velo_cutoff_sld,0,27,-1) 
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$velo_cutoff_sld,0,28,-1) 
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$velo_cutoff_sld,0,29,-1) 
	
end function {}

function change_env_cutoff
	
	if ($env_cutoff_sld < 0)
		set_engine_par ($MOD_TARGET_INVERT_SOURCE,1,0,2,0)
		set_engine_par ($MOD_TARGET_INVERT_SOURCE,1,0,2,1)
		set_engine_par ($MOD_TARGET_INVERT_SOURCE,1,0,2,2)
		set_engine_par ($MOD_TARGET_INVERT_SOURCE,1,0,2,3)
	else
		set_engine_par ($MOD_TARGET_INVERT_SOURCE,0,0,2,0)
		set_engine_par ($MOD_TARGET_INVERT_SOURCE,0,0,2,1)
		set_engine_par ($MOD_TARGET_INVERT_SOURCE,0,0,2,2)
		set_engine_par ($MOD_TARGET_INVERT_SOURCE,0,0,2,3)
	end if
	
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,abs($env_cutoff_sld*10000),0,2,0) 
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,abs($env_cutoff_sld*10000),0,2,1) 
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,abs($env_cutoff_sld*10000),0,2,2) 
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,abs($env_cutoff_sld*10000),0,2,3)
	
end function {}

function change_lfo_cutoff
	
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$lfo_cutoff_sld,0,1,0) 
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$lfo_cutoff_sld,0,1,1) 
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$lfo_cutoff_sld,0,1,2)
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$lfo_cutoff_sld,0,1,3)
	
end function {}

function change_lfo_pitch
	
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$lfo_pitch_sld,0,1,4) 
	
end function {}

function change_sample_start

	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$sample_start_sld,0,31,-1) 
	pgs_set_key_val(SAMPLE_START,0,$sample_start_sld)
	
end function {}

function morph_variation
	
	if ($morph_sld > 699)
		$morph_sld := 699
	end if
	
	if ($morph_sld > $selected_variation*100)
		
		{osc}
		
		$sound_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_SOUND ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_SOUND ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_SOUND ]
		
		$fat_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FAT ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_FAT ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_FAT ]
		
		$lfo_pitch_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_PITCH ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_PITCH ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_PITCH ]
		
		$sample_start_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_SAMPLE_START ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_SAMPLE_START ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_SAMPLE_START ]
		
		{perform}
		$glide_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_GLIDE ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_GLIDE ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_GLIDE ]
		
		{filter}
		
		$cutoff_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_CUTOFF ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_CUTOFF ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_CUTOFF ]
		
		$reso_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_RESO ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_RESO ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_RESO ]
		
		$lfo_cutoff_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_CUTOFF ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_CUTOFF ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_CUTOFF ]
		
		$velo_cutoff_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_VELO_CUTOFF ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_VELO_CUTOFF ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_VELO_CUTOFF ]
		
		$env_cutoff_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_ENV_CUTOFF ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_ENV_CUTOFF ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_ENV_CUTOFF ]
		
		$flt_env_decay_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FLT_ENV_DECAY ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_FLT_ENV_DECAY ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_FLT_ENV_DECAY ]
		
		{amp}
		
		$attack_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_ATTACK ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_ATTACK ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_ATTACK ]
		
		$release_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_RELEASE ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_RELEASE ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_RELEASE ]
		
		$vel_vol_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_VEL_VOL ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_VEL_VOL ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_VEL_VOL ]
		
		$gain_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_GAIN ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_GAIN ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_GAIN ]
		
		{fx}
		
		$fx_1_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FX_1 ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_FX_1 ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_FX_1 ]
		
		$fx_2_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FX_2 ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_FX_2 ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_FX_2 ]
		
		{lfo}
		
		$lfo_rate_sld := (($morph_sld-(($morph_sld/100)*100))*((%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_RATE ])-(%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_RATE ])) / ...
		((((($morph_sld+100)/100)*100))-(($morph_sld/100)*100)))+%presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_RATE ]
	
	end if
	
	if ($morph_sld < $selected_variation*100)
		
		{osc}
		
		$sound_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_SOUND ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_SOUND ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_SOUND ]
		
		$fat_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FAT ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FAT ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FAT ]
		
		$lfo_pitch_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_PITCH ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_PITCH ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_PITCH ]
		
		$sample_start_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_SAMPLE_START ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_SAMPLE_START ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_SAMPLE_START ]
		
		{perform}
		
		$glide_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_GLIDE ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_GLIDE ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_GLIDE ]
		
		{filter}
		
		$cutoff_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_CUTOFF ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_CUTOFF ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_CUTOFF ]
		
		$reso_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_RESO ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_RESO ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_RESO ]
		
		$lfo_cutoff_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_CUTOFF ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_CUTOFF ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_CUTOFF ]
		
		$velo_cutoff_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_VELO_CUTOFF ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_VELO_CUTOFF ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_VELO_CUTOFF ]
		
		$env_cutoff_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_ENV_CUTOFF ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_ENV_CUTOFF ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_ENV_CUTOFF ]
		
		$flt_env_decay_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FLT_ENV_DECAY ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FLT_ENV_DECAY ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FLT_ENV_DECAY ]
		
		{amp}
		
		$attack_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_ATTACK ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_ATTACK ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_ATTACK ]
		
		$release_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_RELEASE ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_RELEASE ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_RELEASE ]
		
		$vel_vol_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_VEL_VOL ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_VEL_VOL ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_VEL_VOL ]
		
		$gain_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_GAIN ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_GAIN ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_GAIN ]
		
		{fx}
		
		$fx_1_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FX_1 ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FX_1 ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FX_1 ]
		
		$fx_2_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FX_2 ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FX_2 ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_FX_2 ]
		
		
		{lfo}
		
		$lfo_rate_sld := (($morph_sld-((($morph_sld+100)/100)*100))*(%presets[((($morph_sld)/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_RATE ]-%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_RATE ]) / ...
		(((($morph_sld)/100)*100)-((($morph_sld+100)/100)*100)))+%presets[((($morph_sld+100)/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_RATE ]
		
	
	end if
	
	if ($morph_sld = $selected_variation*100)
		
		{osc}
		
		$sound_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER) + $TABLE_IDX_SOUND]
		$fat_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER) + $TABLE_IDX_FAT]
		$lfo_pitch_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_PITCH]
		$sample_start_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER) + $TABLE_IDX_SAMPLE_START]
		
		{perform}
		$glide_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER) + $TABLE_IDX_GLIDE]
		
		{filter}
		
		$cutoff_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER) + $TABLE_IDX_CUTOFF]
		$reso_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER) + $TABLE_IDX_RESO]
		$lfo_cutoff_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER) + $TABLE_IDX_LFO_CUTOFF]
		$velo_cutoff_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_VELO_CUTOFF]
		$env_cutoff_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_ENV_CUTOFF]
		$flt_env_decay_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_FLT_ENV_DECAY]
		
		{amp}
		
		$attack_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_ATTACK]
		$release_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_RELEASE]
		$vel_vol_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_VEL_VOL]
		$gain_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_GAIN]
		
		{fx}
		
		$fx_1_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_FX_1]
		$fx_2_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_FX_2]
		
		{lfo}
		
		$lfo_rate_sld := %presets[(($morph_sld/100)*$NUM_PARAMETER)+ $TABLE_IDX_LFO_RATE]
	
	end if
	
	
	
	call change_eq
	call change_lfo_pitch
	call change_sample_start
	set_controller ($FAT_CC,$fat_sld)
	
	pgs_set_key_val(GLIDE_TIME,0,$glide_sld)
	
	set_controller ($CUTOFF_CC,$cutoff_sld)
	set_controller ($RESO_CC,$reso_sld)
	set_controller ($FLT_ENV_DECAY_CC,$flt_env_decay_sld)
	
	call change_lfo_cutoff
	call change_velo_cutoff
	call change_env_cutoff
	
	set_engine_par($ENGINE_PAR_ATTACK,$attack_sld,0,0,-1)
	set_engine_par($ENGINE_PAR_DECAY,$release_sld,0,0,-1)
	set_engine_par($ENGINE_PAR_RELEASE,$release_sld,0,0,-1)
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$vel_vol_sld,0,16,-1) 
	set_controller ($GAIN_CC,$gain_sld)
	
	set_controller ($FX_1_CC,$fx_1_sld)
	set_controller ($FX_2_CC,$fx_2_sld)
	
	set_controller ($LFO_RATE_CC,$lfo_rate_sld)
	
	{parameter readout}
	
	set_control_par_str(get_ui_id($cutoff_sld),$CONTROL_PAR_LABEL,$cutoff_sld*100/127 & " %")
	set_control_par_str(get_ui_id($reso_sld),$CONTROL_PAR_LABEL,$reso_sld*100/127 & " %")
	set_control_par_str(get_ui_id($lfo_cutoff_sld),$CONTROL_PAR_LABEL,$lfo_cutoff_sld/10000 & " %")
	set_control_par_str(get_ui_id($velo_cutoff_sld),$CONTROL_PAR_LABEL,$velo_cutoff_sld/10000 & " %")
	set_control_par_str(get_ui_id($env_cutoff_sld),$CONTROL_PAR_LABEL,$env_cutoff_sld & " %")
	set_control_par_str(get_ui_id($flt_env_decay_sld),$CONTROL_PAR_LABEL,$flt_env_decay_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($sound_sld),$CONTROL_PAR_LABEL,$sound_sld & " %")
	set_control_par_str(get_ui_id($fat_sld),$CONTROL_PAR_LABEL,$fat_sld*100/127 & " %")
	set_control_par_str(get_ui_id($lfo_pitch_sld),$CONTROL_PAR_LABEL,$lfo_pitch_sld/10000 & " %")
	set_control_par_str(get_ui_id($sample_start_sld),$CONTROL_PAR_LABEL,$sample_start_sld/10000 & " %")
	
	set_control_par_str(get_ui_id($lfo_rate_sld),$CONTROL_PAR_LABEL,$lfo_rate_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($attack_sld),$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_ATTACK,0,0,-1) & " ms")
	set_control_par_str(get_ui_id($release_sld),$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_RELEASE,0,0,-1) & " ms")
	set_control_par_str(get_ui_id($vel_vol_sld),$CONTROL_PAR_LABEL,$vel_vol_sld/10000 & " %")
	set_control_par_str(get_ui_id($gain_sld),$CONTROL_PAR_LABEL,$gain_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($fx_1_sld),$CONTROL_PAR_LABEL,$fx_1_sld*100/127 & " %")
	set_control_par_str(get_ui_id($fx_2_sld),$CONTROL_PAR_LABEL,$fx_2_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($glide_sld),$CONTROL_PAR_LABEL,$glide_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($morph_sld),$CONTROL_PAR_LABEL,$morph_sld*100/700 & " %")
	
end function {}


{************************************* Chord Functions ***************************}

function update_layout
	
	set_control_par(get_ui_id($chord_bg),$CONTROL_PAR_PICTURE_STATE,$fixed_chord_btn)
	
	if ($fixed_chord_btn = 1)
	
		if ($note_1_sld > 0)
			set_text($note_1_lbl,"+" & $note_1_sld)
		else
			if ($note_1_sld = 0)
				set_text($note_1_lbl,$note_1_sld)
			else
				set_text($note_1_lbl,$note_1_sld)
			end if
		end if
		
		if ($note_2_sld > 0)
			set_text($note_2_lbl,"+" & $note_2_sld)
		else
			if ($note_2_sld = 0)
				set_text($note_2_lbl,$note_2_sld)
			else
				set_text($note_2_lbl,$note_2_sld)
			end if
		end if
		
		if ($note_3_sld > 0)
			set_text($note_3_lbl,"+" & $note_3_sld)
		else
			if ($note_3_sld = 0)
				set_text($note_3_lbl,$note_3_sld)
			else
				set_text($note_3_lbl,$note_3_sld)
			end if
		end if
		
		if ($note_4_sld > 0)
			set_text($note_4_lbl,"+" & $note_4_sld)
		else
			if ($note_4_sld = 0)
				set_text($note_4_lbl,$note_4_sld)
			else
				set_text($note_4_lbl,$note_4_sld)
			end if
		end if
	
	else
		
		if ($note_1_sld > 0)
			set_text($note_1_lbl,"+" & $note_1_sld & " (" & !note_class[abs(12+$note_1_sld+$sel_note_menu) mod 12] & ")")
		else
			if ($note_1_sld = 0)
				set_text($note_1_lbl,$note_1_sld & " (" & !note_class[abs(12+$note_1_sld+$sel_note_menu) mod 12] & ")")
			else
				set_text($note_1_lbl,$note_1_sld & " (" & !note_class[abs(12+$note_1_sld+$sel_note_menu) mod 12] & ")")
			end if
		end if
		
		if ($note_2_sld > 0)
			set_text($note_2_lbl,"+" & $note_2_sld & " (" & !note_class[abs(12+$note_2_sld+$sel_note_menu) mod 12] & ")")
		else
			if ($note_2_sld = 0)
				set_text($note_2_lbl,$note_2_sld & " (" & !note_class[abs(12+$note_2_sld+$sel_note_menu) mod 12] & ")")
			else
				set_text($note_2_lbl,$note_2_sld & " (" & !note_class[abs(12+$note_2_sld+$sel_note_menu) mod 12] & ")")
			end if
		end if
		
		
		if ($note_3_sld > 0)
			set_text($note_3_lbl,"+" & $note_3_sld & " (" & !note_class[abs(12+$note_3_sld+$sel_note_menu) mod 12] & ")")
		else
			if ($note_3_sld = 0)
				set_text($note_3_lbl,$note_3_sld & " (" & !note_class[abs(12+$note_3_sld+$sel_note_menu) mod 12] & ")")
			else
				set_text($note_3_lbl,$note_3_sld & " (" & !note_class[abs(12+$note_3_sld+$sel_note_menu) mod 12] & ")")
			end if
		end if
		
		
		if ($note_4_sld > 0)
			set_text($note_4_lbl,"+" & $note_4_sld & " (" & !note_class[abs(12+$note_4_sld+$sel_note_menu) mod 12] & ")")
		else
			if ($note_4_sld = 0)
				set_text($note_4_lbl,$note_4_sld & " (" & !note_class[abs(12+$note_4_sld+$sel_note_menu) mod 12] & ")")
			else
				set_text($note_4_lbl,$note_4_sld & " (" & !note_class[abs(12+$note_4_sld+$sel_note_menu) mod 12] & ")")
			end if
		end if
	end if
	
	
	set_control_par_str(get_ui_id($note_1_sld),$CONTROL_PAR_LABEL,$note_1_sld)
	set_control_par_str(get_ui_id($note_2_sld),$CONTROL_PAR_LABEL,$note_2_sld)
	set_control_par_str(get_ui_id($note_3_sld),$CONTROL_PAR_LABEL,$note_3_sld)
	set_control_par_str(get_ui_id($note_4_sld),$CONTROL_PAR_LABEL,$note_4_sld)
	
		
end function {}

function update_note_controls
	
	if ($fixed_chord_btn = 1)
		
		
		
		set_control_par(get_ui_id($sel_note_menu),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($prev_sel_note_menu_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($next_sel_note_menu_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		
		set_control_par(get_ui_id($transpose_menu),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($prev_transpose_menu_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($next_transpose_menu_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	
	else
		
		if ($active_page = 1)
		
			set_control_par(get_ui_id($sel_note_menu),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(get_ui_id($prev_sel_note_menu_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(get_ui_id($next_sel_note_menu_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			
			set_control_par(get_ui_id($transpose_menu),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(get_ui_id($prev_transpose_menu_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(get_ui_id($next_transpose_menu_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		
		end if
		
	end if
	
	if ($fixed_chord_btn = 1)
		
		$note_1_sld := %fixed_note_data[0]
		$note_1_btn := %fixed_note_state[0]
		
		$note_2_sld := %fixed_note_data[1]
		$note_2_btn := %fixed_note_state[1]
		
		$note_3_sld := %fixed_note_data[2]
		$note_3_btn := %fixed_note_state[2]
		
		$note_4_sld := %fixed_note_data[3]
		$note_4_btn := %fixed_note_state[3]
		
	else
	
	
		$scale_degree := (12+$sel_note_menu - $transpose_menu) mod 12
		
		$note_1_sld := %note_1_data[$scale_degree]
		$note_1_btn := %note_1_state[$scale_degree]
		
		$note_2_sld := %note_2_data[$scale_degree]
		$note_2_btn := %note_2_state[$scale_degree]
		
		$note_3_sld := %note_3_data[$scale_degree]
		$note_3_btn := %note_3_state[$scale_degree]
		
		$note_4_sld := %note_4_data[$scale_degree]
		$note_4_btn := %note_4_state[$scale_degree]
	
	end if
	
	call update_layout
	
end function {}

function create_chord

	
	if ($fixed_chord_btn = 0)
		
		$sel_note_menu := $played_note mod 12
		call update_note_controls
		
		%played_note[0] := $played_note + %note_1_data[$scale_degree]
		%played_note[1] := $played_note + %note_2_data[$scale_degree]
		%played_note[2] := $played_note + %note_3_data[$scale_degree]
		%played_note[3] := $played_note + %note_4_data[$scale_degree]
	
	else
		%played_note[0] := $played_note + %fixed_note_data[0]
		%played_note[1] := $played_note + %fixed_note_data[1]
		%played_note[2] := $played_note + %fixed_note_data[2]
		%played_note[3] := $played_note + %fixed_note_data[3]
	
	end if

	{play chord - reversed order, better when solo is on (root note still played)}
	
	if ($note_4_btn = 1 and in_range(%played_note[3],0,127))
		play_note(%played_note[3],$played_velocity,0,$played_duration)
	end if
	
	if ($note_3_btn = 1 and in_range(%played_note[2],0,127))
		play_note(%played_note[2],$played_velocity,0,$played_duration)
	end if
	
	if ($note_2_btn = 1 and in_range(%played_note[1],0,127))
		play_note(%played_note[1],$played_velocity,0,$played_duration)
	end if
	
	if ($note_1_btn = 1 and in_range(%played_note[0],0,127))
		play_note(%played_note[0],$played_velocity,0,$played_duration)
	end if


end function {}

function load_harm_preset
	$harm_change_flag := 0
	$harm_delete_flag := 0
	@harm_preset_name := get_menu_item_str(%harm_preset_control_id[0],$harm_preset_menu)
	
	if($harm_preset_menu < $HARM_NUM_PRESETS_FACT)
		{load data from factory preset}
		$harm_count := 0
		while($harm_count < 12)
			%note_1_data[$harm_count] := %harm_presets_fact[($harm_preset_menu*$HARM_DATA_SIZE) + $harm_count]
			%note_2_data[$harm_count] := %harm_presets_fact[($harm_preset_menu*$HARM_DATA_SIZE) + 12 + $harm_count]
			%note_3_data[$harm_count] := %harm_presets_fact[($harm_preset_menu*$HARM_DATA_SIZE) + 24 + $harm_count]
			%note_4_data[$harm_count] := %harm_presets_fact[($harm_preset_menu*$HARM_DATA_SIZE) + 36 + $harm_count]
			
			%note_1_state[$harm_count] := %harm_presets_fact[($harm_preset_menu*$HARM_DATA_SIZE) + 48 + $harm_count]
			%note_2_state[$harm_count] := %harm_presets_fact[($harm_preset_menu*$HARM_DATA_SIZE) + 60 + $harm_count]
			%note_3_state[$harm_count] := %harm_presets_fact[($harm_preset_menu*$HARM_DATA_SIZE) + 72 + $harm_count]
			%note_4_state[$harm_count] := %harm_presets_fact[($harm_preset_menu*$HARM_DATA_SIZE) + 84 + $harm_count]
			inc($harm_count)
		end while
		
		$harm_count := 0
		while($harm_count < 4)
			%fixed_note_data[$harm_count] := %harm_presets_fact[($harm_preset_menu*$HARM_DATA_SIZE) + 96 + $harm_count]
			%fixed_note_state[$harm_count] := %harm_presets_fact[($harm_preset_menu*$HARM_DATA_SIZE) + 100 + $harm_count]
			inc($harm_count)
		end while
		
		$fixed_chord_btn := %harm_presets_fact[($harm_preset_menu*$HARM_DATA_SIZE) + 104]
		$transpose_menu := %harm_presets_fact[($harm_preset_menu*$HARM_DATA_SIZE) + 105]
		
	else
		{load data from user preset}
		$harm_count := 0
		while($harm_count < 12)
			%note_1_data[$harm_count] := %harm_presets_user[(($harm_preset_menu - $HARM_NUM_PRESETS_FACT - 1)*$HARM_DATA_SIZE) + $harm_count]
			%note_2_data[$harm_count] := %harm_presets_user[(($harm_preset_menu - $HARM_NUM_PRESETS_FACT - 1)*$HARM_DATA_SIZE) + 12 + $harm_count]
			%note_3_data[$harm_count] := %harm_presets_user[(($harm_preset_menu - $HARM_NUM_PRESETS_FACT - 1)*$HARM_DATA_SIZE) + 24 + $harm_count]
			%note_4_data[$harm_count] := %harm_presets_user[(($harm_preset_menu - $HARM_NUM_PRESETS_FACT - 1)*$HARM_DATA_SIZE) + 36 + $harm_count]
			
			%note_1_state[$harm_count] := %harm_presets_user[(($harm_preset_menu - $HARM_NUM_PRESETS_FACT - 1)*$HARM_DATA_SIZE) + 48 + $harm_count]
			%note_2_state[$harm_count] := %harm_presets_user[(($harm_preset_menu - $HARM_NUM_PRESETS_FACT - 1)*$HARM_DATA_SIZE) + 60 + $harm_count]
			%note_3_state[$harm_count] := %harm_presets_user[(($harm_preset_menu - $HARM_NUM_PRESETS_FACT - 1)*$HARM_DATA_SIZE) + 72 + $harm_count]
			%note_4_state[$harm_count] := %harm_presets_user[(($harm_preset_menu - $HARM_NUM_PRESETS_FACT - 1)*$HARM_DATA_SIZE) + 84 + $harm_count]
			inc($harm_count)
		end while
		
		$harm_count := 0
		while($harm_count < 4)
			%fixed_note_data[$harm_count] := %harm_presets_user[(($harm_preset_menu - $HARM_NUM_PRESETS_FACT - 1)*$HARM_DATA_SIZE) + 96 + $harm_count]
			%fixed_note_state[$harm_count] := %harm_presets_user[(($harm_preset_menu - $HARM_NUM_PRESETS_FACT - 1)*$HARM_DATA_SIZE) + 100 + $harm_count]
			inc($harm_count)
		end while
	
		$fixed_chord_btn := %harm_presets_user[(($harm_preset_menu - $HARM_NUM_PRESETS_FACT - 1)*$HARM_DATA_SIZE) + 104]
		$transpose_menu := %harm_presets_user[(($harm_preset_menu - $HARM_NUM_PRESETS_FACT - 1)*$HARM_DATA_SIZE) + 105]
		
	end if
	
	{apply loaded data}
	
	if ($fixed_chord_btn = 1)
		set_control_par(get_ui_id($sel_note_menu),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($prev_sel_note_menu_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($next_sel_note_menu_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		
		set_control_par(get_ui_id($transpose_menu),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($prev_transpose_menu_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(get_ui_id($next_transpose_menu_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	
	else
		
		set_control_par(get_ui_id($sel_note_menu),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($prev_sel_note_menu_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($next_sel_note_menu_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		
		set_control_par(get_ui_id($transpose_menu),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($prev_transpose_menu_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(get_ui_id($next_transpose_menu_btn),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	end if
	
	call update_note_controls
	
end function {}

function store_harm_preset
	$harm_change_flag := 0
	$harm_delete_flag := 0
	@harm_preset_name := get_menu_item_str(%harm_preset_control_id[0],$harm_preset_menu)
	
	{load data into user array using $harm_preset_helper}
	
	$harm_count := 0
	while($harm_count < 12)
		%harm_presets_user[($harm_preset_helper*$HARM_DATA_SIZE) + $harm_count] := %note_1_data[$harm_count]
		%harm_presets_user[($harm_preset_helper*$HARM_DATA_SIZE) + 12 + $harm_count] := %note_2_data[$harm_count]
		%harm_presets_user[($harm_preset_helper*$HARM_DATA_SIZE) + 24 + $harm_count] := %note_3_data[$harm_count]
		%harm_presets_user[($harm_preset_helper*$HARM_DATA_SIZE) + 36 + $harm_count] := %note_4_data[$harm_count]
		
		%harm_presets_user[($harm_preset_helper*$HARM_DATA_SIZE) + 48 + $harm_count] := %note_1_state[$harm_count]
		%harm_presets_user[($harm_preset_helper*$HARM_DATA_SIZE) + 60 + $harm_count] := %note_2_state[$harm_count]
		%harm_presets_user[($harm_preset_helper*$HARM_DATA_SIZE) + 72 + $harm_count] := %note_3_state[$harm_count]
		%harm_presets_user[($harm_preset_helper*$HARM_DATA_SIZE) + 84 + $harm_count] := %note_4_state[$harm_count]
		inc($harm_count)
	end while
	
	$harm_count := 0
	while($harm_count < 4)
		%harm_presets_user[($harm_preset_helper*$HARM_DATA_SIZE) + 96 + $harm_count] := %fixed_note_data[$harm_count]
		%harm_presets_user[($harm_preset_helper*$HARM_DATA_SIZE) + 100 + $harm_count] := %fixed_note_state[$harm_count]
		inc($harm_count)
	end while

	%harm_presets_user[($harm_preset_helper*$HARM_DATA_SIZE) + 104] := $fixed_chord_btn
	%harm_presets_user[($harm_preset_helper*$HARM_DATA_SIZE) + 105] := $transpose_menu
end function {}

{************************************* Arpeggiator Functions ***************************}

function clear_lauflicht
	$count := 0
	while ($count < $num_of_steps)
		%lauflicht[$count] := 0
		inc($count)
	end while
	
	$count := 0
	while ($count < $num_of_steps)
		set_control_par(%lauflicht_lbl_ids[$count],$CONTROL_PAR_PICTURE_STATE,%lauflicht[$count])
		inc ($count)
	end while
	
end function {}

function show_sequencer
	
	set_control_par(get_ui_id($note_bg),$CONTROL_PAR_PICTURE_STATE,$beat_grid_btn)
	
	if ($active_page = 1)
	
	{hide cell matrix}
	$count := 0
	while ($count < $MAX_NUM_OF_STEPS)
		set_control_par(%lauflicht_lbl_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(%arp_variation_sld_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(%arp_variation_lbl_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($count)
	end while
	
	{show cell matrix}
	$count := 0
	while ($count < $num_of_steps)
		
		set_control_par(%lauflicht_lbl_ids[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(%lauflicht_lbl_ids[$count],$CONTROL_PAR_POS_X,$DEFAULT_POS_X+(%DEFAULT_DIST_X[$beat_grid_btn]*$count)+%DEFAULT_X_OFFSET[$count + ($beat_grid_btn*12)] + %light_offset[$count + ($beat_grid_btn*12)])
		
		set_control_par(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_POS_X,2 + $DEFAULT_POS_X+(%DEFAULT_DIST_X[$beat_grid_btn]*$count)+%DEFAULT_X_OFFSET[$count + ($beat_grid_btn*12)])
		
		set_control_par(%arp_variation_sld_ids[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(%arp_variation_sld_ids[$count],$CONTROL_PAR_POS_X,$DEFAULT_POS_X+(%DEFAULT_DIST_X[$beat_grid_btn]*$count)+%DEFAULT_X_OFFSET[$count + ($beat_grid_btn*12)])
		
		set_control_par(%arp_variation_lbl_ids[$count],$CONTROL_PAR_POS_X,- 2 + $DEFAULT_POS_X+(%DEFAULT_DIST_X[$beat_grid_btn]*$count)+%DEFAULT_X_OFFSET[$count + ($beat_grid_btn*12)])
		set_control_par(%arp_variation_lbl_ids[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		
		set_control_par_str(%arp_variation_lbl_ids[$count],$CONTROL_PAR_TEXT,!variation_slider_names[%arp_variation[$count]])
		
		inc($count)
	end while
	
	end if
	
end function {}

function start_sequencer
	$seq_running := 1
	$oct_counter := 0
	$play_counter := 0
	$up_down_direction := 0
	$up_down_counter := 0
	$up_down_oct_counter := 0
	$chord_oct_counter := 0
	
	if ($NI_TRANSPORT_RUNNING = 0)
		$sync_position := 0
		$step_counter := 0
		$tick_counter := -1
	else
		$sync_position := 1
	end if
end function {}

function stop_sequencer
	$seq_running := 0
	call clear_lauflicht
end function {}

function clear_note_buffer
	
	$count := 0
	while($count < $cursor)
		%note_buffer[$count] := 0
		inc($count)
	end while
	$cursor := 0 
	
end function {}

function tick_received
		
	{get step counter}
	if ($sync_position = 0)
		{advance counter}
		inc($tick_counter)
		if ($tick_counter >= $ticks_per_step)
			inc($step_counter)
			if ($step_counter >= $num_of_steps)
				$step_counter := 0
			end if
			$tick_counter := 0
		end if
	else
		if ($NI_SONG_POSITION < 0)
			exit
		else
			$tick_counter := ($NI_SONG_POSITION/40) mod $ticks_per_step
			$step_counter := ($NI_SONG_POSITION/(960/$beat_grid)) mod $num_of_steps
		end if
	end if
	
	
	{create sorted buffer for note order up and down}
	$count := 0
	while($count < 128)
		if ($count < $cursor)
			%sorted_buffer[$count] := %note_buffer[$count]
		else
			%sorted_buffer[$count] := 0
			%note_buffer[$count] := 0
		end if
		inc($count)
	end while
	sort(%sorted_buffer,1)
	
			
	$count := 0
	while($count < $cursor)
		%play_buffer[$count] := %note_buffer[$count]
		%play_up_buffer[$count] := %sorted_buffer[$cursor - 1 - $count]
		%play_down_buffer[$count] := %sorted_buffer[$count]
		inc($count)
	end while
	
	if ($tick_counter = 0) {we have reached a step}
		
		$step_counter_previous := ($step_counter+$num_of_steps-1) mod $num_of_steps
		$grid_counter := $step_counter mod $beat_grid
		$step_duration := $DURATION_QUARTER/$beat_grid
		
		{lauflicht display}
		if ($seq_running = 1)
			if ($grid_counter = 0)
				%lauflicht[$step_counter] := 1 {in order to show downbeat, set to 2}
			else
				%lauflicht[$step_counter] := 1
			end if
			
			set_control_par(%lauflicht_lbl_ids[$step_counter],$CONTROL_PAR_PICTURE_STATE,%lauflicht[$step_counter])
			%lauflicht[$step_counter_previous] := 0
			set_control_par(%lauflicht_lbl_ids[$step_counter_previous],$CONTROL_PAR_PICTURE_STATE,%lauflicht[$step_counter_previous])
		end if
		
		
		{create note}
		if (%arp_rhythm[$step_counter] > 0 and $cursor > 0 and $seq_running = 1)
			
			$played_velocity := %arp_rhythm[$step_counter]
			$played_duration := ($step_duration/100) * $duration_sld
				
			{swing implementation}
			if ($step_counter mod 2 = 1 and $beat_grid = 4 and $swing_sld > 0)
				$wait_time := ($step_duration*$swing_sld)/100
				if ($wait_time > 0)
					wait ($wait_time)
				end if
			end if
			
			select ($note_order_menu)
				case 0 {Played}
					$played_note := %play_buffer[$play_counter] + $oct_counter * 12
				
					if (in_range($played_note,0,127))
						if ($chord_onoff_btn = 1)
							call create_chord
						else
							play_note($played_note,$played_velocity,0,$played_duration)
						end if
					end if
				
				case 1 {Up}
					$played_note := %play_up_buffer[$play_counter] + $oct_counter * 12
				
					if (in_range($played_note,0,127))
						if ($chord_onoff_btn = 1)
							call create_chord
						else
							play_note($played_note,$played_velocity,0,$played_duration)
						end if
					end if
				
				case 2 {Down}
					$played_note := %play_down_buffer[$play_counter] + $oct_counter * 12
				
					if (in_range($played_note,0,127))
						if ($chord_onoff_btn = 1)
							call create_chord
						else
							play_note($played_note,$played_velocity,0,$played_duration)
						end if
					end if
				
				case 3 {Up/Down}
					$played_note := %play_up_buffer[$up_down_counter] + $up_down_oct_counter * 12
					
					if (in_range($played_note,0,127))
						play_note($played_note,$played_velocity,0,$played_duration)
					end if
					
					
					if ($cursor = 1)
						
						inc($up_down_oct_counter)
						if ($up_down_oct_counter > $octave_menu)
							$up_down_oct_counter := 0
						end if
					end if
					
					if ($cursor = 2)
						
						if ($up_down_counter = 1)
							inc($up_down_oct_counter)
							if ($up_down_oct_counter > $octave_menu)
								$up_down_oct_counter := 0
							end if
						end if
						
						inc($up_down_counter)
						if ($up_down_counter = 2)
							$up_down_counter := 0
						end if
						
					end if
					
					if ($cursor > 2)
					
						if ($up_down_counter = 1 and $up_down_direction = 1)
							inc($up_down_oct_counter)
							if ($up_down_oct_counter > $octave_menu)
								$up_down_oct_counter := 0
							end if
						end if
						
						if ($up_down_counter >= $cursor-1)
							$up_down_direction := 1 {go down}
						end if
						if ($up_down_counter <= 0)
							$up_down_direction := 0 {go up}
						end if
						
						if ($up_down_direction = 1)
							dec($up_down_counter)
						else
							inc($up_down_counter)
						end if
					
					end if
					
				case 4 {Random}
					
					$played_note := %play_buffer[random(0,$cursor-1)] + random(0,$octave_menu) * 12
					
					if ($cursor * ($octave_menu+1) >= 3) {if three or more notes are  played, no repetition of notes}
						while ($played_note = $last_random_note)
							$played_note := %play_buffer[random(0,$cursor-1)] + random(0,$octave_menu) * 12
						end while
					end if
					
					if (in_range($played_note,0,127))
						if ($chord_onoff_btn = 1)
							call create_chord
						else
							play_note($played_note,$played_velocity,0,$played_duration)
						end if
						$last_random_note := $played_note
					end if
				
				case 5 {Chord}
					
					$count := 0
					while ($count < $cursor)
					
						$played_note := %play_buffer[$count] + $chord_oct_counter * 12
						
						if (in_range($played_note,0,127))
							if ($chord_onoff_btn = 1)
								call create_chord
							else
								play_note($played_note,$played_velocity,0,$played_duration)
							end if
						end if
						inc($count)
					end while
					
					inc($chord_oct_counter)
					if ($chord_oct_counter > $octave_menu)
						$chord_oct_counter := 0
					end if
					
			end select
			
			{advance play counter}
			inc($play_counter)
			
			{reset play counter and get octave counter}
			if ($play_counter >= $cursor) {we have finished a cycle}
				$play_counter := 0
				if ($octave_menu > 0 )
					inc($oct_counter)
					if ($oct_counter > $octave_menu)
						$oct_counter := 0
					end if
				end if
			end if
			
			{morph variation}
			if (%arp_variation[$step_counter] > 0)
				$morph_sld := (%arp_variation[$step_counter] - 1) * 100
				call morph_variation
			end if
			
		end if
	end if
	
end function {}

function load_arp_preset
	$arp_change_flag := 0
	$arp_delete_flag := 0
	@arp_preset_name := get_menu_item_str(%arp_preset_control_id[0],$arp_preset_menu)
	
	if($arp_preset_menu < $ARP_NUM_PRESETS_FACT)
		{load data from factory preset}
		
		$note_order_menu := %arp_presets_fact[($ARP_DATA_SIZE*$arp_preset_menu) + 0]
		$tempo_double_btn := %arp_presets_fact[($ARP_DATA_SIZE*$arp_preset_menu) + 1]
		$beat_grid_btn := %arp_presets_fact[($ARP_DATA_SIZE*$arp_preset_menu) + 2]
		$octave_menu := %arp_presets_fact[($ARP_DATA_SIZE*$arp_preset_menu) + 3]
		$duration_sld := %arp_presets_fact[($ARP_DATA_SIZE*$arp_preset_menu) + 4]
		$swing_sld := %arp_presets_fact[($ARP_DATA_SIZE*$arp_preset_menu) + 5]
		$arp_count_3 := 0
		while($arp_count_3 < 16)
			%arp_rhythm[$arp_count_3] := %arp_presets_fact[($ARP_DATA_SIZE*$arp_preset_menu) + 6 + $arp_count_3]
			%arp_variation[$arp_count_3] := %arp_presets_fact[($ARP_DATA_SIZE*$arp_preset_menu) + 22 + $arp_count_3]
			inc($arp_count_3)
		end while
	else
		{load data from user preset}
		
		$note_order_menu := %arp_presets_user[($ARP_DATA_SIZE*($arp_preset_menu - $ARP_NUM_PRESETS_FACT - 1)) + 0]
		$tempo_double_btn := %arp_presets_user[($ARP_DATA_SIZE*($arp_preset_menu - $ARP_NUM_PRESETS_FACT - 1)) + 1]
		$beat_grid_btn := %arp_presets_user[($ARP_DATA_SIZE*($arp_preset_menu - $ARP_NUM_PRESETS_FACT - 1)) + 2]
		$octave_menu := %arp_presets_user[($ARP_DATA_SIZE*($arp_preset_menu - $ARP_NUM_PRESETS_FACT - 1)) + 3]
		$duration_sld := %arp_presets_user[($ARP_DATA_SIZE*($arp_preset_menu - $ARP_NUM_PRESETS_FACT - 1)) + 4]
		$swing_sld := %arp_presets_user[($ARP_DATA_SIZE*($arp_preset_menu - $ARP_NUM_PRESETS_FACT - 1)) + 5]
		$arp_count_3 := 0
		while($arp_count_3 < 16)
			%arp_rhythm[$arp_count_3] := %arp_presets_user[($ARP_DATA_SIZE*($arp_preset_menu - $ARP_NUM_PRESETS_FACT - 1)) + 6 + $arp_count_3]
			%arp_variation[$arp_count_3] := %arp_presets_user[($ARP_DATA_SIZE*($arp_preset_menu - $ARP_NUM_PRESETS_FACT - 1)) + 22 + $arp_count_3]
			inc($arp_count_3)
		end while
	end if
	
	{apply loaded data}
	
	$arp_count_3 := 0
	while($arp_count_3 < 16)
		set_control_par(%arp_rhythm_sld_ids[$arp_count_3],$CONTROL_PAR_VALUE,%arp_rhythm[$arp_count_3])
		set_control_par(%arp_variation_sld_ids[$arp_count_3],$CONTROL_PAR_VALUE,%arp_variation[$arp_count_3])
		inc($arp_count_3)
	end while
	
	$beat_grid := (3 + $beat_grid_btn) * ($tempo_double_btn+1)
	$num_of_steps := 12 + ($beat_grid_btn*4)

	$ticks_per_step := $TICKS_PER_BEAT/$beat_grid
	set_control_par(get_ui_id($note_bg),$CONTROL_PAR_PICTURE_STATE,$beat_grid_btn)
	call show_sequencer
	
	{parameter readout}
	set_control_par_str(get_ui_id($arp_rhythm_0_sld),$CONTROL_PAR_LABEL,$arp_rhythm_0_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_1_sld),$CONTROL_PAR_LABEL,$arp_rhythm_1_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_2_sld),$CONTROL_PAR_LABEL,$arp_rhythm_2_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_3_sld),$CONTROL_PAR_LABEL,$arp_rhythm_3_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_4_sld),$CONTROL_PAR_LABEL,$arp_rhythm_4_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_5_sld),$CONTROL_PAR_LABEL,$arp_rhythm_5_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_6_sld),$CONTROL_PAR_LABEL,$arp_rhythm_6_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_7_sld),$CONTROL_PAR_LABEL,$arp_rhythm_7_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_8_sld),$CONTROL_PAR_LABEL,$arp_rhythm_8_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_9_sld),$CONTROL_PAR_LABEL,$arp_rhythm_9_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_10_sld),$CONTROL_PAR_LABEL,$arp_rhythm_10_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_11_sld),$CONTROL_PAR_LABEL,$arp_rhythm_11_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_12_sld),$CONTROL_PAR_LABEL,$arp_rhythm_12_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_13_sld),$CONTROL_PAR_LABEL,$arp_rhythm_13_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_14_sld),$CONTROL_PAR_LABEL,$arp_rhythm_14_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_15_sld),$CONTROL_PAR_LABEL,$arp_rhythm_15_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($arp_variation_0_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_0_sld])
	set_control_par_str(get_ui_id($arp_variation_1_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_1_sld])
	set_control_par_str(get_ui_id($arp_variation_2_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_2_sld])
	set_control_par_str(get_ui_id($arp_variation_3_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_3_sld])
	set_control_par_str(get_ui_id($arp_variation_4_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_4_sld])
	set_control_par_str(get_ui_id($arp_variation_5_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_5_sld])
	set_control_par_str(get_ui_id($arp_variation_6_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_6_sld])
	set_control_par_str(get_ui_id($arp_variation_7_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_7_sld])
	set_control_par_str(get_ui_id($arp_variation_8_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_8_sld])
	set_control_par_str(get_ui_id($arp_variation_9_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_9_sld])
	set_control_par_str(get_ui_id($arp_variation_10_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_10_sld])
	set_control_par_str(get_ui_id($arp_variation_11_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_11_sld])
	set_control_par_str(get_ui_id($arp_variation_12_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_12_sld])
	set_control_par_str(get_ui_id($arp_variation_13_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_13_sld])
	set_control_par_str(get_ui_id($arp_variation_14_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_14_sld])
	set_control_par_str(get_ui_id($arp_variation_15_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_15_sld])
	
end function {}

function store_arp_preset
	$arp_change_flag := 0
	$arp_delete_flag := 0
	@arp_preset_name := get_menu_item_str(%arp_preset_control_id[0],$arp_preset_menu)
	
	{load data into user array using $arp_preset_helper}
	
	%arp_presets_user[($ARP_DATA_SIZE*$arp_preset_helper) + 0] := $note_order_menu
	%arp_presets_user[($ARP_DATA_SIZE*$arp_preset_helper) + 1] := $tempo_double_btn
	%arp_presets_user[($ARP_DATA_SIZE*$arp_preset_helper) + 2] := $beat_grid_btn
	%arp_presets_user[($ARP_DATA_SIZE*$arp_preset_helper) + 3] := $octave_menu
	%arp_presets_user[($ARP_DATA_SIZE*$arp_preset_helper) + 4] := $duration_sld
	%arp_presets_user[($ARP_DATA_SIZE*$arp_preset_helper) + 5] := $swing_sld
	$arp_count_3 := 0
	while($arp_count_3 < 16)
		%arp_presets_user[($ARP_DATA_SIZE*$arp_preset_helper) + 6 + $arp_count_3] := %arp_rhythm[$arp_count_3]
		%arp_presets_user[($ARP_DATA_SIZE*$arp_preset_helper) + 22 + $arp_count_3] := %arp_variation[$arp_count_3]
		inc($arp_count_3)
	end while
end function {}



{************************************* Sound Variation Functions ***************************}

function copy_to_all_variations
	
	$count := 0
	while ($count < $NUM_VARIATIONS)
	
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_SOUND] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_SOUND]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FAT] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FAT]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_LFO_PITCH] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_PITCH]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_SAMPLE_START] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_SAMPLE_START]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_GLIDE] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_GLIDE]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_GLIDE_ONOFF] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_GLIDE_ONOFF]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_SOLO] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_SOLO]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_LEGATO] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LEGATO]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_ARP_ONOFF] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_ARP_ONOFF]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_CHORD_ONOFF] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_CHORD_ONOFF]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_CUTOFF] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_CUTOFF]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_RESO] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_RESO]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_LFO_CUTOFF] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_CUTOFF]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_VELO_CUTOFF] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_VELO_CUTOFF]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_ENV_CUTOFF] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_ENV_CUTOFF]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FLT_ENV_DECAY] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FLT_ENV_DECAY]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FLT_TYPE] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FLT_TYPE]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FLT_ONOFF] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FLT_ONOFF]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_ATTACK] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_ATTACK]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_RELEASE] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_RELEASE]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_VEL_VOL] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_VEL_VOL]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_GAIN] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_GAIN]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_ENV] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_ENV]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FX_1] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FX_1]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FX_2] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FX_2]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_LFO_RATE] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_RATE]
		%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_LFO_TYPE] := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_TYPE]
	
		inc ($count)
	end while
	
end function {}

function change_variation
	
	{toggle functionality of sound variation buttons}
	$count := 0
	while ($count < $NUM_VARIATIONS)
		set_control_par(%variation_btn_ids[$count],$CONTROL_PAR_VALUE,0)
		inc($count)
	end while
	set_control_par(%variation_btn_ids[$selected_variation],$CONTROL_PAR_VALUE,1)
	
	{osc}
	
	$sound_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_SOUND]
	call change_eq
	
	$fat_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FAT]
	set_controller ($FAT_CC,$fat_sld)
	
	$lfo_pitch_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_PITCH]
	call change_lfo_pitch
	
	$sample_start_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_SAMPLE_START]
	call change_sample_start
	
	{perform}
	$glide_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_GLIDE]
	pgs_set_key_val(GLIDE_TIME,0,$glide_sld)
	
	$glide_btn := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_GLIDE_ONOFF]
	pgs_set_key_val(GLIDE_ON_OFF,0,$glide_btn*2)
	
	$solo_btn := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_SOLO]
	$legato_btn := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LEGATO]
	pgs_set_key_val(SOLO_MODE,0,$solo_btn*($legato_btn+1))
	
	$arp_onoff_btn := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_ARP_ONOFF]
	$arp_onoff_btn2 := $arp_onoff_btn
	
	$chord_onoff_btn := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_CHORD_ONOFF]
	$chord_onoff_btn2 := $chord_onoff_btn
	
	{filter}
	$cutoff_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_CUTOFF]
	set_controller ($CUTOFF_CC,$cutoff_sld)
	
	$reso_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_RESO]
	set_controller ($RESO_CC,$reso_sld)
	
	$lfo_cutoff_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_CUTOFF]
	call change_lfo_cutoff
	
	$velo_cutoff_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_VELO_CUTOFF]
	call change_velo_cutoff
	
	$env_cutoff_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_ENV_CUTOFF]
	call change_env_cutoff
	
	$flt_env_decay_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FLT_ENV_DECAY]
	set_controller ($FLT_ENV_DECAY_CC,$flt_env_decay_sld)
	
	$active_filter := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FLT_TYPE]
	$flt_onoff_btn := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FLT_ONOFF]
	call change_flt_type
	
	{amp}
	$attack_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_ATTACK]
	set_engine_par($ENGINE_PAR_ATTACK,$attack_sld,0,0,-1)
	
	$release_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_RELEASE]
	set_engine_par($ENGINE_PAR_RELEASE,$release_sld,0,0,-1)
	set_engine_par($ENGINE_PAR_DECAY,$release_sld,0,0,-1)
	
	$vel_vol_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_VEL_VOL]
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$vel_vol_sld,0,16,-1)
	
	$gain_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_GAIN]
	set_controller ($GAIN_CC,$gain_sld)
	
	$env_btn := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_ENV]
	set_engine_par($ENGINE_PAR_SUSTAIN,abs($env_btn-1)*1000000,0,0,-1)
	
	{fx}
	
	$fx_1_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FX_1]
	set_controller ($FX_1_CC,$fx_1_sld)
	
	$fx_2_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FX_2]
	set_controller ($FX_2_CC,$fx_2_sld)
	
	{lfo}
	$lfo_rate_sld := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_RATE]
	set_controller ($LFO_RATE_CC,$lfo_rate_sld)
	
	$active_lfo := %presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_TYPE]
	call change_lfo_type
	
	if ($arp_onoff_btn = 0)
		$count := 0
		while($count < $cursor)
			%note_buffer[$count] := 0
			inc($count)
		end while
		$cursor := 0 
		
		call stop_sequencer
	end if
	
	$morph_sld := $selected_variation * 100
	
	
	{parameter readout}
	set_control_par_str(get_ui_id($cutoff_sld),$CONTROL_PAR_LABEL,$cutoff_sld*100/127 & " %")
	set_control_par_str(get_ui_id($reso_sld),$CONTROL_PAR_LABEL,$reso_sld*100/127 & " %")
	set_control_par_str(get_ui_id($lfo_cutoff_sld),$CONTROL_PAR_LABEL,$lfo_cutoff_sld/10000 & " %")
	set_control_par_str(get_ui_id($velo_cutoff_sld),$CONTROL_PAR_LABEL,$velo_cutoff_sld/10000 & " %")
	set_control_par_str(get_ui_id($env_cutoff_sld),$CONTROL_PAR_LABEL,$env_cutoff_sld & " %")
	set_control_par_str(get_ui_id($flt_env_decay_sld),$CONTROL_PAR_LABEL,$flt_env_decay_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($sound_sld),$CONTROL_PAR_LABEL,$sound_sld & " %")
	set_control_par_str(get_ui_id($fat_sld),$CONTROL_PAR_LABEL,$fat_sld*100/127 & " %")
	set_control_par_str(get_ui_id($lfo_pitch_sld),$CONTROL_PAR_LABEL,$lfo_pitch_sld/10000 & " %")
	set_control_par_str(get_ui_id($sample_start_sld),$CONTROL_PAR_LABEL,$sample_start_sld/10000 & " %")
	
	set_control_par_str(get_ui_id($lfo_rate_sld),$CONTROL_PAR_LABEL,$lfo_rate_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($attack_sld),$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_ATTACK,0,0,-1) & " ms")
	set_control_par_str(get_ui_id($release_sld),$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_RELEASE,0,0,-1) & " ms")
	set_control_par_str(get_ui_id($vel_vol_sld),$CONTROL_PAR_LABEL,$vel_vol_sld/10000 & " %")
	set_control_par_str(get_ui_id($gain_sld),$CONTROL_PAR_LABEL,$gain_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($fx_1_sld),$CONTROL_PAR_LABEL,$fx_1_sld*100/127 & " %")
	set_control_par_str(get_ui_id($fx_2_sld),$CONTROL_PAR_LABEL,$fx_2_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($glide_sld),$CONTROL_PAR_LABEL,$glide_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($morph_sld),$CONTROL_PAR_LABEL,$morph_sld*100/700 & " %")
	
	set_control_par_str(get_ui_id($duration_sld),$CONTROL_PAR_LABEL,$duration_sld & " %")
	set_control_par_str(get_ui_id($swing_sld),$CONTROL_PAR_LABEL,$swing_sld & " %")
	
end function {}

function change_page
	
	{toggle functionality}
	$count := 0
	while ($count < num_elements(%page_btn_ids))
		set_control_par(%page_btn_ids[$count],$CONTROL_PAR_VALUE,0)
		inc($count)
	end while
	set_control_par(%page_btn_ids[$active_page],$CONTROL_PAR_VALUE,1)
	
	{change page: show current and hide last}
	if ($active_page # $last_active_page)
	
		{change wallpaper}
		
		set_skin_offset($active_page*488)
		
		{first, hide last page}
		
		select($last_active_page)
			case 0 {synth}
				$count := 0
				while ($count < num_elements(%page_1_ids))
					set_control_par(%page_1_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($count)
				end while
			case 1 {arp}
				$count := 0
				while ($count < num_elements(%page_2_ids))
					set_control_par(%page_2_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($count)
				end while
			case 2 {settings}
				$count := 0
				while ($count < num_elements(%page_3_ids))
					set_control_par(%page_3_ids[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($count)
				end while
		end select
		
		select($active_page)
			case 0 {synth}
				$count := 0
				while ($count < num_elements(%page_1_ids))
					set_control_par(%page_1_ids[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					inc($count)
				end while
			case 1 {arp}
				$count := 0
				while ($count < num_elements(%page_2_ids))
					set_control_par(%page_2_ids[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					inc($count)
				end while
				
				if ($fixed_chord_btn = 1)
					set_control_par(get_ui_id($sel_note_menu),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					set_control_par(get_ui_id($prev_sel_note_menu_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					set_control_par(get_ui_id($next_sel_note_menu_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					
					set_control_par(get_ui_id($transpose_menu),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					set_control_par(get_ui_id($prev_transpose_menu_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					set_control_par(get_ui_id($next_transpose_menu_btn),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				
				end if
				
				call show_sequencer
				
			case 2 {settings}
				$count := 0
				while ($count < num_elements(%page_3_ids))
					set_control_par(%page_3_ids[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					inc($count)
				end while
		end select
		
	end if
	
	$last_active_page := $active_page
	
end function {}


{************************************* UI Callbacks Synth ***************************}

{ function ui_callbacks_global }

on ui_control ($page_1_btn)
	$active_page := 0
	call change_page
end on

on ui_control ($page_2_btn)
	$active_page := 1
	call change_page
end on

on ui_control ($page_3_btn)
	$active_page := 2
	call change_page
end on


{function } {}


{ function ui_callbacks_osc }

on ui_control ($sound_sld)
	call change_eq
	
	if (get_control_par(get_ui_id($sound_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_SOUND] := $sound_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_SOUND] := $sound_sld
	end if
	
	set_control_par_str(get_ui_id($sound_sld),$CONTROL_PAR_LABEL,$sound_sld & " %")
	
end on

on ui_control ($fat_sld)
	set_controller ($FAT_CC,$fat_sld)
	
	
	if (get_control_par(get_ui_id($fat_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FAT] := $fat_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FAT] := $fat_sld
	end if
	
	set_control_par_str(get_ui_id($fat_sld),$CONTROL_PAR_LABEL,$fat_sld*100/127 & " %")
	
end on

on ui_control ($lfo_pitch_sld)
	call change_lfo_pitch
	
	
	if (get_control_par(get_ui_id($lfo_pitch_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_LFO_PITCH] := $lfo_pitch_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_PITCH] := $lfo_pitch_sld
	end if
	
	set_control_par_str(get_ui_id($lfo_pitch_sld),$CONTROL_PAR_LABEL,$lfo_pitch_sld/10000 & " %")
	
end on

on ui_control ($sample_start_sld)
	
	call change_sample_start
	
	if (get_control_par(get_ui_id($sample_start_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_SAMPLE_START] := $sample_start_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_SAMPLE_START] := $sample_start_sld
	end if
	
	set_control_par_str(get_ui_id($sample_start_sld),$CONTROL_PAR_LABEL,$sample_start_sld/10000 & " %")
	
end on

{function } {}

{ function ui_callbacks_filter }

on ui_control ($cutoff_sld)
	set_controller ($CUTOFF_CC,$cutoff_sld)
	
	if (get_control_par(get_ui_id($cutoff_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_CUTOFF] := $cutoff_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_CUTOFF] := $cutoff_sld
	end if
	
	set_control_par_str(get_ui_id($cutoff_sld),$CONTROL_PAR_LABEL,$cutoff_sld*100/127 & " %")
	
end on

on ui_control ($reso_sld)
	set_controller ($RESO_CC,$reso_sld)
	
	if (get_control_par(get_ui_id($reso_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_RESO] := $reso_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_RESO] := $reso_sld
	end if
	
	set_control_par_str(get_ui_id($reso_sld),$CONTROL_PAR_LABEL,$reso_sld*100/127 & " %")
	
end on

on ui_control ($lfo_cutoff_sld)
	call change_lfo_cutoff
	
	if (get_control_par(get_ui_id($lfo_cutoff_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_LFO_CUTOFF] := $lfo_cutoff_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_CUTOFF] := $lfo_cutoff_sld
	end if
	
	set_control_par_str(get_ui_id($lfo_cutoff_sld),$CONTROL_PAR_LABEL,$lfo_cutoff_sld/10000 & " %")
	
	
end on

on ui_control ($velo_cutoff_sld)
	call change_velo_cutoff
	
	if (get_control_par(get_ui_id($velo_cutoff_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_VELO_CUTOFF] := $velo_cutoff_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_VELO_CUTOFF] := $velo_cutoff_sld
	end if
	
	set_control_par_str(get_ui_id($velo_cutoff_sld),$CONTROL_PAR_LABEL,$velo_cutoff_sld/10000 & " %")
	
end on

on ui_control ($env_cutoff_sld)
	call change_env_cutoff
	
	if (get_control_par(get_ui_id($env_cutoff_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_ENV_CUTOFF] := $env_cutoff_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_ENV_CUTOFF] := $env_cutoff_sld
	end if
	
	set_control_par_str(get_ui_id($env_cutoff_sld),$CONTROL_PAR_LABEL,$env_cutoff_sld & " %")
	
end on

on ui_control ($flt_env_decay_sld)
	set_controller ($FLT_ENV_DECAY_CC,$flt_env_decay_sld)
	
	if (get_control_par(get_ui_id($flt_env_decay_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FLT_ENV_DECAY] := $flt_env_decay_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FLT_ENV_DECAY] := $flt_env_decay_sld
	end if
	
	set_control_par_str(get_ui_id($flt_env_decay_sld),$CONTROL_PAR_LABEL,$flt_env_decay_sld*100/127 & " %")
	
end on

on ui_control ($flt_1_btn)
	$active_filter := 0
	call change_flt_type
	
	if (get_control_par(get_ui_id($flt_1_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FLT_TYPE] := $active_filter
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FLT_TYPE] := $active_filter
	end if
	
end on

on ui_control ($flt_2_btn)
	$active_filter := 1
	call change_flt_type
	
	if (get_control_par(get_ui_id($flt_2_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FLT_TYPE] := $active_filter
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FLT_TYPE] := $active_filter
	end if
	
end on

on ui_control ($flt_3_btn)
	$active_filter := 2
	call change_flt_type
	
	if (get_control_par(get_ui_id($flt_3_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FLT_TYPE] := $active_filter
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FLT_TYPE] := $active_filter
	end if
	
end on

on ui_control ($flt_4_btn)
	$active_filter := 3
	call change_flt_type
	
	if (get_control_par(get_ui_id($flt_4_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FLT_TYPE] := $active_filter
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FLT_TYPE] := $active_filter
	end if
	
end on

on ui_control ($flt_onoff_btn)
	call change_flt_type
	
	if (get_control_par(get_ui_id($flt_onoff_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FLT_ONOFF] := $flt_onoff_btn
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FLT_ONOFF] := $flt_onoff_btn
	end if
	
end on

{function } {} 

{ function ui_callbacks_lfo }

on ui_control ($lfo_rate_sld)
	set_controller ($LFO_RATE_CC,$lfo_rate_sld)
	
	if (get_control_par(get_ui_id($lfo_rate_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_LFO_RATE] := $lfo_rate_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_RATE] := $lfo_rate_sld
	end if
	
	set_control_par_str(get_ui_id($lfo_rate_sld),$CONTROL_PAR_LABEL,$lfo_rate_sld*100/127 & " %")
	
end on

on ui_control ($lfo_1_btn)
	$active_lfo := 0
	
	call change_lfo_type
	
	if (get_control_par(get_ui_id($lfo_1_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_LFO_TYPE] := $active_lfo
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_TYPE] := $active_lfo
	end if
	
end on

on ui_control ($lfo_2_btn)
	$active_lfo := 1
	call change_lfo_type
	
	if (get_control_par(get_ui_id($lfo_2_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_LFO_TYPE] := $active_lfo
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_TYPE] := $active_lfo
	end if
	
end on

on ui_control ($lfo_3_btn)
	$active_lfo := 2
	call change_lfo_type
	
	if (get_control_par(get_ui_id($lfo_3_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_LFO_TYPE] := $active_lfo
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_TYPE] := $active_lfo
	end if
	
end on

on ui_control ($lfo_4_btn)
	$active_lfo := 3
	call change_lfo_type
	
	if (get_control_par(get_ui_id($lfo_4_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_LFO_TYPE] := $active_lfo
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LFO_TYPE] := $active_lfo
	end if
	
end on

{function } {}

{ function ui_callbacks_amp }

on ui_control ($attack_sld)
	set_engine_par($ENGINE_PAR_ATTACK,$attack_sld,0,0,-1)
	
	if (get_control_par(get_ui_id($attack_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_ATTACK] := $attack_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_ATTACK] := $attack_sld
	end if
	
	set_control_par_str(get_ui_id($attack_sld),$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_ATTACK,0,0,-1) & " ms")
	
end on

on ui_control ($release_sld)
	set_engine_par($ENGINE_PAR_RELEASE,$release_sld,0,0,-1)
	set_engine_par($ENGINE_PAR_DECAY,$release_sld,0,0,-1)
	
	if (get_control_par(get_ui_id($release_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_RELEASE] := $release_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_RELEASE] := $release_sld
	end if
	
	set_control_par_str(get_ui_id($release_sld),$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_RELEASE,0,0,-1) & " ms")
	
end on

on ui_control ($vel_vol_sld)
	set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$vel_vol_sld,0,16,-1) 
	
	if (get_control_par(get_ui_id($vel_vol_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_VEL_VOL] := $vel_vol_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_VEL_VOL] := $vel_vol_sld
	end if
	
	set_control_par_str(get_ui_id($vel_vol_sld),$CONTROL_PAR_LABEL,$vel_vol_sld/10000 & " %")
	
end on

on ui_control ($gain_sld)
	set_controller ($GAIN_CC,$gain_sld)
	
	if (get_control_par(get_ui_id($gain_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_GAIN] := $gain_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_GAIN] := $gain_sld
	end if
	
	set_control_par_str(get_ui_id($gain_sld),$CONTROL_PAR_LABEL,$gain_sld*100/127 & " %")
	
end on

on ui_control ($env_btn)
	
	{Percussive button, sets Sustain to zero or maximum}
	set_engine_par($ENGINE_PAR_SUSTAIN,abs($env_btn-1)*1000000,0,0,-1)
	
	if (get_control_par(get_ui_id($env_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_ENV] := $env_btn
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_ENV] := $env_btn
	end if
	
end on


{function } {}

{ function ui_callbacks_perform }

on ui_control ($glide_sld)
	pgs_set_key_val(GLIDE_TIME,0,$glide_sld)
	
	if (get_control_par(get_ui_id($glide_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_GLIDE] := $glide_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_GLIDE] := $glide_sld
	end if
	
	set_control_par_str(get_ui_id($glide_sld),$CONTROL_PAR_LABEL,$glide_sld*100/127 & " %")
	
end on

on ui_control ($glide_btn)
	pgs_set_key_val(GLIDE_ON_OFF,0,$glide_btn*2)
	
	if (get_control_par(get_ui_id($glide_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_GLIDE_ONOFF] := $glide_btn
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_GLIDE_ONOFF] := $glide_btn
	end if
	
end on

on ui_control ($solo_btn)
	pgs_set_key_val(SOLO_MODE,0,$solo_btn*($legato_btn+1))
	
	if (get_control_par(get_ui_id($solo_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_SOLO] := $solo_btn
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_SOLO] := $solo_btn
	end if
	
end on

on ui_control ($legato_btn)
	pgs_set_key_val(SOLO_MODE,0,$solo_btn*($legato_btn+1))
	
	if (get_control_par(get_ui_id($legato_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_LEGATO] := $legato_btn
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_LEGATO] := $legato_btn
	end if
	
end on

on ui_control ($arp_onoff_btn)

	$arp_onoff_btn2 := $arp_onoff_btn
	
	if (get_control_par(get_ui_id($arp_onoff_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_ARP_ONOFF] := $arp_onoff_btn
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_ARP_ONOFF] := $arp_onoff_btn
	end if
	
	
	{if ($arp_onoff_btn = 0)
		call clear_note_buffer		
		call stop_sequencer
	end if}
	
end on

on ui_control ($arp_onoff_btn2)

	$arp_onoff_btn := $arp_onoff_btn2
	
	if (get_control_par(get_ui_id($arp_onoff_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_ARP_ONOFF] := $arp_onoff_btn
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_ARP_ONOFF] := $arp_onoff_btn
	end if
	
	
	{if ($arp_onoff_btn = 0)
		call clear_note_buffer		
		call stop_sequencer
	end if}
	
end on

on ui_control ($chord_onoff_btn)

	$chord_onoff_btn2 := $chord_onoff_btn
	
	if (get_control_par(get_ui_id($chord_onoff_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_CHORD_ONOFF] := $chord_onoff_btn
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_CHORD_ONOFF] := $chord_onoff_btn
	end if
	
end on

on ui_control ($chord_onoff_btn2)

	$chord_onoff_btn := $chord_onoff_btn2
	
	if (get_control_par(get_ui_id($chord_onoff_btn),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_CHORD_ONOFF] := $chord_onoff_btn
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_CHORD_ONOFF] := $chord_onoff_btn
	end if
	
end on

{function } {}

{ function ui_callbacks_fx }

on ui_control ($fx_1_sld)
	set_controller ($FX_1_CC,$fx_1_sld)
	
	if (get_control_par(get_ui_id($fx_1_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FX_1] := $fx_1_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FX_1] := $fx_1_sld
	end if
	
	set_control_par_str(get_ui_id($fx_1_sld),$CONTROL_PAR_LABEL,$fx_1_sld*100/127 & " %")
	
end on

on ui_control ($fx_2_sld)
	set_controller ($FX_2_CC,$fx_2_sld)
	
	if (get_control_par(get_ui_id($fx_2_sld),$CONTROL_PAR_KEY_ALT) = 1)
		$count := 0
		while ($count < $NUM_VARIATIONS)
			%presets[($count * $NUM_PARAMETER) + $TABLE_IDX_FX_2] := $fx_2_sld
			inc($count)
		end while
	else
		%presets[($selected_variation * $NUM_PARAMETER) + $TABLE_IDX_FX_2] := $fx_2_sld
	end if
	
	set_control_par_str(get_ui_id($fx_2_sld),$CONTROL_PAR_LABEL,$fx_2_sld*100/127 & " %")
	
end on



{function } {}

{ function ui_callbacks_variations }
	
on ui_control ($var_1_btn)
	if ($selected_variation = 0 and get_control_par(get_ui_id($var_1_btn),$CONTROL_PAR_KEY_ALT) = 1)
		call copy_to_all_variations
		$var_1_btn := 1
	else
		$selected_variation := 0
		call change_variation
	end if
end on

on ui_control ($var_2_btn)
	if ($selected_variation = 1 and get_control_par(get_ui_id($var_2_btn),$CONTROL_PAR_KEY_ALT) = 1)
		call copy_to_all_variations
		$var_2_btn := 1
	else
		$selected_variation := 1
		call change_variation
	end if
end on

on ui_control ($var_3_btn)
	if ($selected_variation = 2 and get_control_par(get_ui_id($var_3_btn),$CONTROL_PAR_KEY_ALT) = 1)
		call copy_to_all_variations
		$var_3_btn := 1
	else
		$selected_variation := 2
		call change_variation
	end if
end on

on ui_control ($var_4_btn)
	if ($selected_variation = 3 and get_control_par(get_ui_id($var_4_btn),$CONTROL_PAR_KEY_ALT) = 1)
		call copy_to_all_variations
		$var_4_btn := 1
	else
		$selected_variation := 3
		call change_variation
	end if
end on

on ui_control ($var_5_btn)
	if ($selected_variation = 4 and get_control_par(get_ui_id($var_5_btn),$CONTROL_PAR_KEY_ALT) = 1)
		call copy_to_all_variations
		$var_5_btn := 1
	else
		$selected_variation := 4
		call change_variation
	end if
end on

on ui_control ($var_6_btn)
	if ($selected_variation = 5 and get_control_par(get_ui_id($var_6_btn),$CONTROL_PAR_KEY_ALT) = 1)
		call copy_to_all_variations
		$var_6_btn := 1
	else
		$selected_variation := 5
		call change_variation
	end if
end on

on ui_control ($var_7_btn)
	if ($selected_variation = 6 and get_control_par(get_ui_id($var_7_btn),$CONTROL_PAR_KEY_ALT) = 1)
		call copy_to_all_variations
		$var_7_btn := 1
	else
		$selected_variation := 6
		call change_variation
	end if
end on

on ui_control ($var_8_btn)
	if ($selected_variation = 7 and get_control_par(get_ui_id($var_8_btn),$CONTROL_PAR_KEY_ALT) = 1)
		call copy_to_all_variations
		$var_8_btn := 1
	else
		$selected_variation := 7
		call change_variation
	end if
end on

on ui_control ($morph_sld)
	call morph_variation
	
	set_control_par_str(get_ui_id($morph_sld),$CONTROL_PAR_LABEL,$morph_sld*100/700 & " %")
	
end on

{function } {}

{************************************* UI Callbacks Arpeggiator ***************************}


{ function ui_callbacks_arp_controls }

on ui_control ($duration_sld)
	set_control_par_str(get_ui_id($duration_sld),$CONTROL_PAR_LABEL,$duration_sld & " %")
end on

on ui_control ($swing_sld)
	set_control_par_str(get_ui_id($swing_sld),$CONTROL_PAR_LABEL,$swing_sld & " %")
end on

on ui_control ($tempo_double_btn)
	if($beat_grid_btn = 1)
		$beat_grid := 4 * ($tempo_double_btn+1)
		$num_of_steps := 16
	else
		$beat_grid := 3 * ($tempo_double_btn+1)
		$num_of_steps := 12
	end if
	
	$ticks_per_step := $TICKS_PER_BEAT/$beat_grid
end on

on ui_control ($beat_grid_btn)
	if($beat_grid_btn = 1)
		$beat_grid := 4 * ($tempo_double_btn+1)
		$num_of_steps := 16
	else
		$beat_grid := 3 * ($tempo_double_btn+1)
		$num_of_steps := 12
	end if
	
	$ticks_per_step := $TICKS_PER_BEAT/$beat_grid
	
	set_control_par_str(get_ui_id($beat_grid_btn),$CONTROL_PAR_LABEL,!beat_grid_names[$beat_grid_btn])
	
	call show_sequencer
	
end on

on ui_control ($prev_note_order_menu_btn)
	if ($note_order_menu = 0)
		$note_order_menu := get_control_par(get_ui_id($note_order_menu),$CONTROL_PAR_NUM_ITEMS) - 1
	else
		dec($note_order_menu)
	end if
	$prev_note_order_menu_btn := 0
	
end on

on ui_control ($next_note_order_menu_btn)
	if ($note_order_menu = get_control_par(get_ui_id($note_order_menu),$CONTROL_PAR_NUM_ITEMS) - 1)
		$note_order_menu := 0
	else
		inc($note_order_menu)
	end if
	$next_note_order_menu_btn := 0
end on

on ui_control ($prev_octave_menu_btn)
	if ($octave_menu = 0)
		$octave_menu := get_control_par(get_ui_id($octave_menu),$CONTROL_PAR_NUM_ITEMS) - 1
	else
		dec($octave_menu)
	end if
	$prev_octave_menu_btn := 0
end on

on ui_control ($next_octave_menu_btn)
	if ($octave_menu = get_control_par(get_ui_id($octave_menu),$CONTROL_PAR_NUM_ITEMS) - 1)
		$octave_menu := 0
	else
		inc($octave_menu)
	end if
	$next_octave_menu_btn := 0
end on

on ui_control ($init_rhythm_btn)
	
	if (get_control_par(get_ui_id($init_rhythm_btn),$CONTROL_PAR_KEY_ALT) = 1)
		
		$count := 0
		while ($count < $MAX_NUM_OF_STEPS)
			if (%arp_rhythm[$count] > 0)
				%arp_rhythm[$count] := random(1,127)
				set_control_par(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_VALUE,%arp_rhythm[$count])
			end if
			inc($count)
		end while
		
	else
	
		$count := 0
		while ($count < $MAX_NUM_OF_STEPS)
			%arp_rhythm[$count] := 127
			set_control_par(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_VALUE,127)
			inc($count)
		end while
	
	end if
	
	$init_rhythm_btn := 0

end on

on ui_control ($clear_rhythm_btn)
	
	if (get_control_par(get_ui_id($clear_rhythm_btn),$CONTROL_PAR_KEY_ALT) = 1)
		
		$count := 0
		while ($count < $MAX_NUM_OF_STEPS)
			%arp_rhythm[$count] := random(1,127)
			set_control_par(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_VALUE,%arp_rhythm[$count])
			inc($count)
		end while
		
	else
	
	
		$count := 0
		while ($count < $MAX_NUM_OF_STEPS)
			%arp_rhythm[$count] := 0
			set_control_par(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_VALUE,0)
			inc($count)
		end while
	
	end if
	
	$clear_rhythm_btn := 0

end on

on ui_control ($clear_variation_btn)
	
	if (get_control_par(get_ui_id($clear_variation_btn),$CONTROL_PAR_KEY_ALT) = 1)
	
		$count := 0
		while ($count < $MAX_NUM_OF_STEPS)
			%arp_variation[$count] := random(1,8)
			set_control_par(%arp_variation_sld_ids[$count],$CONTROL_PAR_VALUE,%arp_variation[$count])
			set_control_par_str(%arp_variation_lbl_ids[$count],$CONTROL_PAR_TEXT,!variation_slider_names[%arp_variation[$count]])
			inc($count)
		end while
	
	else
	
		$count := 0
		while ($count < $MAX_NUM_OF_STEPS)
			%arp_variation[$count] := 0
			set_control_par(%arp_variation_sld_ids[$count],$CONTROL_PAR_VALUE,0)
			set_control_par_str(%arp_variation_lbl_ids[$count],$CONTROL_PAR_TEXT,!variation_slider_names[0])
			inc($count)
		end while
	
	end if
	
	$clear_variation_btn := 0

end on

{function } {}

{ function ui_callbacks_arp_rhythm }

on ui_control ($arp_rhythm_0_sld)
	if (get_control_par(get_ui_id($arp_rhythm_0_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[0] := 127
		$arp_rhythm_0_sld := 127
	else
		%arp_rhythm[0] := $arp_rhythm_0_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_0_sld),$CONTROL_PAR_LABEL,$arp_rhythm_0_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_1_sld)
	if (get_control_par(get_ui_id($arp_rhythm_1_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[1] := 127
		$arp_rhythm_1_sld := 127
	else
		%arp_rhythm[1] := $arp_rhythm_1_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_1_sld),$CONTROL_PAR_LABEL,$arp_rhythm_1_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_2_sld)
	if (get_control_par(get_ui_id($arp_rhythm_2_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[2] := 127
		$arp_rhythm_2_sld := 127
	else
		%arp_rhythm[2] := $arp_rhythm_2_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_2_sld),$CONTROL_PAR_LABEL,$arp_rhythm_2_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_3_sld)
	if (get_control_par(get_ui_id($arp_rhythm_3_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[3] := 127
		$arp_rhythm_3_sld := 127
	else
		%arp_rhythm[3] := $arp_rhythm_3_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_3_sld),$CONTROL_PAR_LABEL,$arp_rhythm_3_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_4_sld)
	if (get_control_par(get_ui_id($arp_rhythm_4_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[4] := 127
		$arp_rhythm_4_sld := 127
	else
		%arp_rhythm[4] := $arp_rhythm_4_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_4_sld),$CONTROL_PAR_LABEL,$arp_rhythm_4_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_5_sld)
	if (get_control_par(get_ui_id($arp_rhythm_5_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[5] := 127
		$arp_rhythm_5_sld := 127
	else
		%arp_rhythm[5] := $arp_rhythm_5_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_5_sld),$CONTROL_PAR_LABEL,$arp_rhythm_5_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_6_sld)
	if (get_control_par(get_ui_id($arp_rhythm_6_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[6] := 127
		$arp_rhythm_6_sld := 127
	else
		%arp_rhythm[6] := $arp_rhythm_6_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_6_sld),$CONTROL_PAR_LABEL,$arp_rhythm_6_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_7_sld)
	if (get_control_par(get_ui_id($arp_rhythm_7_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[7] := 127
		$arp_rhythm_7_sld := 127
	else
		%arp_rhythm[7] := $arp_rhythm_7_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_7_sld),$CONTROL_PAR_LABEL,$arp_rhythm_7_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_8_sld)
	if (get_control_par(get_ui_id($arp_rhythm_8_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[8] := 127
		$arp_rhythm_8_sld := 127
	else
		%arp_rhythm[8] := $arp_rhythm_8_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_8_sld),$CONTROL_PAR_LABEL,$arp_rhythm_8_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_9_sld)
	if (get_control_par(get_ui_id($arp_rhythm_9_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[9] := 127
		$arp_rhythm_9_sld := 127
	else
		%arp_rhythm[9] := $arp_rhythm_9_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_9_sld),$CONTROL_PAR_LABEL,$arp_rhythm_9_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_10_sld)
	if (get_control_par(get_ui_id($arp_rhythm_10_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[10] := 127
		$arp_rhythm_10_sld := 127
	else
		%arp_rhythm[10] := $arp_rhythm_10_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_10_sld),$CONTROL_PAR_LABEL,$arp_rhythm_10_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_11_sld)
	if (get_control_par(get_ui_id($arp_rhythm_11_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[11] := 127
		$arp_rhythm_11_sld := 127
	else
		%arp_rhythm[11] := $arp_rhythm_11_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_11_sld),$CONTROL_PAR_LABEL,$arp_rhythm_11_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_12_sld)
	if (get_control_par(get_ui_id($arp_rhythm_12_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[12] := 127
		$arp_rhythm_12_sld := 127
	else
		%arp_rhythm[12] := $arp_rhythm_12_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_12_sld),$CONTROL_PAR_LABEL,$arp_rhythm_12_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_13_sld)
	if (get_control_par(get_ui_id($arp_rhythm_13_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[13] := 127
		$arp_rhythm_13_sld := 127
	else
		%arp_rhythm[13] := $arp_rhythm_13_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_13_sld),$CONTROL_PAR_LABEL,$arp_rhythm_13_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_14_sld)
	if (get_control_par(get_ui_id($arp_rhythm_14_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[14] := 127
		$arp_rhythm_14_sld := 127
	else
		%arp_rhythm[14] := $arp_rhythm_14_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_14_sld),$CONTROL_PAR_LABEL,$arp_rhythm_14_sld*100/127 & " %")
	
end on

on ui_control ($arp_rhythm_15_sld)
	if (get_control_par(get_ui_id($arp_rhythm_15_sld),$CONTROL_PAR_KEY_ALT) = 1)
		%arp_rhythm[15] := 127
		$arp_rhythm_15_sld := 127
	else
		%arp_rhythm[15] := $arp_rhythm_15_sld
	end if
	
	set_control_par_str(get_ui_id($arp_rhythm_15_sld),$CONTROL_PAR_LABEL,$arp_rhythm_15_sld*100/127 & " %")
	
end on

{function }  {}

{ function ui_callbacks_arp_variation }

on ui_control ($arp_variation_0_sld)
	%arp_variation[0] := $arp_variation_0_sld
	set_text($arp_variation_0_lbl,!variation_slider_names[$arp_variation_0_sld])
	
	set_control_par_str(get_ui_id($arp_variation_0_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_0_sld])
	
end on

on ui_control ($arp_variation_1_sld)
	%arp_variation[1] := $arp_variation_1_sld
	set_text($arp_variation_1_lbl,!variation_slider_names[$arp_variation_1_sld])
	set_control_par_str(get_ui_id($arp_variation_1_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_1_sld])
end on

on ui_control ($arp_variation_2_sld)
	%arp_variation[2] := $arp_variation_2_sld
	set_text($arp_variation_2_lbl,!variation_slider_names[$arp_variation_2_sld])
	set_control_par_str(get_ui_id($arp_variation_2_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_2_sld])
end on

on ui_control ($arp_variation_3_sld)
	%arp_variation[3] := $arp_variation_3_sld
	set_text($arp_variation_3_lbl,!variation_slider_names[$arp_variation_3_sld])
	set_control_par_str(get_ui_id($arp_variation_3_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_3_sld])
end on

on ui_control ($arp_variation_4_sld)
	%arp_variation[4] := $arp_variation_4_sld
	set_text($arp_variation_4_lbl,!variation_slider_names[$arp_variation_4_sld])
	set_control_par_str(get_ui_id($arp_variation_4_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_4_sld])
end on

on ui_control ($arp_variation_5_sld)
	%arp_variation[5] := $arp_variation_5_sld
	set_text($arp_variation_5_lbl,!variation_slider_names[$arp_variation_5_sld])
	set_control_par_str(get_ui_id($arp_variation_5_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_5_sld])
end on

on ui_control ($arp_variation_6_sld)
	%arp_variation[6] := $arp_variation_6_sld
	set_text($arp_variation_6_lbl,!variation_slider_names[$arp_variation_6_sld])
	set_control_par_str(get_ui_id($arp_variation_6_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_6_sld])
end on

on ui_control ($arp_variation_7_sld)
	%arp_variation[7] := $arp_variation_7_sld
	set_text($arp_variation_7_lbl,!variation_slider_names[$arp_variation_7_sld])
	set_control_par_str(get_ui_id($arp_variation_7_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_7_sld])
end on

on ui_control ($arp_variation_8_sld)
	%arp_variation[8] := $arp_variation_8_sld
	set_text($arp_variation_8_lbl,!variation_slider_names[$arp_variation_8_sld])
	set_control_par_str(get_ui_id($arp_variation_8_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_8_sld])
end on

on ui_control ($arp_variation_9_sld)
	%arp_variation[9] := $arp_variation_9_sld
	set_text($arp_variation_9_lbl,!variation_slider_names[$arp_variation_9_sld])
	set_control_par_str(get_ui_id($arp_variation_9_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_9_sld])
end on

on ui_control ($arp_variation_10_sld)
	%arp_variation[10] := $arp_variation_10_sld
	set_text($arp_variation_10_lbl,!variation_slider_names[$arp_variation_10_sld])
	set_control_par_str(get_ui_id($arp_variation_10_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_10_sld])
end on

on ui_control ($arp_variation_11_sld)
	%arp_variation[11] := $arp_variation_11_sld
	set_text($arp_variation_11_lbl,!variation_slider_names[$arp_variation_11_sld])
	set_control_par_str(get_ui_id($arp_variation_11_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_11_sld])
end on

on ui_control ($arp_variation_12_sld)
	%arp_variation[12] := $arp_variation_12_sld
	set_text($arp_variation_12_lbl,!variation_slider_names[$arp_variation_12_sld])
	set_control_par_str(get_ui_id($arp_variation_12_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_12_sld])
end on

on ui_control ($arp_variation_13_sld)
	%arp_variation[13] := $arp_variation_13_sld
	set_text($arp_variation_13_lbl,!variation_slider_names[$arp_variation_13_sld])
	set_control_par_str(get_ui_id($arp_variation_13_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_13_sld])
end on

on ui_control ($arp_variation_14_sld)
	%arp_variation[14] := $arp_variation_14_sld
	set_text($arp_variation_14_lbl,!variation_slider_names[$arp_variation_14_sld])
	set_control_par_str(get_ui_id($arp_variation_14_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_14_sld])
end on

on ui_control ($arp_variation_15_sld)
	%arp_variation[15] := $arp_variation_15_sld
	set_text($arp_variation_15_lbl,!variation_slider_names[$arp_variation_15_sld])
	set_control_par_str(get_ui_id($arp_variation_15_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_15_sld])
end on

{function }  {}

{ function ui_callbacks_arp_presets}

on ui_control($arp_preset_menu)
	if($arp_load_safety = 1)
		$arp_load_safety := 0
		if($arp_preset_menu = $ARP_NUM_PRESETS_FACT)
			$arp_preset_menu := $last_arp_preset
		else
			call load_arp_preset
		end if
		$arp_load_safety := 1
	else
		$arp_preset_menu := $last_arp_preset
	end if
end on

on ui_control($arp_preset_next_btn)
	if($arp_load_safety = 1)
		$arp_load_safety := 0
		if($arp_preset_menu = $ARP_NUM_PRESETS_FACT - 1 and %arp_num_user_presets[0] = 0)
			$arp_preset_menu := 0
		else
			if($arp_preset_menu = $ARP_NUM_PRESETS_FACT + %arp_num_user_presets[0])
				$arp_preset_menu := 0
			else
				inc($arp_preset_menu)
				if($arp_preset_menu = $ARP_NUM_PRESETS_FACT)
					inc($arp_preset_menu)
				end if
			end if
		end if
		call load_arp_preset
		$arp_load_safety := 1
		$arp_preset_next_btn := 0
	end if
end on

on ui_control($arp_preset_prev_btn)
	if($arp_load_safety = 1)
		$arp_load_safety := 0
		if($arp_preset_menu = 0)
			if(%arp_num_user_presets[0] = 0)
				$arp_preset_menu := $ARP_NUM_PRESETS_FACT - 1
			else
				$arp_preset_menu := $ARP_NUM_PRESETS_FACT + %arp_num_user_presets[0]
			end if
		else
			dec($arp_preset_menu)
			if($arp_preset_menu = $ARP_NUM_PRESETS_FACT)
				dec($arp_preset_menu)
			end if
		end if
		call load_arp_preset
		$arp_load_safety := 1
		$arp_preset_prev_btn := 0
	end if
end on

on ui_control($arp_preset_save_btn)
	if($arp_save_safety = 1)
		$arp_save_safety := 0
		if($arp_change_flag = 1 or $arp_preset_menu < $ARP_NUM_PRESETS_FACT)
			if(%arp_num_user_presets[0] = $ARP_NUM_PRESETS_USER)
				message("Out of Save Slots!")
				wait(5000000)
				message("")
				exit
			else
				if(%arp_num_user_presets[0] = 0)
					set_menu_item_visibility(%arp_preset_control_id[0], $ARP_NUM_PRESETS_FACT, 1)
				end if
				inc(%arp_num_user_presets[0])
				set_menu_item_visibility(%arp_preset_control_id[0], $ARP_NUM_PRESETS_FACT + %arp_num_user_presets[0], 1)
				set_menu_item_str(%arp_preset_control_id[0], $ARP_NUM_PRESETS_FACT + %arp_num_user_presets[0], @arp_preset_name)
				$arp_preset_menu := $ARP_NUM_PRESETS_FACT + %arp_num_user_presets[0]
			end if
			$arp_preset_helper := $arp_preset_menu - $ARP_NUM_PRESETS_FACT - 1
			!arp_preset_names_user[$arp_preset_helper] := @arp_preset_name
		end if
		call store_arp_preset
		%arp_async_check[0] := save_array(%arp_num_user_presets,1)
		%arp_async_check[1] := save_array(!arp_preset_names_user,1)
		%arp_async_check[2] := save_array(%arp_presets_user,1)
		while(%arp_async_check[0] # -1 or %arp_async_check[1] # -1 or %arp_async_check[2] # -1)
			wait(100)
		end while
		$arp_save_safety := 1
	end if
end on

on ui_control($arp_preset_delete_btn)
	if($arp_delete_safety = 1)
		$arp_delete_safety := 0
		if($arp_preset_menu > $ARP_NUM_PRESETS_FACT)
			if($arp_preset_menu = $ARP_NUM_PRESETS_FACT + %arp_num_user_presets[0])
				set_menu_item_visibility(%arp_preset_control_id[0], $ARP_NUM_PRESETS_FACT + %arp_num_user_presets[0], 0)
				dec(%arp_num_user_presets[0])
				if(%arp_num_user_presets[0] = 0)
					set_menu_item_visibility(%arp_preset_control_id[0], $ARP_NUM_PRESETS_FACT, 0)
				end if
				%arp_async_check[0] := save_array(%arp_num_user_presets,1)
				while(%arp_async_check[0] # -1)
					wait(100)
				end while
			else
				$arp_count := $arp_preset_menu - $ARP_NUM_PRESETS_FACT - 1
				while($arp_count < %arp_num_user_presets[0])
					$arp_count_2 := 0
					while($arp_count_2 < $ARP_DATA_SIZE)
						%arp_presets_user[($arp_count*$ARP_DATA_SIZE) + $arp_count_2] := %arp_presets_user[(($arp_count+1)*$ARP_DATA_SIZE) + $arp_count_2]
						inc($arp_count_2)
					end while
					!arp_preset_names_user[$arp_count] := !arp_preset_names_user[$arp_count + 1]
					set_menu_item_str(%arp_preset_control_id[0], $ARP_NUM_PRESETS_FACT + 1 + $arp_count, !arp_preset_names_user[$arp_count])
					wait($LOOP_WAIT)
					inc($arp_count)
				end while
				set_menu_item_visibility(%arp_preset_control_id[0], $ARP_NUM_PRESETS_FACT + %arp_num_user_presets[0], 0)
				dec(%arp_num_user_presets[0])
				%arp_async_check[0] := save_array(%arp_num_user_presets,1)
				%arp_async_check[1] := save_array(!arp_preset_names_user,1)
				%arp_async_check[2] := save_array(%arp_presets_user,1)
				while(%arp_async_check[0] # -1 or %arp_async_check[1] # -1 or %arp_async_check[2] # -1)
					wait(100)
				end while
			end if
			$arp_preset_menu := 0
			$arp_delete_flag := 1
			@arp_preset_name := "<new preset>"
		end if
		$arp_delete_safety := 1
	end if
end on
		
on ui_control(@arp_preset_name)
	$arp_change_flag := 1
end on

on async_complete
	
	{Arp}
	if ($NI_ASYNC_ID = %arp_async_check[0])
		%arp_async_check[0] := -1
		if($NI_ASYNC_EXIT_STATUS # 1)
			while ($init_flag # 0)
				wait(100)
			end while
			%arp_num_user_presets[0] := 0
			$arp_count := $ARP_NUM_PRESETS_FACT
			while($arp_count < $ARP_NUM_PRESETS_FACT + 1 + $ARP_NUM_PRESETS_USER)
				set_menu_item_visibility(%arp_preset_control_id[0], $arp_count, 0)
				inc($arp_count)
			end while
			if($arp_preset_menu > $ARP_NUM_PRESETS_FACT)
				$arp_preset_menu := 0
				@arp_preset_name := get_menu_item_str(%arp_preset_control_id[0],$arp_preset_menu)
				$last_arp_preset := $arp_preset_menu
			end if
		end if
	end if
	if ($NI_ASYNC_ID = %arp_async_check[1])
		%arp_async_check[1] := -1
	end if
	if ($NI_ASYNC_ID = %arp_async_check[2])
		%arp_async_check[2] := -1
	end if
	
	{Chord}
	if ($NI_ASYNC_ID = %harm_async_check[0])
		%harm_async_check[0] := -1
		if($NI_ASYNC_EXIT_STATUS # 1)
			while ($init_flag # 0)
				wait(100)
			end while
			%harm_num_user_presets[0] := 0
			$harm_count := $HARM_NUM_PRESETS_FACT
			while($harm_count < $HARM_NUM_PRESETS_FACT + 1 + $HARM_NUM_PRESETS_USER)
				set_menu_item_visibility(%harm_preset_control_id[0], $harm_count, 0)
				inc($harm_count)
			end while
			if($harm_preset_menu > $HARM_NUM_PRESETS_FACT)
				$harm_preset_menu := 0
				@harm_preset_name := get_menu_item_str(%harm_preset_control_id[0],$harm_preset_menu)
				$last_harm_preset := $harm_preset_menu
			end if
		end if
	end if
	if ($NI_ASYNC_ID = %harm_async_check[1])
		%harm_async_check[1] := -1
	end if
	if ($NI_ASYNC_ID = %harm_async_check[2])
		%harm_async_check[2] := -1
	end if
	
	
end on

{function } {}

{************************************* UI Callbacks Chord ***************************}

{ function ui_callbacks_chord }

on ui_control ($fixed_chord_btn)
	
	
	
	call update_note_controls
	
end on
	
	
on ui_control ($sel_note_menu)
	call update_note_controls
end on

on ui_control ($prev_sel_note_menu_btn)
	if ($sel_note_menu = 0)
		$sel_note_menu := get_control_par(get_ui_id($sel_note_menu),$CONTROL_PAR_NUM_ITEMS) - 1
	else
		dec($sel_note_menu)
	end if
	$prev_sel_note_menu_btn := 0
	call update_note_controls
end on

on ui_control ($next_sel_note_menu_btn)
	if ($sel_note_menu = get_control_par(get_ui_id($sel_note_menu),$CONTROL_PAR_NUM_ITEMS) - 1)
		$sel_note_menu := 0
	else
		inc($sel_note_menu)
	end if
	$next_sel_note_menu_btn := 0
	call update_note_controls
end on


on ui_control ($transpose_menu)
	call update_note_controls
end on

on ui_control ($prev_transpose_menu_btn)
	if ($transpose_menu = 0)
		$transpose_menu := get_control_par(get_ui_id($transpose_menu),$CONTROL_PAR_NUM_ITEMS) - 1
	else
		dec($transpose_menu)
	end if
	$prev_transpose_menu_btn := 0
	call update_note_controls
end on

on ui_control ($next_transpose_menu_btn)
	if ($transpose_menu = get_control_par(get_ui_id($transpose_menu),$CONTROL_PAR_NUM_ITEMS) - 1)
		$transpose_menu := 0
	else
		inc($transpose_menu)
	end if
	$next_transpose_menu_btn := 0
	call update_note_controls
end on


on ui_control ($note_1_sld)
	if ($fixed_chord_btn = 0)
		%note_1_data[$scale_degree] := $note_1_sld
	else
		%fixed_note_data[0] := $note_1_sld
	end if
	
	call update_layout
	
	set_control_par_str(get_ui_id($note_1_sld),$CONTROL_PAR_LABEL,$note_1_sld)
	
end on

on ui_control ($note_2_sld)
	if ($fixed_chord_btn = 0)
		%note_2_data[$scale_degree] := $note_2_sld
	else
		%fixed_note_data[1] := $note_2_sld
	end if
	
	call update_layout
	
	set_control_par_str(get_ui_id($note_2_sld),$CONTROL_PAR_LABEL,$note_2_sld)
	
end on

on ui_control ($note_3_sld)
	if ($fixed_chord_btn = 0)
		%note_3_data[$scale_degree] := $note_3_sld
	else
		%fixed_note_data[2] := $note_3_sld
	end if
	
	call update_layout
	
	set_control_par_str(get_ui_id($note_3_sld),$CONTROL_PAR_LABEL,$note_3_sld)
	
end on


on ui_control ($note_4_sld)
	if ($fixed_chord_btn = 0)
		%note_4_data[$scale_degree] := $note_4_sld
	else
		%fixed_note_data[3] := $note_4_sld
	end if
	
	call update_layout
	
	set_control_par_str(get_ui_id($note_4_sld),$CONTROL_PAR_LABEL,$note_4_sld)
	
end on

on ui_control ($prev_note_1_btn)
	if ($note_1_sld = -12)
		$note_1_sld := -12
	else
		dec($note_1_sld)
	end if
	$prev_note_1_btn := 0
	
	if ($fixed_chord_btn = 0)
		%note_1_data[$scale_degree] := $note_1_sld
	else
		%fixed_note_data[0] := $note_1_sld
	end if
	
	call update_layout
end on

on ui_control ($next_note_1_btn)
	if ($note_1_sld = 12)
		$note_1_sld := 12
	else
		inc($note_1_sld)
	end if
	$next_note_1_btn := 0
	
	if ($fixed_chord_btn = 0)
		%note_1_data[$scale_degree] := $note_1_sld
	else
		%fixed_note_data[0] := $note_1_sld
	end if
	
	call update_layout
end on

on ui_control ($prev_note_2_btn)
	if ($note_2_sld = -12)
		$note_2_sld := -12
	else
		dec($note_2_sld)
	end if
	$prev_note_2_btn := 0
	
	if ($fixed_chord_btn = 0)
		%note_2_data[$scale_degree] := $note_2_sld
	else
		%fixed_note_data[1] := $note_2_sld
	end if
	
	
	call update_layout
end on

on ui_control ($next_note_2_btn)
	if ($note_2_sld = 12)
		$note_2_sld := 12
	else
		inc($note_2_sld)
	end if
	$next_note_2_btn := 0
	
	if ($fixed_chord_btn = 0)
		%note_2_data[$scale_degree] := $note_2_sld
	else
		%fixed_note_data[1] := $note_2_sld
	end if
	
	call update_layout
end on



on ui_control ($prev_note_3_btn)
	if ($note_3_sld = -12)
		$note_3_sld := -12
	else
		dec($note_3_sld)
	end if
	$prev_note_3_btn := 0
	
	if ($fixed_chord_btn = 0)
		%note_3_data[$scale_degree] := $note_3_sld
	else
		%fixed_note_data[2] := $note_3_sld
	end if
	
	call update_layout
end on

on ui_control ($next_note_3_btn)
	if ($note_3_sld = 12)
		$note_3_sld := 12
	else
		inc($note_3_sld)
	end if
	$next_note_3_btn := 0
	
	if ($fixed_chord_btn = 0)
		%note_3_data[$scale_degree] := $note_3_sld
	else
		%fixed_note_data[2] := $note_3_sld
	end if
	
	call update_layout
end on

on ui_control ($prev_note_4_btn)
	if ($note_4_sld = -12)
		$note_4_sld := -12
	else
		dec($note_4_sld)
	end if
	$prev_note_4_btn := 0
	
	if ($fixed_chord_btn = 0)
		%note_4_data[$scale_degree] := $note_4_sld
	else
		%fixed_note_data[3] := $note_4_sld
	end if
	
	call update_layout
end on

on ui_control ($next_note_4_btn)
	if ($note_4_sld = 12)
		$note_4_sld := 12
	else
		inc($note_4_sld)
	end if
	$next_note_4_btn := 0
	
	if ($fixed_chord_btn = 0)
		%note_4_data[$scale_degree] := $note_4_sld
	else
		%fixed_note_data[3] := $note_4_sld
	end if
	
	call update_layout
end on

on ui_control ($note_1_btn)
	if ($fixed_chord_btn = 0)
		%note_1_state[$scale_degree] := $note_1_btn
	else
		%fixed_note_state[0] := $note_1_btn
	end if
end on

on ui_control ($note_2_btn)
	if ($fixed_chord_btn = 0)
		%note_2_state[$scale_degree] := $note_2_btn
	else
		%fixed_note_state[1] := $note_2_btn
	end if
end on

on ui_control ($note_3_btn)
	if ($fixed_chord_btn = 0)
		%note_3_state[$scale_degree] := $note_3_btn
	else
		%fixed_note_state[2] := $note_3_btn
	end if
end on

on ui_control ($note_4_btn)
	if ($fixed_chord_btn = 0)
		%note_4_state[$scale_degree] := $note_4_btn
	else
		%fixed_note_state[3] := $note_4_btn
	end if
end on



{function } {}

{ function ui_callbacks_chord_presets }

on ui_control($harm_preset_menu)
	if($harm_load_safety = 1)
		$harm_load_safety := 0
		if($harm_preset_menu = $HARM_NUM_PRESETS_FACT)
			$harm_preset_menu := $last_harm_preset
		else
			call load_harm_preset
		end if
		$harm_load_safety := 1
	else
		$harm_preset_menu := $last_harm_preset
	end if
end on

on ui_control($harm_preset_next_btn)
	if($harm_load_safety = 1)
		$harm_load_safety := 0
		if($harm_preset_menu = $HARM_NUM_PRESETS_FACT - 1 and %harm_num_user_presets[0] = 0)
			$harm_preset_menu := 0
		else
			if($harm_preset_menu = $HARM_NUM_PRESETS_FACT + %harm_num_user_presets[0])
				$harm_preset_menu := 0
			else
				inc($harm_preset_menu)
				if($harm_preset_menu = $HARM_NUM_PRESETS_FACT)
					inc($harm_preset_menu)
				end if
			end if
		end if
		call load_harm_preset
		$harm_load_safety := 1
		$harm_preset_next_btn := 0
	end if
end on

on ui_control($harm_preset_prev_btn)
	if($harm_load_safety = 1)
		$harm_load_safety := 0
		if($harm_preset_menu = 0)
			if(%harm_num_user_presets[0] = 0)
				$harm_preset_menu := $HARM_NUM_PRESETS_FACT - 1
			else
				$harm_preset_menu := $HARM_NUM_PRESETS_FACT + %harm_num_user_presets[0]
			end if
		else
			dec($harm_preset_menu)
			if($harm_preset_menu = $HARM_NUM_PRESETS_FACT)
				dec($harm_preset_menu)
			end if
		end if
		call load_harm_preset
		$harm_load_safety := 1
		$harm_preset_prev_btn := 0
	end if
end on

on ui_control($harm_preset_save_btn)
	if($harm_save_safety = 1)
		$harm_save_safety := 0
		if($harm_change_flag = 1 or $harm_preset_menu < $HARM_NUM_PRESETS_FACT)
			if(%harm_num_user_presets[0] = $HARM_NUM_PRESETS_USER)
				message("Out of Save Slots!")
				wait(5000000)
				message("")
				exit
			else
				if(%harm_num_user_presets[0] = 0)
					set_menu_item_visibility(%harm_preset_control_id[0], $HARM_NUM_PRESETS_FACT, 1)
				end if
				inc(%harm_num_user_presets[0])
				set_menu_item_visibility(%harm_preset_control_id[0], $HARM_NUM_PRESETS_FACT + %harm_num_user_presets[0], 1)
				set_menu_item_str(%harm_preset_control_id[0], $HARM_NUM_PRESETS_FACT + %harm_num_user_presets[0], @harm_preset_name)
				$harm_preset_menu := $HARM_NUM_PRESETS_FACT + %harm_num_user_presets[0]
			end if
			$harm_preset_helper := $harm_preset_menu - $HARM_NUM_PRESETS_FACT - 1
			!harm_preset_names_user[$harm_preset_helper] := @harm_preset_name
		end if
		call store_harm_preset
		%harm_async_check[0] := save_array(%harm_num_user_presets,1)
		%harm_async_check[1] := save_array(!harm_preset_names_user,1)
		%harm_async_check[2] := save_array(%harm_presets_user,1)
		while(%harm_async_check[0] # -1 or %harm_async_check[1] # -1 or %harm_async_check[2] # -1)
			wait(100)
		end while
		$harm_save_safety := 1
	end if
end on

on ui_control($harm_preset_delete_btn)
	if($harm_delete_safety = 1)
		$harm_delete_safety := 0
		if($harm_preset_menu > $HARM_NUM_PRESETS_FACT)
			if($harm_preset_menu = $HARM_NUM_PRESETS_FACT + %harm_num_user_presets[0])
				set_menu_item_visibility(%harm_preset_control_id[0], $HARM_NUM_PRESETS_FACT + %harm_num_user_presets[0], 0)
				dec(%harm_num_user_presets[0])
				if(%harm_num_user_presets[0] = 0)
					set_menu_item_visibility(%harm_preset_control_id[0], $HARM_NUM_PRESETS_FACT, 0)
				end if
				%harm_async_check[0] := save_array(%harm_num_user_presets,1)
				while(%harm_async_check[0] # -1)
					wait(100)
				end while
			else
				$harm_count := $harm_preset_menu - $HARM_NUM_PRESETS_FACT - 1
				while($harm_count < %harm_num_user_presets[0])
					$harm_count_2 := 0
					while($harm_count_2 < $HARM_DATA_SIZE)
						%harm_presets_user[($harm_count*$HARM_DATA_SIZE) + $harm_count_2] := %harm_presets_user[(($harm_count+1)*$HARM_DATA_SIZE) + $harm_count_2]
						inc($harm_count_2)
					end while
					!harm_preset_names_user[$harm_count] := !harm_preset_names_user[$harm_count + 1]
					set_menu_item_str(%harm_preset_control_id[0], $HARM_NUM_PRESETS_FACT + 1 + $harm_count, !harm_preset_names_user[$harm_count])
					wait($LOOP_WAIT)
					inc($harm_count)
				end while
				set_menu_item_visibility(%harm_preset_control_id[0], $HARM_NUM_PRESETS_FACT + %harm_num_user_presets[0], 0)
				dec(%harm_num_user_presets[0])
				%harm_async_check[0] := save_array(%harm_num_user_presets,1)
				%harm_async_check[1] := save_array(!harm_preset_names_user,1)
				%harm_async_check[2] := save_array(%harm_presets_user,1)
				while(%harm_async_check[0] # -1 or %harm_async_check[1] # -1 or %harm_async_check[2] # -1)
					wait(100)
				end while
			end if
			$harm_preset_menu := 0
			$harm_delete_flag := 1
			@harm_preset_name := "<new preset>"
		end if
		$harm_delete_safety := 1
	end if
end on
		
on ui_control(@harm_preset_name)
	$harm_change_flag := 1
end on

{function } {}

{************************************* UI Callbacks Settings ***************************}


{ function ui_callbacks_settings }

on ui_control ($global_recall_btn)
	if ($global_recall_btn = 1)
		$preset_recall_btn := 0
	else
		$global_recall_btn := 1
	end if
	
	load_array(%global_settings,1)
	
	$aftertouch_menu := %global_settings[0]
	$modwheel_menu := %global_settings[1]
	$pbend_menu := %global_settings[2]
	$pbend_down_sld := %global_settings[3]
	$pbend_up_sld := %global_settings[4]
	
	call pbend_range_down
	call pbend_range_up
	
end on

on ui_control ($preset_recall_btn)
	if ($preset_recall_btn = 1)
		$global_recall_btn := 0
	else
		$preset_recall_btn := 1
	end if
	
	$aftertouch_menu := %preset_settings[0]
	$modwheel_menu := %preset_settings[1]
	$pbend_menu := %preset_settings[2]
	$pbend_down_sld := %preset_settings[3]
	$pbend_up_sld := %preset_settings[4]
	
	call pbend_range_down
	call pbend_range_up
	
end on

on ui_control ($aftertouch_menu)
	if ($global_recall_btn = 1)
		%global_settings[0] := $aftertouch_menu
		save_array(%global_settings,1)
	else
		%preset_settings[0] := $aftertouch_menu
	end if
end on

on ui_control ($modwheel_menu)
	if ($global_recall_btn = 1)
		%global_settings[1] := $modwheel_menu
		save_array(%global_settings,1)
	else
		%preset_settings[1] := $modwheel_menu
	end if
end on

on ui_control ($pbend_menu)
	if ($global_recall_btn = 1)
		%global_settings[2] := $pbend_menu
		save_array(%global_settings,1)
	else
		%preset_settings[2] := $pbend_menu
	end if
end on

on ui_control ($pbend_down_sld)
	
	$latest_callback_id := $NI_CALLBACK_ID
	
	if ($global_recall_btn = 1)
		%global_settings[3] := $pbend_down_sld
	else
		%preset_settings[3] := $pbend_down_sld
	end if
	
	call pbend_range_down
	
	wait(500000)
	if ($global_recall_btn = 1 and $NI_CALLBACK_ID = $latest_callback_id)
		save_array(%global_settings,1)
	end if
	
end on

on ui_control ($pbend_up_sld)
	
	$latest_callback_id := $NI_CALLBACK_ID
	
	if ($global_recall_btn = 1)
		%global_settings[4] := $pbend_up_sld
	else
		%preset_settings[4] := $pbend_up_sld
	end if
	
	call pbend_range_up
	
	wait(500000)
	if ($global_recall_btn = 1 and $NI_CALLBACK_ID = $latest_callback_id)
		save_array(%global_settings,1)
	end if
	
end on

{function } {}

{************************************* Shared callbacks ***************************}

{ function listener_note_release }

on listener
	{Host Tempo}
	if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_BEAT and $seq_running = 1)
		call tick_received
	end if
end on

on note
	if ($arp_onoff_btn = 1)
	
		ignore_event($EVENT_ID)
	
		{check incoming notes}
		if (%note_ids[$EVENT_NOTE] > 0)
			exit
		else
			%note_ids[$EVENT_NOTE] := $EVENT_ID
		end if
		
		{fill buffer}
		select ($latch_mode)
			case 0 {normal}
				%note_buffer[$cursor] := $EVENT_NOTE
				inc($cursor)
			
			case 1 {latch}
			
				if ($ENGINE_UPTIME - $old_latch_time > $LATCH_TIME)
					$count := 0
						while($count < $cursor)
						%note_buffer[$count] := 0
						inc($count)
					end while
					$cursor := 0
				end if
				%note_buffer[$cursor] := $EVENT_NOTE
				inc($cursor)
				$old_latch_time := $ENGINE_UPTIME
			
		end select
			
		{if first note was played, start arp}
		if ($cursor < 2 and $seq_running = 0)
			if ($NI_TRANSPORT_RUNNING = 0)
				wait($REC_TIME_TRANSPORT_STOPPED*1000)
			else
				wait($REC_TIME_TRANSPORT_RUNNING*1000)
			end if
			call start_sequencer
			call tick_received
		end if
	
	end if
	
	if ($chord_onoff_btn = 1 and $arp_onoff_btn = 0)
	
		ignore_event($EVENT_ID)
		
		$played_note := $EVENT_NOTE
		$played_velocity := $EVENT_VELOCITY
		$played_duration := -1
		
		call create_chord
		
		
	
	end if
	
end on

on release
	if (get_event_par($EVENT_ID,$EVENT_PAR_SOURCE) # $CURRENT_SCRIPT_SLOT) {if from outside or from other slot}
		
		if (%note_ids[$EVENT_NOTE] = 0)
			exit
		else
			%note_ids[$EVENT_NOTE] := 0
		end if
		
		if ($seq_running = 1 and $latch_mode = 0)
		
			{delete note from buffer}
			$cursor_helper := 0
			$count := 0
			while($count < $cursor)
				if ($EVENT_NOTE # %note_buffer[$count])
					%note_buffer[$cursor_helper] := %note_buffer[$count]
					inc($cursor_helper)
				end if
				inc($count)
			end while
			$cursor := $cursor_helper
			
			if ($seq_running = 1 and $cursor = 0)
				call stop_sequencer
			end if
		
		end if
		
	end if
end on

{function } {}

{ function controller_callback }

on controller
	
	{ignore used MIDI CCs}
	if (in_range($CC_NUM,$MIDI_CC_MIN,$MIDI_CC_MAX))
		ignore_controller
	end if
	
	{modwheel}
	if ($CC_NUM = 1 and $modwheel_menu = 1) {change variation}
		ignore_controller
		$selected_variation := %CC[1]/16
		call change_variation
	end if
	
	if ($CC_NUM = 1 and $modwheel_menu = 2) {morph slider}
		ignore_controller
		$morph_sld := %CC[1]*700/127
		call morph_variation
	end if
	
	
	
	{aftertouch}
	if ($CC_NUM = $VCC_MONO_AT and $aftertouch_menu = 0) {vibrato}
		ignore_controller
		set_controller(1,%CC[$VCC_MONO_AT])
	end if
	
	{sustain pedal}
	if ($CC_NUM = 64 and ($seq_running = 1 or $arp_onoff_btn = 1))
		
		if (%CC[64] >= 64)
			ignore_controller
			$latch_mode := 1
		else
			$latch_mode := 0
			
			call clear_note_buffer
			
			if ($seq_running = 1)
				call stop_sequencer
			end if
		end if
	end if
	
	{pitch bend}
	if ($CC_NUM = $VCC_PITCH_BEND)
	
		select ($pbend_menu)
			
			case 0 {pitch}
				if (abs($p_up) > abs($p_down))
					$p_max := abs($p_up)
				else
					$p_max := abs($p_down)			
				end if
				if (%CC[$VCC_PITCH_BEND] < 0)
					ignore_controller
					$pbend_value := ($p_down * %CC[$VCC_PITCH_BEND])/$p_max
					set_controller($VCC_PITCH_BEND,$pbend_value)
				else
					ignore_controller
					$pbend_value := ($p_up * %CC[128])/$p_max
					set_controller($VCC_PITCH_BEND,$pbend_value)
				end if
			
			case 1 {pbend controls morph slider full }
				
				ignore_controller
				
				if (%CC[$VCC_PITCH_BEND] >= 0)
					$morph_sld := ((%CC[$VCC_PITCH_BEND]) * (700 - ($selected_variation * 100)) / (8191)) + ($selected_variation * 100)
				end if
				
				if (%CC[$VCC_PITCH_BEND] < 0)
					$morph_sld := ((%CC[$VCC_PITCH_BEND] + 8192) * (($selected_variation * 100)) / (-1 + 8192))
				end if
				
				call morph_variation
				
			case 2 {pbend controls morph slider next }
				
				{y = ((x - xmin) * (ymax - ymin) / (xmax - xmin)) + ymin}
				
				ignore_controller
				
				if (%CC[$VCC_PITCH_BEND] >= 0 and $selected_variation # 7)
					$morph_sld := ((%CC[$VCC_PITCH_BEND]) * ( (($selected_variation+1) * 100) - ($selected_variation * 100)) / (8191)) + ($selected_variation * 100)
				end if
				
				if (%CC[$VCC_PITCH_BEND] < 0 and $selected_variation # 0)
					$morph_sld := ((%CC[$VCC_PITCH_BEND] + 8192) * ( ($selected_variation * 100) -  (($selected_variation-1)*100) ) / (-1 + 8192)) + (($selected_variation-1) * 100)
				end if
				
				call morph_variation
				
		end select
	end if
end on

{function } {}

on persistence_changed
	
{ function recall }
	
	$arp_onoff_btn2 := $arp_onoff_btn
	$chord_onoff_btn2 := $chord_onoff_btn
	
	set_controller ($FAT_CC,$fat_sld)
	set_controller ($CUTOFF_CC,$cutoff_sld)
	set_controller ($RESO_CC,$reso_sld)
	set_controller ($LFO_RATE_CC,$lfo_rate_sld)
	set_controller ($FLT_ENV_DECAY_CC,$flt_env_decay_sld)
	set_controller ($GAIN_CC,$gain_sld)
	set_controller ($FX_1_CC,$fx_1_sld)
	set_controller ($FX_2_CC,$fx_2_sld)
	
	pgs_set_key_val(SAMPLE_START,0,$sample_start_sld)
	pgs_set_key_val(GLIDE_TIME,0,$glide_sld)
	pgs_set_key_val(GLIDE_ON_OFF,0,$glide_btn*2)
	pgs_set_key_val(SOLO_MODE,0,$solo_btn*($legato_btn+1))
	
	$count := 0
	while ($count < $MAX_NUM_OF_STEPS)
		set_control_par(%arp_rhythm_sld_ids[$count],$CONTROL_PAR_VALUE,%arp_rhythm[$count])
		set_control_par(%arp_variation_sld_ids[$count],$CONTROL_PAR_VALUE,%arp_variation[$count])
		set_control_par_str(%arp_variation_lbl_ids[$count],$CONTROL_PAR_TEXT,!variation_slider_names[%arp_variation[$count]])
		inc($count)
	end while
	
	call update_layout
	call update_note_controls
	
{function } {}
	
{ function presets }
	
	$last_arp_preset := $arp_preset_menu
	if($arp_delete_flag = 0)
		@arp_preset_name := get_menu_item_str(%arp_preset_control_id[0],$arp_preset_menu)
	else
		@arp_preset_name := "<new preset>"
	end if
	
	$last_harm_preset := $harm_preset_menu
	if($harm_delete_flag = 0)
		@harm_preset_name := get_menu_item_str(%harm_preset_control_id[0],$harm_preset_menu)
	else
		@harm_preset_name := "<new preset>"
	end if
	
{function } {}
	
{ function parameter_readout }
	
	set_control_par_str(get_ui_id($beat_grid_btn),$CONTROL_PAR_LABEL,!beat_grid_names[$beat_grid_btn])
	
	set_control_par_str(get_ui_id($cutoff_sld),$CONTROL_PAR_LABEL,$cutoff_sld*100/127 & " %")
	set_control_par_str(get_ui_id($reso_sld),$CONTROL_PAR_LABEL,$reso_sld*100/127 & " %")
	set_control_par_str(get_ui_id($lfo_cutoff_sld),$CONTROL_PAR_LABEL,$lfo_cutoff_sld/10000 & " %")
	set_control_par_str(get_ui_id($velo_cutoff_sld),$CONTROL_PAR_LABEL,$velo_cutoff_sld/10000 & " %")
	set_control_par_str(get_ui_id($env_cutoff_sld),$CONTROL_PAR_LABEL,$env_cutoff_sld & " %")
	set_control_par_str(get_ui_id($flt_env_decay_sld),$CONTROL_PAR_LABEL,$flt_env_decay_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($sound_sld),$CONTROL_PAR_LABEL,$sound_sld & " %")
	set_control_par_str(get_ui_id($fat_sld),$CONTROL_PAR_LABEL,$fat_sld*100/127 & " %")
	set_control_par_str(get_ui_id($lfo_pitch_sld),$CONTROL_PAR_LABEL,$lfo_pitch_sld/10000 & " %")
	set_control_par_str(get_ui_id($sample_start_sld),$CONTROL_PAR_LABEL,$sample_start_sld/10000 & " %")
	
	set_control_par_str(get_ui_id($lfo_rate_sld),$CONTROL_PAR_LABEL,$lfo_rate_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($attack_sld),$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_ATTACK,0,0,-1) & " ms")
	set_control_par_str(get_ui_id($release_sld),$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_RELEASE,0,0,-1) & " ms")
	set_control_par_str(get_ui_id($vel_vol_sld),$CONTROL_PAR_LABEL,$vel_vol_sld/10000 & " %")
	set_control_par_str(get_ui_id($gain_sld),$CONTROL_PAR_LABEL,$gain_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($fx_1_sld),$CONTROL_PAR_LABEL,$fx_1_sld*100/127 & " %")
	set_control_par_str(get_ui_id($fx_2_sld),$CONTROL_PAR_LABEL,$fx_2_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($glide_sld),$CONTROL_PAR_LABEL,$glide_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($morph_sld),$CONTROL_PAR_LABEL,$morph_sld*100/700 & " %")
	
	set_control_par_str(get_ui_id($duration_sld),$CONTROL_PAR_LABEL,$duration_sld & " %")
	set_control_par_str(get_ui_id($swing_sld),$CONTROL_PAR_LABEL,$swing_sld & " %")
	
	set_control_par_str(get_ui_id($arp_rhythm_0_sld),$CONTROL_PAR_LABEL,$arp_rhythm_0_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_1_sld),$CONTROL_PAR_LABEL,$arp_rhythm_1_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_2_sld),$CONTROL_PAR_LABEL,$arp_rhythm_2_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_3_sld),$CONTROL_PAR_LABEL,$arp_rhythm_3_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_4_sld),$CONTROL_PAR_LABEL,$arp_rhythm_4_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_5_sld),$CONTROL_PAR_LABEL,$arp_rhythm_5_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_6_sld),$CONTROL_PAR_LABEL,$arp_rhythm_6_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_7_sld),$CONTROL_PAR_LABEL,$arp_rhythm_7_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_8_sld),$CONTROL_PAR_LABEL,$arp_rhythm_8_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_9_sld),$CONTROL_PAR_LABEL,$arp_rhythm_9_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_10_sld),$CONTROL_PAR_LABEL,$arp_rhythm_10_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_11_sld),$CONTROL_PAR_LABEL,$arp_rhythm_11_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_12_sld),$CONTROL_PAR_LABEL,$arp_rhythm_12_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_13_sld),$CONTROL_PAR_LABEL,$arp_rhythm_13_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_14_sld),$CONTROL_PAR_LABEL,$arp_rhythm_14_sld*100/127 & " %")
	set_control_par_str(get_ui_id($arp_rhythm_15_sld),$CONTROL_PAR_LABEL,$arp_rhythm_15_sld*100/127 & " %")
	
	set_control_par_str(get_ui_id($arp_variation_0_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_0_sld])
	set_control_par_str(get_ui_id($arp_variation_1_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_1_sld])
	set_control_par_str(get_ui_id($arp_variation_2_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_2_sld])
	set_control_par_str(get_ui_id($arp_variation_3_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_3_sld])
	set_control_par_str(get_ui_id($arp_variation_4_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_4_sld])
	set_control_par_str(get_ui_id($arp_variation_5_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_5_sld])
	set_control_par_str(get_ui_id($arp_variation_6_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_6_sld])
	set_control_par_str(get_ui_id($arp_variation_7_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_7_sld])
	set_control_par_str(get_ui_id($arp_variation_8_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_8_sld])
	set_control_par_str(get_ui_id($arp_variation_9_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_9_sld])
	set_control_par_str(get_ui_id($arp_variation_10_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_10_sld])
	set_control_par_str(get_ui_id($arp_variation_11_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_11_sld])
	set_control_par_str(get_ui_id($arp_variation_12_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_12_sld])
	set_control_par_str(get_ui_id($arp_variation_13_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_13_sld])
	set_control_par_str(get_ui_id($arp_variation_14_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_14_sld])
	set_control_par_str(get_ui_id($arp_variation_15_sld),$CONTROL_PAR_LABEL,!variation_slider_names[$arp_variation_15_sld])
	
	set_control_par_str(get_ui_id($note_1_sld),$CONTROL_PAR_LABEL,$note_1_sld)
	set_control_par_str(get_ui_id($note_2_sld),$CONTROL_PAR_LABEL,$note_2_sld)
	set_control_par_str(get_ui_id($note_3_sld),$CONTROL_PAR_LABEL,$note_3_sld)
	set_control_par_str(get_ui_id($note_4_sld),$CONTROL_PAR_LABEL,$note_4_sld)
	
{function } {}

{ function various }
	
	call pbend_range_down
	call pbend_range_up

	call show_sequencer
	
	$count := 0
	while ($count < 128)
		%note_ids[$count] := 0
		inc($count)
	end while
	
	$cursor := 0
	call stop_sequencer
	
{function } {}
	
	$instr_loaded := 0
	
end on

{END OF SCRIPT}
